#!/bin/bash
# shellcheck source=/dev/null
# shellcheck disable=SC2154		# we work with steam variables here which are unknown to shellcheck

### project ###

PROGNAME="SteamTinkerLaunch"
PROGVERS="v2.0.2"
PROGCMD="$(basename "$0")"
PROJECTPAGE="https://github.com/frostworx/steamtinkerlaunch"

### (optionally) used programs ###

GAMEMODERUN="gamemoderun"
GAMESCOPE="gamescope"
GIT="git"
NYRNA="nyrna"
STEAM="steam"
STRACE="strace"
UNZIP="unzip"
WGET="wget"
WINECFG="winecfg"
WINETRICKS="winetricks"
WMCTRL="wmctrl"
XDO="xdotool"
XPROP="xprop"
XWININFO="xwininfo"
REPLAY="replay-sorcery"
YAD="yad"

# autotweak platforms
LU="lutris"
PF="protonfixes"
AUTOTWEAKPLATFORMS="$PF $LU"
LUATDEBUG=0

# this variable is filled with the last Auto Tweak variable accepted and is the only Auto Tweak config which is finally loaded
LOADAUTOCFG=""

### default vars ###

if [ -z "$SteamAppId" ];then
	AID="$PROGCMD"
else
	AID="$SteamAppId"
fi

if [ -z "$XDG_CONFIG_HOME" ]; then
	STLCFGDIR="$HOME/.config/$PROGCMD"														# either hardcoded config dir
else
	STLCFGDIR="$XDG_CONFIG_HOME/$PROGCMD"													# or in XDG_CONFIG_HOME if the user set the variable
fi

SYSTEMSTLCFGDIR="/usr/share/$PROGCMD"														# systemwide config dir
LOGDIR="$STLCFGDIR/logs"																	# default logfile dir
STLGAMEDIR="$STLCFGDIR/gamecfgs"															# default basedir for game the gamespecific configs
STLCATEGORYDIR="$STLCFGDIR/categories"														# the directory holding config files with preconfigured settings for games in specific steamcategories
STLREGDIR="$STLCFGDIR/regs"																	# the directory holding registry files, either as $AID.reg or called with REGEDIT
STLDLDIR="$STLCFGDIR/downloads"																# the directory holding optional downloads
TWEAKDIR="$STLCFGDIR/tweaks"																# the parent directory for all user tweakfiles
USERTWEAKDIR="$TWEAKDIR/user"																# the place for the users own main tweakfiles - tweaks in here override all other ones!
AUTOTWEAKDIR="$TWEAKDIR/auto"																# parent dir for all (upcoming) autoimport tweak files. every source will have an own subdirectory
TWEAKCMDDIR="$TWEAKDIR/cmd"																	# dir for scriptfiles used by tweakfiles
TWEAKTEMPLATEDIR="$TWEAKDIR/templates"														# dir where template tweakfiles are stored when CREATETWEAKS is enabled
SBSTWEAKDIR="$TWEAKDIR/sbs"																	# directory for optional config overrides for easier side-by-side VR gaming
ATDLDIR="$STLDLDIR/autotweak"																# main autotweak download dir
STLVORTEXDIR="$STLCFGDIR/vortex"															# stl vortex dir

#STARTEDITORCFGLIST
STLDEFGLOBALCFG="$STLCFGDIR/global.conf"													# global config
STLDEFGAMECFG="$STLCFGDIR/default_template.conf"											# the default config template used to create new per game configs - will be auto created if not found
STLGAMECFG="$STLGAMEDIR/${AID}.conf"														# the game specific config file which is used by the launched game - created from $STLDEFGAMECFG if not found
TWEAKCFG="$USERTWEAKDIR/${AID}.conf"														# the game specific shareable config tweak overrides
SBSTWEAKCFG="$SBSTWEAKDIR/${AID}.conf"														# the game specific shareable config sbs tweak overrides
STLVORTEXCFG="$STLVORTEXDIR/vortex.conf"													# vortex config
STLRESHADECFG="$STLCFGDIR/reshade.conf"														# reshade config
#ENDEDITORCFGLIST

# optional global config replacement dirs, which can be pulled using DLGLOBAL:
GLDLSTLDIR="$STLDLDIR/$PROGNAME"
GLDLSTLTXT="${GLDLSTLDIR}.txt"
GLDLTWEAKDIR="$GLDLSTLDIR/tweaks"
GLDLUSERTWEAKDIR="$GLDLTWEAKDIR/user"
GLDLSBSTWEAKDIR="$GLDLTWEAKDIR/sbs"
GLDLTWEAKCMDDIR="$GLDLTWEAKDIR/cmd"
GLDLCATEGORYDIR="$GLDLSTLDIR/categories"
GLDLMISCDIR="$GLDLSTLDIR/misc"

GLDLREGDIR="$GLDLSTLDIR/regs"

STEAMCOMPATOOLS="$HOME/.steam/steam/compatibilitytools.d/"
STLDXVKDIR="$STLCFGDIR/dxvk"																# base dxvk config dir from where default per game configs are automatically parsed

if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
# win game
	GPFX="$STEAM_COMPAT_DATA_PATH/pfx"														# currently used WINEPREFIX
	GP="$(awk -F 'waitforexitandrun ' '{print $NF}' <<< "$@" | awk -F ' GID=' '{print $1}' | awk -F '.exe' '{print $1".exe"}')"	# the absolute game path of the windows game exe - dirty hack to remove command line parameters
	GE="$(basename "$GP" | awk -F '.exe' '{print $1}')"										# just the windows game exe name
	EFD="$(dirname "$GP")"																	# the absolute directory where the game exe lives - for optional custom program
else
# linux game
	GE="$(cut -d ' ' -f1 <<< "${*##*/}")"													# binaries with space in the filename will fail here
	EFD="${*%/*}"																			# the absolute directory where the game exe lives - for optional custom program
	GP="$EFD/$GE"																			# the absolute game path of the game exe
fi

# common
GFD="$(awk -F 'common' '{print $1}' <<< "$EFD")common/$(awk -F 'common' '{print $NF}' <<< "$EFD" | cut -d'/' -f2)" # f.e. used for vortex symlinks
GN="$(grep -oE 'common/[^\/]+' <<< "$EFD" | awk -F 'common/' '{print $NF}')"				# THIS is hopefully the proper game name

GWIDFILE="/tmp/stl-sbsgwid"																	# temp file holding the game window id - worksforme

LASTRUN="$LOGDIR/lastrun.txt"																# some variables from the last run, f.e. useful for the last protonversion used

RS_D3D47_DEST="d3dcompiler_47.dll"
RS_DX_DEST="dxgi.dll"
RS_D9_DEST="d3d9.dll"

function setDefaultCfgValues {
	
	function setDefaultCfgValuesreshade {
		if [ -z "$DL_D3D47_64" ]		; then	DL_D3D47_64="https://lutris.net/files/tools/dll/d3dcompiler_47.dll"; fi
		if [ -z "$DL_D3D47_32" ]		; then	DL_D3D47_32="http://dege.freeweb.hu/dgVoodoo2/D3DCompiler_47.zip"; fi
		if [ -z "$RSSETUP" ]			; then	RSSETUP="https://reshade.me/downloads/ReShade_Setup_4.7.0.exe"; fi
		if [ -z "$DOWNLOAD_RESHADE" ]	; then	DOWNLOAD_RESHADE="1"; fi
		if [ -z "$RESHADESRCDIR" ]		; then	RESHADESRCDIR="$STLDLDIR/reshade"; fi
		if [ -z "$RS_D3D47_64" ]		; then	RS_D3D47_64="d3dcompiler_47_64.dll"; fi
		if [ -z "$RS_D3D47_32" ]		; then	RS_D3D47_32="d3dcompiler_47_32.dll"; fi
		if [ -z "$RS_64" ]				; then	RS_64="ReShade64.dll"; fi
		if [ -z "$RS_32" ]				; then	RS_32="ReShade32.dll"; fi
	}

	function setDefaultCfgValuesglobal {
		if [ -z "$DLGLOBAL" ]			; then	DLGLOBAL="1"; fi
		if [ -z "$USESTLCSS" ]			; then	USESTLCSS="0"; fi
		if [ -z "$CSSUPDATE" ]			; then	CSSUPDATE="1"; fi
		if [ -z "$AUTOTWEAKS" ]			; then	AUTOTWEAKS="$AUTOTWEAKPLATFORMS"; fi
		if [ -z "$STRACEDIR" ]			; then	STRACEDIR="$LOGDIR"; fi
		if [ -z "$LOGDIR" ]				; then	LOGDIR="$LOGDIR"; fi
		if [ -z "$LOGLEVEL" ]			; then	LOGLEVEL="2"; fi
		if [ -z "$STLEDITOR" ]			; then	STLEDITOR="$(which geany)"; fi
		if [ -z "$WAITEDITOR" ]			; then	WAITEDITOR="2";	fi
		if [ -z "$MAXASK" ]				; then	MAXASK="3"; fi
		if [ -z "$PDBURL" ]				; then	PDBURL="https://www.protondb.com/app"; fi
		if [ -z "$BROWSER" ]			; then	BROWSER="$(which firefox)"; fi
		if [ -z "$NOTY" ]				; then	NOTY="$(which notify-send)"; fi
		if [ -z "$USENOTIFIER" ]		; then	USENOTIFIER="1"; fi
		if [ -z "$NETMON" ]				; then	NETMON="$(which netstat)"; fi
		if [ -z "$NETOPTS" ]			; then	NETOPTS="-taucp -W"; fi
		if [ -z "$NETMONDIR" ]			; then	NETMONDIR="$LOGDIR"; fi
		if [ -z "$VRVIDEOPLAYER" ]		; then	VRVIDEOPLAYER="$(which vr-video-player)"; fi
		if [ -z "$CREATETWEAKS" ]		; then	CREATETWEAKS="1"; fi
		if [ -z "$GAMCON" ]				; then	GAMCON="/usr/share/gameconqueror/GameConqueror.py"; fi
		if [ -z "$ATVALIDATE" ]			; then	ATVALIDATE="2"; fi
		if [ -z "$GLOBALREGDIR" ]		; then	GLOBALREGDIR="$SYSTEMSTLCFGDIR/regs"; fi
		if [ -z "$GLOBALTWEAKDIR" ]		; then	GLOBALTWEAKDIR="$SYSTEMSTLCFGDIR/tweaks"; fi
		if [ -z "$GLOBALSBSTWEAKDIR" ]	; then	GLOBALSBSTWEAKDIR="$SYSTEMSTLCFGDIR/tweaks/sbs"; fi
		if [ -z "$GLOBALUSERTWEAKDIR" ]	; then	GLOBALUSERTWEAKDIR="$SYSTEMSTLCFGDIR/tweaks/user"; fi		
		if [ -z "$GLOBALTWEAKCMDDIR" ]	; then	GLOBALTWEAKCMDDIR="$SYSTEMSTLCFGDIR/tweaks/cmd"; fi
		if [ -z "$GLOBALCATEGORYDIR" ]	; then	GLOBALCATEGORYDIR="$SYSTEMSTLCFGDIR/categories"; fi
		if [ -z "$GLOBALMISCDIR" ]		; then	GLOBALMISCDIR="$SYSTEMSTLCFGDIR/misc"; fi
		if [ -z "$BOXTRONCMD" ]			; then	BOXTRONCMD="/usr/share/boxtron/run-dosbox"; fi
		if [ -z "$BOXTRONARGS" ]		; then	BOXTRONARGS="--wait-before-run"; fi
		if [ -z "$ROBERTACMD" ]			; then	ROBERTACMD="$HOME/.local/share/Steam/compatibilitytools.d/roberta/run-vm"; fi
		if [ -z "$ROBERTAARGS" ]		; then	ROBERTAARGS="--wait-before-run"; fi
		if [ -z "$LUXTORPEDACMD" ]		; then	LUXTORPEDACMD="$HOME/.local/share/Steam/compatibilitytools.d/luxtorpeda/luxtorpeda"; fi
		if [ -z "$LUXTORPEDAARGS" ]		; then	LUXTORPEDAARGS="wait-before-run"; fi
		if [ -z "$DEPTH3DURL" ]			; then	DEPTH3DURL="https://github.com/BlueSkyDefender/Depth3D.git"; fi
		if [ -z "$CLONE_DEPTH3D" ]		; then	CLONE_DEPTH3D="1"; fi
		if [ -z "$DEPTH3DSRCDIR" ]		; then	DEPTH3DSRCDIR="$STLDLDIR/Depth3D"; fi
		if [ -z "$STLSETWIDTH" ]		; then	STLSETWIDTH="1920"; fi
		if [ -z "$STLSETHEIGHT" ]		; then	STLSETHEIGHT="1080"; fi
	}

	function setDefaultCfgValuesdefault_template {
		if [ -z "$RUN_CUSTOMCMD" ]		; then	RUN_CUSTOMCMD="0"; fi
		if [ -z "$CUSTOMCMD" ]			; then	CUSTOMCMD="$(which echo)"; fi
		if [ -z "$CUSTOMCMD_ARGS" ]		; then	CUSTOMCMD_ARGS="none"; fi
		if [ -z "$ONLY_CUSTOMCMD" ]		; then	ONLY_CUSTOMCMD="0";	fi
		if [ -z "$FORK_CUSTOMCMD" ]		; then	FORK_CUSTOMCMD="0";	fi
		if [ -z "$GAMEARGS" ]			; then	GAMEARGS="none"; fi
		if [ -z "$USEGAMEMODERUN" ]		; then	USEGAMEMODERUN="0";	fi
		if [ -z "$USEGAMESCOPE" ]		; then	USEGAMESCOPE="0";	fi
		if [ -z "$GAMESCOPE_ARGS" ]		; then	GAMESCOPE_ARGS="--";	fi
		if [ -z "$MANGOHUD" ]			; then	MANGOHUD="0";	fi
		if [ -z "$ENABLE_VKBASALT" ]	; then	ENABLE_VKBASALT="0"; fi
		if [ -z "$RUN_NYRNA" ]			; then	RUN_NYRNA="0"; fi
		if [ -z "$RUN_REPLAY" ]			; then	RUN_REPLAY="0";	fi
		if [ -z "$RUN_GAMCON" ]			; then	RUN_GAMCON="0";	fi
		if [ -z "$GAMCONWAITEXE" ]		; then	GAMCONWAITEXE="$(which echo)"; fi
		if [ -z "$VORTEXMODE" ]			; then	VORTEXMODE="disabled";	fi
		if [ -z "$CHANGE_PULSE_LATENCY" ] 	; then	CHANGE_PULSE_LATENCY="0"; fi
		if [ -z "$STL_PULSE_LATENCY_MSEC" ]	; then	STL_PULSE_LATENCY_MSEC="60"; fi
		if [ -z "$TOGGLEWINDOWS" ]		; then	TOGGLEWINDOWS="0"; fi
		if [ -z "$RADV_PERFTEST" ]		; then	RADV_PERFTEST="aco"; fi
		if [ -z "$RUN_WINETRICKS" ]		; then	RUN_WINETRICKS="0"; fi
		if [ -z "$WINETRICKSPAKS" ]		; then	WINETRICKSPAKS="none"; fi
		if [ -z "$RUN_WINECFG" ]		; then	RUN_WINECFG="0"; fi
		if [ -z "$VIRTUALDESKTOP" ]		; then	VIRTUALDESKTOP="0"; fi
		if [ -z "$USEBOXTRON" ]			; then	USEBOXTRON="0"; fi
		if [ -z "$USEROBERTA" ]			; then	USEROBERTA="0"; fi
		if [ -z "$USELUXTORPEDA" ]		; then	USELUXTORPEDA="0"; fi
		if [ -z "$REGEDIT" ]			; then	REGEDIT="1"; fi
		if [ -z "$INSTALL_RESHADE" ]	; then	INSTALL_RESHADE="0"; fi
		if [ -z "$RESHADE_DEPTH3D" ]	; then	RESHADE_DEPTH3D="0"; fi
		if [ -z "$USERESHADE" ]			; then	USERESHADE="0"; fi
		if [ -z "$RUNSBSVR" ]			; then	RUNSBSVR="0"; fi
		if [ -z "$VRVIDEOPLAYERARGS" ]	; then	VRVIDEOPLAYERARGS="--flat"; fi
		if [ -z "$SBSZOOM" ]			; then	SBSZOOM="1.0"; fi
		if [ -z "$SBSVRVK" ]			; then	SBSVRVK="0"; fi
		if [ -z "$SBSVRRS" ]			; then	SBSVRRS="0"; fi
		if [ -z "$VRGAMEWINDOW" ]		; then	VRGAMEWINDOW="empty"; fi
		if [ -z "$WAITEDITOR" ]			; then	WAITEDITOR="2"; fi
		if [ -z "$PROTONDB" ]			; then	PROTONDB="0"; fi
		if [ -z "$ATVALIDATE" ]			; then	ATVALIDATE="0"; fi
		if [ -z "$ATADOPT" ]			; then	ATADOPT="0"; fi
		if [ -z "$IGNOREAUTOTWEAKS" ]	; then	IGNOREAUTOTWEAKS="1"; fi
		if [ -z "$STRACERUN" ]			; then	STRACERUN="0"; fi
		if [ -z "$STRACEOPTS" ]			; then	STRACEOPTS="-f -t -e trace=file"; fi
		if [ -z "$USENETMON" ]			; then	USENETMON="0"; fi
		if [ -z "$DXVK_HUD" ]			; then	DXVK_HUD="0"; fi
		if [ -z "$DXVK_LOG_LEVEL" ]		; then	DXVK_LOG_LEVEL="none"; fi
		if [ -z "$PROTON_LOG" ]			; then	PROTON_LOG="0"; fi
		if [ -z "$PROTON_DEBUG_DIR" ]	; then	PROTON_DEBUG_DIR="/tmp"; fi
		if [ -z "$PROTON_USE_WINED3D" ]	; then	PROTON_USE_WINED3D="0"; fi
		if [ -z "$PROTON_NO_D3D11" ]	; then	PROTON_NO_D3D11="0"; fi
		if [ -z "$PROTON_NO_D3D10" ]	; then	PROTON_NO_D3D10="0"; fi
		if [ -z "$PROTON_NO_ESYNC" ]	; then	PROTON_NO_ESYNC="0"; fi
		if [ -z "$PROTON_NO_FSYNC" ]	; then	PROTON_NO_FSYNC="0"; fi
		if [ -z "$PROTON_FORCE_LARGE_ADDRESS_AWARE" ]; then	PROTON_FORCE_LARGE_ADDRESS_AWARE="1"; fi	
		if [ -z "$PROTON_DUMP_DEBUG_COMMANDS" ]	; then	PROTON_DUMP_DEBUG_COMMANDS="0"; fi
		if [ -z "$WINE_FULLSCREEN_INTEGER_SCALING" ]; then	WINE_FULLSCREEN_INTEGER_SCALING="0"; fi
		if [ -z "$USERSTART" ]			; then	USERSTART="$(which echo)"; fi
		if [ -z "$USERSTOP" ]			; then	USERSTOP="$(which echo)"; fi
	}

	function setDefaultCfgValuesvortex {
		if [ -z "$VORTEXWINE" ]			; then	VORTEXWINE="$(which wine)"; fi
		if [ -z "$VORTEXPREFIX" ]		; then	VORTEXPREFIX="$STLVORTEXDIR/wineprefix"; fi
		if [ -z "$VORTEXWINEDEBUG" ]	; then	VORTEXWINEDEBUG="-all"; fi
		if [ -z "$VORTEX_DXVK_LOG_LEVEL" ]	; then	VORTEX_DXVK_LOG_LEVEL="none"; fi
		if [ -z "$VORTEX_DXVK_LOG_PATH" ]	; then	VORTEX_DXVK_LOG_PATH="none"; fi
		if [ -z "$VORTEXDOWNLOADPATH" ]	; then	VORTEXDOWNLOADPATH="$STLVORTEXDIR/downloads"; fi
		if [ -z "$VORTEXINSTALL" ]		; then	VORTEXINSTALL="1"; fi
		if [ -z "$VORTEXVERSION" ]		; then	VORTEXVERSION="1.2.20"; fi
		if [ -z "$VORTEXURL" ]			; then	VORTEXURL="https://github.com/Nexus-Mods/Vortex/releases/download/v"; fi
		if [ -z "$VORTEXSTAGES" ]		; then	VORTEXSTAGES="empty"; fi
		if [ -z "$DISABLE_AUTOSTAGES" ]	; then	DISABLE_AUTOSTAGES="0"; fi
		if [ -z "$SKIPCHECKPATCHEDPROTON" ]	; then	SKIPCHECKPATCHEDPROTON="0"; fi
		if [ -z "$PROTOLAURL" ]			; then	PROTOLAURL="https://github.com/Patola/wine/releases"; fi
		if [ -z "$PROTOLAREQ" ]			; then	PROTOLAREQ="20"; fi
		if [ -z "$PROTOLAVER" ]			; then	PROTOLAVER="protola-5.0-9.1"; fi
		if [ -z "$PROTOLADLDIR" ]		; then	PROTOLADLDIR="$STLDLDIR"; fi
	}
	
	"${FUNCNAME[0]}$1"
}

function saveCfg {

	function saveCfgreshade {

		setDefaultCfgValues "$2"
		
		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgreshade
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## ReShade online ressources - see README:"
			echo "DL_D3D47_64=\"$DL_D3D47_64\""
			echo "DL_D3D47_32=\"$DL_D3D47_32\""
			echo "RSSETUP=\"$RSSETUP\""
			echo "## allow download of ReShade sourcefiles:"
			echo "DOWNLOAD_RESHADE=\"$DOWNLOAD_RESHADE\""
			echo "## ReShade sourcefiles:"
			echo "RESHADESRCDIR=\"$RESHADESRCDIR\""
			echo "RS_D3D47_64=\"$RS_D3D47_64\""
			echo "RS_D3D47_32=\"$RS_D3D47_32\""
			echo "RS_64=\"$RS_64\""
			echo "RS_32=\"$RS_32\""
			} >> "$1"
			#ENDsaveCfgreshade
		fi
	}

	function saveCfgglobal {

		setDefaultCfgValues "$2"

		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgglobal
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## pull '$PROGCMD' from '$PROJECTPAGE' to '$GLOBALDLSTLDIR' and use its config files (only used if global configs not installed!)"
			echo "DLGLOBAL=\"$DLGLOBAL\""
			echo "## use $PROGCMD Steam GTK css"
			echo "USESTLCSS=\"$USESTLCSS\""
			echo "## update $PROGCMD Steam GTK css"
			echo "CSSUPDATE=\"$CSSUPDATE\""
			echo "## all platforms listed here will be used when AutoTweaks are enabled - start stl from commandline or see README for supported platforms"
			echo "AUTOTWEAKS=\"$AUTOTWEAKS\""
			echo "## the base strace path used to optionally dump strace logs"
			echo "STRACEDIR=\"$STRACEDIR\""
			echo "## default logfile dir"
			echo "LOGDIR=\"$LOGDIR\""
			echo "## write logfile if not 0, increase verbosity from 1-2 (1:less, 2:all)"
			echo "LOGLEVEL=\"$LOGLEVEL\""
			echo "## texteditor to use for opening the game config - f.e. with WAITEDITOR"
			echo "STLEDITOR=\"$STLEDITOR\""
			echo "## wait WAITEDITOR seconds for a keypress to open the texteditor STLEDITOR with the game config"
			echo "WAITEDITOR=\"$WAITEDITOR\""
			echo "## how often should the 'open editor requester' pup up until it gets automatically disabled for a game"
			echo "MAXASK=\"$MAXASK\""
			echo "## protondb base url - for optional PROTONDB"
			echo "PDBURL=\"$PDBURL\""
			echo "## Browser used for PROTONDB:"
			echo "BROWSER=\"$BROWSER\""
			echo "## enable notifier:"
			echo "USENOTIFIER=\"$USENOTIFIER\""
			echo "## notifier command - used when the command is found:"
			echo "NOTY=\"$NOTY\""
			echo "## program to record game network-traffic"
			echo "NETMON=\"$NETMON\""
			echo "## options for NETMON:"
			echo "NETOPTS=\"$NETOPTS\""
			echo "## the base path for netmon logs"
			echo "NETMONDIR=\"$NETMONDIR\""
			echo "## vr-video-player"
			echo "VRVIDEOPLAYER=\"$VRVIDEOPLAYER\""
			echo "## set to 1 create tweak config templates in TWEAKTEMPLATEDIR for the launched game if not found"
			echo "CREATETWEAKS=\"$CREATETWEAKS\""
			echo "## the gameconqueror executable file - default is the direct python script as it doesn't use pkexec"
			echo "GAMCON=\"$GAMCON\""
			echo "## wait ATVALIDATE seconds for a keypress to open the texteditor STLEDITOR when a autotweak config is found before loading it - only used when AUTOTWEAKS are used"
			echo "ATVALIDATE=\"$ATVALIDATE\""
			echo "## directory with global registry files"
			echo "GLOBALREGDIR=\"$GLOBALREGDIR\""
			echo "## parent directory for all global tweaks"
			echo "GLOBALTWEAKDIR=\"$GLOBALTWEAKDIR\""
			echo "## directory with global sbs-tweaks"
			echo "GLOBALSBSTWEAKDIR=\"$GLOBALSBSTWEAKDIR\""
			echo "## directory with global tweaks"
			echo "GLOBALUSERTWEAKDIR=\"$GLOBALUSERTWEAKDIR\""
			echo "## directory with global tweak commands"
			echo "GLOBALTWEAKCMDDIR=\"$GLOBALTWEAKCMDDIR\""
			echo "## directory for global steam category configs:"
			echo "GLOBALCATEGORYDIR=\"$GLOBALCATEGORYDIR\""
			echo "## directory for global misc configs:"
			echo "GLOBALMISCDIR=\"$GLOBALMISCDIR\""
			echo "## the boxtron command:"
			echo "BOXTRONCMD=\"$BOXTRONCMD\""
			echo "## boxtron args:"
			echo "BOXTRONARGS=\"$BOXTRONARGS\""
			echo "## the roberta command:"
			echo "ROBERTACMD=\"$ROBERTACMD\""
			echo "## roberta args:"
			echo "ROBERTAARGS=\"$ROBERTAARGS\""
			echo "## the luxtorpeda command:"
			echo "LUXTORPEDACMD=\"$LUXTORPEDACMD\""
			echo "## luxtorpeda args:"
			echo "LUXTORPEDAARGS=\"$LUXTORPEDAARGS\""
			echo "##### SideBySide #####"
			echo "## Depth3D git project:"
			echo "DEPTH3DURL=\"$DEPTH3DURL\""
			echo "## allow git clone of Depth3D shaderfiles :"
			echo "CLONE_DEPTH3D=\"$CLONE_DEPTH3D\""
			echo "## Depth3D sourcefiles:"
			echo "DEPTH3DSRCDIR=\"$DEPTH3DSRCDIR\""
			echo "## Settings GUI Width:"
			echo "STLSETWIDTH=\"$STLSETWIDTH\""
			echo "## Settings GUI Height:"
			echo "STLSETHEIGHT=\"$STLSETHEIGHT\""
			} >> "$1"
			#ENDsaveCfgglobal
		fi
		updateEditor "$1"
	}

	function saveCfgdefault_template {

		setDefaultCfgValues "$2"

		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgdefault_template
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## set to 1 to enable the custom command CUSTOMCMD. If CUSTOMCMD is not set a file requester opens to choose from. if RUN_CUSTOMCMD is 2 the chosen exe won't be saved into the config automatically:"
			echo "RUN_CUSTOMCMD=\"$RUN_CUSTOMCMD\""
			echo "## start this custom command:"
			echo "CUSTOMCMD=\"$CUSTOMCMD\""
			echo "## start CUSTOMCMD command with following args:"
			echo "CUSTOMCMD_ARGS=\"$CUSTOMCMD_ARGS\""
			echo "## set to 1 to only start above CUSTOMCMD and not the game command itself:"
			echo "ONLY_CUSTOMCMD=\"$ONLY_CUSTOMCMD\""
			echo "## set to 1 to fork the custom CUSTOMCMD into the background and continue with starting %command%"
			echo "FORK_CUSTOMCMD=\"$FORK_CUSTOMCMD\""
			echo "## additional game args, so you don't have to append them in steam after %command%:"
			echo "GAMEARGS=\"$GAMEARGS\""
			echo "## start game with $GAMEMODERUN:"
			echo "USEGAMEMODERUN=\"$USEGAMEMODERUN\""
			echo "## start game with $GAMESCOPE:"
			echo "USEGAMESCOPE=\"$USEGAMESCOPE\""
			echo "## start gamescope command with following args:"
			echo "GAMESCOPE_ARGS=\"$GAMESCOPE_ARGS\""
			echo "## set to 1 to enable mangohud for the launched game:"
			echo "MANGOHUD=\"$MANGOHUD\""
			echo "## set to 1 to start the game with vkbasalt:"
			echo "ENABLE_VKBASALT=\"$ENABLE_VKBASALT\""
			echo "## set to 1 to enable nyrna while game is running"
			echo "RUN_NYRNA=\"$RUN_NYRNA\""
			echo "## set to 1 to enable replay-sorcery while game is running"
			echo "RUN_REPLAY=\"$RUN_REPLAY\""
			echo "## start gameconqueror for the launched game"
			echo "RUN_GAMCON=\"$RUN_GAMCON\""
			echo "## make gameconqueror wait for this exe instead of the regular one - used when file exists"
			echo "GAMCONWAITEXE=\"$GAMCONWAITEXE\""
			echo "## The Vortex Mode - default disabled"
			echo "VORTEXMODE=\"$VORTEXMODE\""
			echo "## Enable Changing the Pulse latency"
			echo "CHANGE_PULSE_LATENCY=\"$CHANGE_PULSE_LATENCY\""
			echo "## Change Pulse latency"
			echo "STL_PULSE_LATENCY_MSEC=\"$STL_PULSE_LATENCY_MSEC\""
			echo "## toggle visibility of all open windows on start/stop"
			echo "TOGGLEWINDOWS=\"$TOGGLEWINDOWS\""
			echo "## set radv mode:"
			echo "RADV_PERFTEST=\"$RADV_PERFTEST\""
			echo "## comment in to use amdvlk"
			echo "#VK_ICD_FILENAMES=\"/usr/share/vulkan/icd.d/amd_icd32.json:/usr/share/vulkan/icd.d/amd_icd64.json\""
			echo "## OR comment in to use vulkan-radeon"
			echo "#VK_ICD_FILENAMES=\"/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json\""
			echo "## start winetricks gui before game launch:"
			echo "RUN_WINETRICKS=\"$RUN_WINETRICKS\""
			echo "## install all packages in WINETRICKSPAKS silently with winetricks:"
			echo "WINETRICKSPAKS=\"$WINETRICKSPAKS\""
			echo "## start winecfg before game launch:"
			echo "RUN_WINECFG=\"$RUN_WINECFG\""
			echo "## set to 1 to enable virtualdesktop for the game"
			echo "VIRTUALDESKTOP=\"$VIRTUALDESKTOP\""
			echo "## set to 1 to start the game using boxtron/dosbox"
			echo "USEBOXTRON=\"$USEBOXTRON\""
			echo "## set to 1 to start the game using roberta/scummvm"
			echo "USEROBERTA=\"$USEROBERTA\""
			echo "## set to 1 to start the game using luxtorpeda"
			echo "USELUXTORPEDA=\"0\""
			echo "## set to 1 to auto-apply registry files for AID when found or enter a registry filename which should be loaded from either GLOBALREGDIR (or GLDLREGDIR) or STLREGDIR"
			echo "REGEDIT=\"$REGEDIT\""
			echo "## set to 1 to install ReShade:"
			echo "INSTALL_RESHADE=\"$INSTALL_RESHADE\""
			echo "## set to 1 to install ReShade Depth3D Shader into gamedir:"
			echo "RESHADE_DEPTH3D=\"$RESHADE_DEPTH3D\""
			echo "## set to 1 to start game with ReShade enabled:"
			echo "USERESHADE=\"$USERESHADE\""
			echo "## set to 1 to start the game with VRVIDEOPLAYER in VR at once or to a greater value to delay SteamVR and SBS for RUNSBSVR seconds"
			echo "RUNSBSVR=\"$RUNSBSVR\""
			echo "## vr-video-player args"
			echo "VRVIDEOPLAYERARGS=\"$VRVIDEOPLAYERARGS\""
			echo "## vr-video-player zoom value"
			echo "SBSZOOM=\"$SBSZOOM\""
			echo "## shortcut to enable all required flags for SBSVR with vkbasalt"
			echo "SBSVRVK=\"$SBSVRVK\""
			echo "## shortcut to enable all required flags for SBSVR with ReShade"
			echo "SBSVRRS=\"$SBSVRRS\""	
			echo "## optional name of the game window for VRVIDEOPLAYER - works more stable and is faster:"
			echo "VRGAMEWINDOW=\"$VRGAMEWINDOW\""
			echo "## overrides global config:"
			echo "WAITEDITOR=\"$WAITEDITOR\""
			echo "## set PROTONDB to 1 to also open protondb.com for the game in your $BROWSER when starting the editor STLEDITOR:"
			echo "PROTONDB=\"$PROTONDB\""
			echo "## overrides global config:"
			echo "ATVALIDATE=\"$ATVALIDATE\""
			echo "## ask to adopt the used autotweak after game exit:"
			echo "ATADOPT=\"$ATADOPT\""
			echo "## Ignore all auto tweaks for this game if enabled:"
			echo "IGNOREAUTOTWEAKS=\"$IGNOREAUTOTWEAKS\""
			echo "## dxvk vars - see https://github.com/doitsujin/dxvk"
			echo "DXVK_HUD=\"$DXVK_HUD\""
			echo "DXVK_LOG_LEVEL=\"$DXVK_LOG_LEVEL\""
			echo "## strace settings:"
			echo "STRACERUN=\"$STRACERUN\""
			echo "STRACEOPTS=\"$STRACEOPTS\""
			echo "## enable network-monitor"
			echo "USENETMON=\"$USENETMON\""
			echo "## proton vars:"
			echo "PROTON_LOG=\"$PROTON_LOG\""
			echo "PROTON_DUMP_DEBUG_COMMANDS=\"$PROTON_DUMP_DEBUG_COMMANDS\""
			echo "PROTON_DEBUG_DIR=\"$PROTON_DEBUG_DIR\""
			echo "PROTON_USE_WINED3D=\"$PROTON_USE_WINED3D\""
			echo "PROTON_NO_D3D11=\"$PROTON_NO_D3D11\""
			echo "PROTON_NO_D3D10=\"$PROTON_NO_D3D10\""
			echo "PROTON_NO_ESYNC=\"$PROTON_NO_ESYNC\""
			echo "PROTON_NO_FSYNC=\"$PROTON_NO_FSYNC\""
			echo "PROTON_FORCE_LARGE_ADDRESS_AWARE=\"$PROTON_FORCE_LARGE_ADDRESS_AWARE\""
			echo "## wine vars:"
			echo "WINE_FULLSCREEN_INTEGER_SCALING=\"$WINE_FULLSCREEN_INTEGER_SCALING\""
			echo "## custom user script executed when a game starts"
			echo "USERSTART=\"$USERSTART\""
			echo "## custom user script executed when a game stops"
			echo "USERSTOP=\"$USERSTOP\""
			} >> "$1"
			#ENDsaveCfgdefault_template
		fi
	}

	function saveCfgvortex {

		setDefaultCfgValues "$2"
		
		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgvortex
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## the wine binary used for Vortex - if commented out or not found this defaults to current proton wine and system wine as fallback"
			echo "VORTEXWINE=\"$VORTEXWINE\""
			echo "## the WINEPREFIX path used for Vortex"
			echo "VORTEXPREFIX=\"$VORTEXPREFIX\""
			echo "## WINEDEBUG options for Vortex"
			echo "VORTEXWINEDEBUG=\"$VORTEXWINEDEBUG\""
			echo "##  dxvk log level for Vortex"
			echo "VORTEX_DXVK_LOG_LEVEL=\"$VORTEX_DXVK_LOG_LEVEL\""
			echo "##  dxvk log path for Vortex"
			echo "VORTEX_DXVK_LOG_PATH=\"$VORTEX_DXVK_LOG_PATH\""
			echo "## the path where Vortex should be stored"
			echo "VORTEXDOWNLOADPATH=\"$VORTEXDOWNLOADPATH\""
			echo "## download and install Vortex automatically if set to 1"
			echo "VORTEXINSTALL=\"$VORTEXINSTALL\""
			echo "## the Vortex version to download - if VORTEXINSTALL=1"
			echo "VORTEXVERSION=\"$VORTEXVERSION\""
			echo "## the Vortex download url"
			echo "VORTEXURL=\"$VORTEXURL\""
			echo "## comma-seperated list of Vortex Stages directories, one per partition on which you have steam games"
			echo "VORTEXSTAGES=\"$VORTEXSTAGES\""
			echo "## set to 1 if you don't want stl to try to auto set/create VORTEXSTAGE directories in /mount/point/Vortex or mount/point/pathto/SteamLibrary/Vortex"
			echo "DISABLE_AUTOSTAGES=\"$DISABLE_AUTOSTAGES\""
			echo "## for broken Script Extender (see Proton issue #170):"
			echo "## skip check for patched proton:"
			echo "SKIPCHECKPATCHEDPROTON=\"$SKIPCHECKPATCHEDPROTON\""
			echo "## URL of a SE-patched proton build:"
			echo "PROTOLAURL=\"$PROTOLAURL\""
			echo "## The version of the patched proton build:"
			echo "PROTOLAVER=\"$PROTOLAVER\""
			echo "## the path where the patched proton should be stored"
			echo "PROTOLADLDIR=\"$PROTOLADLDIR\""
			echo "## Duration of the 'incompatible proton version detected requester':"
			echo "PROTOLAREQ=\"$PROTOLAREQ\""
			} >> "$1"
			#ENDsaveCfgvortex
		fi
	}

	SCFG="$(basename "${1//.conf/}")"
	"${FUNCNAME[0]}$SCFG" "$1" "$SCFG" "$2"
}

### YAD SETTINGS ###

function saveYadCfg {
	DELIM="$1"
	YADCFG="$2"
	YADCFGIN="$3"

	if [ -f "$YADCFG" ]; then

		loadCfg "$YADCFG"
		YLC=1
		YADCATLIST="/tmp/yadcatlist.txt"
		extRun sed -n "/^#STARTYAD$DELIM/,/^#ENDYAD$DELIM/p;/^#ENDYAD$DELIM/q" "$0" | grep "\-\-field" | rev | cut -d '{' -f1 | rev | sed '/LBL/c\NOVAL' | cut -d '/' -f1 > "$YADCATLIST"

		while extRun read -r YADVAL; do
			YADCAT="$(extRun sed "${YLC}q;d" "$YADCATLIST")"
			YADVALUNQ="${YADVAL//\'/}"
			WRITEYADVAL="${YADVALUNQ/# -/-}"

			if [ -n "$YADCAT" ] && [ "$YADCAT" != "NOVAL" ]; then

				if [ -z "$WRITEYADVAL" ]; then
					WRITEYADVAL="DUMMY"
				fi

				updateConfigEntry "$YADCAT" "$WRITEYADVAL" "$YADCFG"
			fi

			((YLC++))

		done < "$YADCFGIN"

		rm "$YADCATLIST" 2>/dev/null
		
		writelog "INFO" "${FUNCNAME[0]} - done with updating configfile $YADCFG"
	else
		writelog "SKIP" "${FUNCNAME[0]} - configfile $YADCFG does not exist - skipping"
	fi
}

function saveAllYadConfigs {
	saveYadCfg "GAME" 		"$STLGAMECFG" 		"$cfg1"
	saveYadCfg "TEMPLATE" 	"$STLDEFGAMECFG" 	"$cfg2"
	saveYadCfg "GLOBAL" 	"$STLDEFGLOBALCFG" 	"$cfg3"
	saveYadCfg "RESHADE" 	"$STLRESHADECFG" 	"$cfg4"
	saveYadCfg "VORTEX" 	"$STLVORTEXCFG" 	"$cfg5"
}

function updateEditor {
	CFG="$1"
	XDGO="xdg-open"

	loadCfg "$CFG" X
	if grep -q "$XDGO" <<< "$STLEDITOR" || [ ! -f "$STLEDITOR" ] ; then
		writelog "WARN" "${FUNCNAME[0]} - '$XDGO' selected as editor or configured editor not found - trying to find an installed editor installed"
		XDGED="$(command -v "$(xdg-mime query default text/plain | cut -d '.' -f1)" 2>/dev/null)"
		if [ -x "$XDGED" ]; then
			writelog "INFO" "${FUNCNAME[0]} - xdg-mime points to '$XDGED', which also exists"
			FOUNDEDITOR="$XDGED"
		elif  [ -x "$(command -v "$(which geany)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$(which geany)"
		elif  [ -x "$(command -v "$(which gedit)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$(which gedit)"
		elif  [ -x "$(command -v "$(which leafpad)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$(which leafpad)"
		elif  [ -x "$(command -v "$(which kwrite)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$(which kwrite)"
		else
			writelog "SKIP" "${FUNCNAME[0]} - no valid editor found - leaving '$XDGO'"
		fi

		if [ -n "$FOUNDEDITOR" ]; then
			writelog "INFO" "${FUNCNAME[0]} -changing STLEDITOR to '$FOUNDEDITOR' in '$CFG'"
			updateConfigEntry "STLEDITOR" "$FOUNDEDITOR" "$CFG"
			loadCfg "$CFG"
		fi
	fi
}

function EditorDialog {

	# load gameconfig, as it might want PROTONDB here
	loadCfg "$STLGAMECFG"

	unset CfgFiles
	while read -r cfgfile; do
		if [ -f "${!cfgfile}" ]; then
			CfgFiles+=("${!cfgfile}")
		fi
	done <<< "$(sed -n "/^#STARTEDITORCFGLIST/,/^#ENDEDITORCFGLIST/p;/^#ENDEDITORCFGLIST/q" "$0" | grep -v "^#" | cut -d '=' -f1)"
	writelog "INFO" "${FUNCNAME[0]} - found ${#CfgFiles[@]} available Config Files - opening Checklist"

	IFS=" " read -r -a EDFILES <<< "$(for f in $(printf '%s\n' "${CfgFiles[@]}"); do echo FALSE ; echo "$f" ; done | \
	"$YAD" --window-icon=gtk-yes --borders=30 --center --undecorated --list --checklist --column=Edit --column=ConfigFile --separator=" " --print-column="2" \
	--text="<span font_weight='bold'>Select Config Files for manual Editing</span>" \
	--width=800 --height=400 | tr '\n' ' ')"
	if [ -n "${EDFILES[0]}" ]; then
		if [ "$PROTONDB" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - PROTONDB is set to 1 - also opening the protondb url in the browser"
			if [ -x "$(command -v "$BROWSER" 2>/dev/null)" ]; then
				# if we open a new BROWSER instance here, we're going to kill it when the game launches, else the game won't "exit" in steam 
				if pgrep -f "$BROWSER" ; then
					KILLBROWSER=0
				else
					KILLBROWSER=1
				fi
				"$BROWSER" "$PDBURL/$AID" & 
			fi
		fi

		writelog "INFO" "${FUNCNAME[0]} - opening Editor '$STLEDITOR' with selected Config Files"
		"$STLEDITOR" "${EDFILES[@]}"

		# kill browser if it was opened with the editor:
		if [ -n "$KILLBROWSER" ];then
			if [ "$KILLBROWSER" -eq 1 ]; then
				pkill -f "$BROWSER"
			fi
		fi
		writelog "INFO" "${FUNCNAME[0]} - Editor closed - Going back to the Main Settings"
		openSettings
	else
		writelog "INFO" "${FUNCNAME[0]} - no Config Files were selected - Going back to the Main Settings"
		openSettings
	fi
}

function cleanYadFiles {
	# kill "$YADTRAYPID" 2>/dev/null
	kill "$YADPID1" "$YADPID2" "$YADPID3" "$YADPID4" "$YADPID5" 2>/dev/null
	rm -f "$cfg1" "$cfg2" "$cfg3" "$cfg4" "$cfg5"
	unset "cfg1" "cfg2" "cfg3" "cfg4" "cfg5"
}


#STARTYADGAME
#STARTYADTEMPLATE
function openGameMenu {
	CFG="$1"
	TABNR="$2"
	TEXT="$3"
	cfgX="$4"
	loadCfg "$CFG"

	"$YAD" --plug="$YADKEY" --tabnum="$TABNR" --borders=34 --window-icon=gtk-yes --form --fixed --center --undecorated \
	--separator="\n" \
	--quoted-output \
	--columns="3" \
	--width="$STLSETWIDTH" \
	--height="$STLSETHEIGHT" \
	--text="<span font_weight='bold'>$TEXT</span>" \
	--field="     Game Conqueror!Enable GameConqueror for his game":CHK "${RUN_GAMCON/#-/ -}" \
	--field="     Game Conqueror wait Exe !The Alternative executable GameConqueror should open instead of the regular game exe - the default 'echo' is just a placeholder and will be ignored":FL "${GAMCONWAITEXE/#-/ -}" \
	--field="     GameMode!Enable GameMode for this game":CHK "${USEGAMEMODERUN/#-/ -}" \
	--field="     GameScope!Enable GameScope for his game":CHK "${USEGAMESCOPE/#-/ -}" \
	--field="     GameScope arguments!The command line arguments for GameScope for this game" "${GAMESCOPE_ARGS/#-/ -}" \
	--field="     Nyrna!Enable Nyrna for this game":CHK "${RUN_NYRNA/#-/ -}" \
	--field="     MangoHud!Enable MangoHud for this game":CHK "${MANGOHUD/#-/ -}" \
	--field="     ReplaySorcery!Enable ReplaySorcery for this game":CHK "${RUN_REPLAY/#-/ -}" \
	--field="     Vortex!If and how Vortex should be used - disabled,normal,quickstart (no checks),editormode (no checks, don't start the game afterwards)":CB "${VORTEXMODE/#-/ -}!disabled!normal!quickstart!editormode" \
	--field="":LBL "" \
	--field="     Boxtron!Start the game using Boxtron":CHK "${USEBOXTRON/#-/ -}" \
	--field="     Roberta!Start the game using Roberta":CHK "${USEROBERTA/#-/ -}" \
	--field="     Luxtorpeda!Start the game using Luxtorpeda":CHK "${USELUXTORPEDA/#-/ -}" \
	--field="":LBL "" \
	--field="     Winetricks!Start winetricks gui before the game starts":CHK "${RUN_WINETRICKS/#-/ -}" \
	--field="     Winetricks packages!List of packages to install silently using winetricks" "${WINETRICKSPAKS/#-/ -}" \
	--field="     Winecfg!Start winecfg before the game starts":CHK "${RUN_WINECFG/#-/ -}" \
	--field="     Regedit!Allow Registry changes for this game":CHK "${REGEDIT/#-/ -}" \
	--field="     Virtual Desktop!Start the game in Virtual Desktop mode":CHK "${VIRTUALDESKTOP/#-/ -}" \
	--field="":LBL "" \
	--field="     Run custom command!Start Custom command. If set to 1 and CUSTOMCMD is empty the chosen exe will be saved, if set to 2 and CUSTOMCMD is empty the chosen exe won't be saved":CB "${RUN_CUSTOMCMD/#-/ -}!0!1!2" \
	--field="     Custom command!The custom command to start - the default 'echo' is just a placeholder and will be ignored":FL "${CUSTOMCMD/#-/ -}" \
	--field="     Custom command arguments!The command line arguments used for the custom command" "${CUSTOMCMD_ARGS/#-/ -}" \
	--field="     Only Custom command!Only start the custom command and skip the regular game executable":CHK "${ONLY_CUSTOMCMD/#-/ -}" \
	--field="     Fork Custom command!Fork the custom command into the background and continue starting with the regular game executable":CHK "${FORK_CUSTOMCMD/#-/ -}" \
	--field="":LBL "" \
	--field="     ReShade Install!Install ReShade":CHK "${INSTALL_RESHADE/#-/ -}" \
	--field="     Depth3D ReShade!Use the Depth3D Shader with ReShade":CHK "${RESHADE_DEPTH3D/#-/ -}" \
	--field="     ReShade enable!use ReShade for this game":CHK "${USERESHADE/#-/ -}" \
	--field="     vkBasalt!Enable vkBasalt for this game":CHK "${ENABLE_VKBASALT/#-/ -}" \
	--field="     Stereo3D VR!Start this game in VR in Side-by-Side Stereo3D mode":CHK "${RUNSBSVR/#-/ -}" \
	--field="     Stereo3D VR ReShade!Start this game in VR in Side-by-Side Stereo3D mode using Depth3D with ReShade":CHK "${SBSVRRS/#-/ -}" \
	--field="     Stereo3D VR vkBasalt!Start this game in VR in Side-by-Side Stereo3D mode using Depth3D with vkBasalt":CHK "${SBSVRVK/#-/ -}" \
	--field="     VR player arguments!The command line arguments for the Side-by-Side Stereo3D VR player for this game" "${VRVIDEOPLAYERARGS/#-/ -}" \
	--field="     VR player Zoom Level!The zoom level for the VR player for this game" "${SBSZOOM/#-/ -}" \
	--field="     VR Game Window!The window name for this game" "${VRGAMEWINDOW/#-/ -}" \
	--field="":LBL "" \
	--field="     Change Pulseaudio latency!Allow changing the Pulseaudio latency":CHK "${CHANGE_PULSE_LATENCY/#-/ -}" \
	--field="     Pulseaudio latency!The Pulseaudio latency in milliseconds":NUM "${STL_PULSE_LATENCY_MSEC/#-/ -}" \
	--field="     DXVK HUD!Accepts comma-separated options like devinfo,fps,frametimes,submissions,drawcalls,pipelines,memory,gpuload,version,api,compiler,samplers,full,1" "${DXVK_HUD/#-/ -}" \
	--field="     DXVK Log Level! Controls dxvk message logging":CB "${DXVK_LOG_LEVEL/#-/ -}!none!error!warn!info!debug" \
	--field="     Wine Integer Scaling!Enable wine fullscreen integer scaling for this game":CHK "${WINE_FULLSCREEN_INTEGER_SCALING/#-/ -}" \
	--field="     Proton Log!Convenience method for dumping a useful debug log to $HOME/steam-$APPID.log":CHK "${PROTON_LOG/#-/ -}" \
	--field="     Proton Use Wine3D!Use OpenGL-based wined3d instead of Vulkan-based DXVK for d3d11, d3d10, and d3d9":CHK "${PROTON_USE_WINED3D/#-/ -}" \
	--field="     Proton No d3d11!Disable d3d11.dll, for d3d11 games which can fall back to and run better with d3d9":CHK "${PROTON_NO_D3D11/#-/ -}" \
	--field="     Proton No d3d10!Disable d3d10.dll and dxgi.dll, for d3d10 games which can fall back to and run better with d3d9":CHK "${PROTON_NO_D3D10/#-/ -}" \
	--field="     Proton No ESYNC!Do not use eventfd-based in-process synchronization primitives":CHK "${PROTON_NO_ESYNC/#-/ -}" \
	--field="     Proton No FSYNC!Do not use futex-based in-process synchronization primitives":CHK "${PROTON_NO_FSYNC/#-/ -}" \
	--field="     Proton Force Large Adress Aware!Force Wine to enable the LARGE_ADDRESS_AWARE flag for all executables":CHK "${PROTON_FORCE_LARGE_ADDRESS_AWARE/#-/ -}" \
	--field="     Proton Dump Debug Commands!Write some useful debug scripts for the game into $PROTON_DEBUG_DIR/proton_$USER/":CHK "${PROTON_DUMP_DEBUG_COMMANDS/#-/ -}" \
	--field="     Proton Debug Dir!Root directory for the Proton debug scripts":DIR "${PROTON_DEBUG_DIR/#-/ -}" \
	--field="":LBL "" \
	--field="     AutoTweak Editor Timeout!The AutoTweak Editor will open after X Seconds automatically. If set to 0 the AutoTweak is loaded automatically":NUM "${ATVALIDATE/#-/ -}" \
	--field="     Ignore AutoTweaks!Ignore AutoTweaks for this game":CHK "${IGNOREAUTOTWEAKS/#-/ -}" \
	--field="     Adopt AutoTweak Config!Ask to adopt the used autotweak after game exit as regular tweak file":CHK "${ATADOPT/#-/ -}" \
	--field="":LBL "" \
	--field="     Toggle Windows!Minimize all visible windows on game start and restore them when game ends":CHK "${TOGGLEWINDOWS/#-/ -}" \
	--field="     Game command arguments!The command line arguments used for the Game" "${GAMEARGS/#-/ -}" \
	--field="":LBL "" \
	--field="     Strace!Enable strace for this game":CHK "${STRACERUN/#-/ -}" \
	--field="     Strace arguments!The command line arguments for strace for this game" "${STRACEOPTS/#-/ -}" \
	--field="     NetMon!Enable network monitoring for this game":CHK "${USENETMON/#-/ -}" \
	--field="":LBL "" \
	--field="     User Start command!Custom User script which is started when game starts - the default 'echo' is just a placeholder and will be ignored":FL "${USERSTART/#-/ -}" \
	--field="     User Stop command!Custom User script which is started when game ends - the default 'echo' is just a placeholder and will be ignored":FL "${USERSTOP/#-/ -}" \
	--field="     Requester wait!Wait n seconds until the Settings Requester disappears":NUM "${WAITEDITOR/#-/ -}" \
	--field="     ProtonDB open!When opening the editor open the ProtonDB Url for the game as well":CHK "${PROTONDB/#-/ -}" \
	> "$cfgX" &
}
#ENDYADTEMPLATE
#ENDYADGAME


function openSettings {

	writelog "INFO" "${FUNCNAME[0]} - opening Settings"

	YADKEY="31337"
	cfg1=$(mktemp --tmpdir cfg1.XXXXXXXX)
	cfg2=$(mktemp --tmpdir cfg2.XXXXXXXX)
	cfg3=$(mktemp --tmpdir cfg3.XXXXXXXX)
	cfg4=$(mktemp --tmpdir cfg4.XXXXXXXX)
	cfg5=$(mktemp --tmpdir cfg5.XXXXXXXX)

	if [ -n "$1" ]; then
		if [ "$1" == "last" ] && [ -f "$LASTRUN" ]; then
			PREVAID="$(grep "^PREVAID" "$LASTRUN" | cut -d '=' -f2)"
			if [ -n "$PREVAID" ]; then
				AID="${PREVAID//\"}"
				if [ -n "$PREVGAME" ]; then
					GN="$PREVGAME"
				fi
			else
				AID="$YADKEY"
			fi
		else
			AID="$1"
		fi

		STLGAMECFG="$STLGAMEDIR/${AID}.conf"
		TWEAKCFG="$USERTWEAKDIR/${AID}.conf"
		SBSTWEAKCFG="$SBSTWEAKDIR/${AID}.conf"
	fi

	# create a dummy game config if AID is empty:
	if [ "$AID" == "$PROGCMD" ]; then
		AID="$YADKEY"
		STLGAMECFG="$STLGAMEDIR/${AID}.conf"
		TWEAKCFG="$USERTWEAKDIR/${AID}.conf"
		SBSTWEAKCFG="$SBSTWEAKDIR/${AID}.conf"
	fi

	if [ ! -f "$STLGAMECFG" ]; then
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "#########"
		echo "#$PROGNAME $PROGVERS"
		echo "#########"
		getCfgHeader
		echo "## set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR"
		echo "#STLDXVKCFG=\"$STLDXVKDIR/$AID.conf\""
		echo "## vkbasalt config file:"
		echo "VKBASALT_CONFIG_FILE=\"$STLCFGDIR/vkBasalt.conf\""
		grep -v "config Version" "$STLDEFGAMECFG"
		} >> "$STLGAMECFG"
	fi

	if [ -z "$GN" ]; then
		GN="$(grep "^#GAMENAME" "$STLGAMECFG" | cut -d'=' -f2)"
	fi

	# load  global config for gui size and optional gtk css style:
	loadCfg "$STLDEFGLOBALCFG"
	checkSTLCSS X

	# TrayIcon Menu # maybe later
#	"$YAD" --image="/dev/shm/stl-steam-checked.png" --notification --item-separator="," --menu="Vortex,startVortex|damn,no internal functions |only external programs,thunar" --tooltip="stl menu" &
#	YADTRAYPID="$!"

	# The Tab for the current game is almost identical to the Default Game Template Tab, so using a generic function here to avoid redundant code:
	openGameMenu "$STLGAMECFG" "1" "Settings for Game $GN ($AID)" "$cfg1"
	YADPID1="$!"

	openGameMenu "$STLDEFGAMECFG" "2" "Default Game Settings Template" "$cfg2"
	YADPID2="$!"

# adding space before every variable starting with "-" for yad.
# The variables need to be refered one per line as else YADCATLIST in saveYadCfg would not work if with doubledash at the end

#STARTYADGLOBAL
	loadCfg "$STLDEFGLOBALCFG"

	"$YAD" --plug="$YADKEY" --tabnum=3 --borders=34 --window-icon=gtk-yes --form --fixed --center --undecorated \
	--separator="\n" \
	--quoted-output \
	--columns="3" \
	--width="$STLSETWIDTH" \
	--height="$STLSETHEIGHT" \
	--text="<span font_weight='bold'>Global Settings</span>" \
	--field="     Clone ${PROGNAME}!Pull '$PROGCMD' from '$PROJECTPAGE' in '$STLCFGDIR' and use its config files (only used if global configs are not installed)":CHK "${DLGLOBAL/#-/ -}" \
	--field="     Enable $PROGCMD Steam theme!Use the $PROGNAME Steam GTK css '${PROGCMD}-steam'":CHK "${USESTLCSS/#-/ -}" \
	--field="     Update $PROGCMD Steam theme!Updates the $PROGNAME Steam GTK css '${PROGCMD}-steam'":CHK "${CSSUPDATE/#-/ -}" \
	--field="":LBL "" \
	--field="     Boxtron command!The Boxtron executable":FL "${BOXTRONCMD/#-/ -}" \
	--field="     Boxtron arguments!The command line arguments used for boxtron" "${BOXTRONARGS/#-/ -}" \
	--field="     Roberta command!The Roberta executable":FL "${ROBERTACMD/#-/ -}" \
	--field="     Roberta arguments!The command line arguments used for roberta" "${ROBERTAARGS/#-/ -}" \
	--field="     Luxtorpeda command!The Luxtorpeda executable":FL "${LUXTORPEDACMD/#-/ -}" \
	--field="     Luxtorpeda arguments!The command line arguments used for luxtorpeda" "${LUXTORPEDAARGS/#-/ -}" \
	--field="     GameConqueror command!The GameConqueror executable":FL "${GAMCON/#-/ -}" \
	--field="":LBL "" \
	--field="     Side-by-Side Stereo3D VR player command!The Side-by-Side Stereo3D VR player executable":FL "${VRVIDEOPLAYER/#-/ -}" \
	--field="     Clone Depth3D git URL!Allow pulling a copy of Depth3D if required":CHK "${CLONE_DEPTH3D/#-/ -}" \
	--field="     Depth3D git URL!The git repository of the Depth3D shader" "${DEPTH3DURL/#-/ -}" \
	--field="     Depth3D Download dir!The download directory for the Depth3D shader":DIR "${DEPTH3DSRCDIR/#-/ -}" \
	--field="":LBL "" \
	--field="     NetMon command!The command used for network monitoring":FL "${NETMON/#-/ -}" \
	--field="     NetMon log path!The path where netmon logs are stored":DIR "${NETMONDIR/#-/ -}" \
	--field="     NetMon arguments!The command line arguments used for netmon" "${NETOPTS/#-/ -}" \
	--field="":LBL "" \
	--field="     Global registry file path!Path where global registry files are stored":DIR "${GLOBALREGDIR/#-/ -}" \
	--field="     Global tweak file path!Path where global tweak files are stored generally":DIR "${GLOBALTWEAKDIR/#-/ -}" \
	--field="     Global SBS tweak file path!Path where global Side-by-Side tweak files are stored":DIR "${GLOBALSBSTWEAKDIR/#-/ -}" \
	--field="     Global user tweak file path!Path where global user tweak files are stored":DIR "${GLOBALUSERTWEAKDIR/#-/ -}" \
	--field="     Global tweak command path!Path where global user tweak commands are stored":DIR "${GLOBALTWEAKCMDDIR/#-/ -}" \
	--field="     Global Steam Category path!Path where global Steam Category files are stored":DIR "${GLOBALCATEGORYDIR/#-/ -}" \
	--field="     Global Misc path!Path where global Misc files are stored":DIR "${GLOBALMISCDIR/#-/ -}" \
	--field="     Strace log path!The path where strace logs are stored":DIR "${STRACEDIR/#-/ -}" \
	--field="     $PROGNAME logfile path!The path where the $PROGNAME logs are stored":DIR "${LOGDIR/#-/ -}" \
	--field="     Log Level!The Log Level of the logfiles (0 none, 1:less, 2:all)":CB "${LOGLEVEL/#-/ -}!0!1!2" \
	--field="":LBL "" \
	--field="     Create Tweaks!Create Tweak Templates with the Game Header to make creating Tweaks a bit easier":CHK "${CREATETWEAKS/#-/ -}" \
	--field="     AutoTweak Editor Timeout!When a AutoTweak is found the AutoTweak Editor will open after X Seconds automatically. If set to 0 the AutoTweak is loaded automatically":NUM "${ATVALIDATE/#-/ -}" \
	--field="     AutoTweaks!All platforms listed here will be used to import autotweaks from" "${AUTOTWEAKS/#-/ -}" \
	--field="":LBL "" \
	--field="     Enable Notifier!Used notifier when found":CHK "${USENOTIFIER/#-/ -}" \
	--field="     Notifier command!The command used for the notifier":FL "${NOTY/#-/ -}" \
	--field="":LBL "" \
	--field="     Editor command!The Text Editor used for editing config files manually":FL "${STLEDITOR/#-/ -}" \
	--field="     Requester wait!Wait n seconds until the Settings Requester disappears":NUM "${WAITEDITOR/#-/ -}" \
	--field="     Max Ask!Give up asking if the Settings shall be opened per game after n rejected requesters":NUM "${MAXASK/#-/ -}" \
	--field="     Browser command!The Web Browser used to optionally open Urls":FL "${BROWSER/#-/ -}" \
	--field="     ProtonDB Url!The Url opened when PROTONDB is used" "${PDBURL/#-/ -}" \
	--field="":LBL "" \
	--field="     Global Settings Window width!The Width of the Settings window":NUM "${STLSETWIDTH/#-/ -}" \
	--field="     Global Settings Window height!The Height of the Settings window":NUM "${STLSETHEIGHT/#-/ -}" \
	> "$cfg3" &
	YADPID3="$!"

#ENDYADGLOBAL

#STARTYADRESHADE
	loadCfg "$STLRESHADECFG"

	"$YAD" --plug="$YADKEY" --tabnum=4 --borders=34 --window-icon=gtk-yes --form --fixed --center --undecorated \
	--separator="\n" \
	--quoted-output \
	--width="$STLSETWIDTH" \
	--height="$STLSETHEIGHT" \
	--text="<span font_weight='bold'>ReShade Settings</span>" \
	--field="":LBL "" \
	--field="     ReShade Download!allow download of ReShade sourcefiles":CHK "${DOWNLOAD_RESHADE/#-/ -}" \
	--field="     ReShade directory!The directory where ReShade components are stored and loaded":DIR "${RESHADESRCDIR/#-/ -}" \
	--field="     ReShade Setup Url!The Url from where the ReShade Setup is downloaded" "${RSSETUP/#-/ -}" \
	--field="     64bit ReShade dll!The filename of the 64bit ReShade dll" "${RS_64/#-/ -}" \
	--field="     32bit ReShade dll!The filename of the 32bit ReShade dll" "${RS_32/#-/ -}" \
	--field="     64bit d3dcompiler_47 Url!The Url from where the 64bit d3dcompiler_47.dll is downloaded" "${DL_D3D47_64/#-/ -}" \
	--field="     64bit d3dcompiler_47 name!The filename of the 64bit d3dcompiler_47.dll" "${RS_D3D47_64/#-/ -}" \
	--field="     32bit d3dcompiler_47 Url!The Url from where the 32bit d3dcompiler_47.dll is downloaded" "${DL_D3D47_32/#-/ -}" \
	--field="     32bit d3dcompiler_47 name!The filename of the 32bit d3dcompiler_47.dll" "${RS_D3D47_32/#-/ -}" \
	--field="":LBL "" > "$cfg4" &
	YADPID4="$!"
#ENDYADRESHADE

#STARTYADVORTEX
	loadCfg "$STLVORTEXCFG"

	"$YAD" --plug="$YADKEY" --tabnum=5 --borders=34 --window-icon=gtk-yes --form --fixed --center --undecorated \
	--separator="\n" \
	--quoted-output \
	--width="$STLSETWIDTH" \
	--height="$STLSETHEIGHT" \
	--text="<span font_weight='bold'>Vortex Settings</span>" \
	--field="":LBL "" \
	--field="     Allow Vortex Installation!Download and install Vortex automatically if required":CHK "${VORTEXINSTALL/#-/ -}" \
	--field="     Vortex wine!The wine binary uses for Vortex":FL "${VORTEXWINE/#-/ -}" \
	--field="     Vortex WINEPREFIX!The WINEPREFIX for the Vortex installation":DIR "${VORTEXPREFIX/#-/ -}" \
	--field="     Vortex WINEDEBUG!The WINEDEBUG settings for Vortex" "${VORTEXWINEDEBUG/#-/ -}" \
	--field="     Vortex dxvk Log Level!The dxvk Log Level for Vortex":CB "${VORTEX_DXVK_LOG_LEVEL/#-/ -}!none!error!warn!info!debug" \
	--field="     Vortex dxvk Log Path!The dxvk Log Path for Vortex - 'none' for stdout" "${VORTEX_DXVK_LOG_PATH/#-/ -}" \
	--field="     Vortex setup download directory!The directory where the Vortex Installer is downloaded":DIR "${VORTEXDOWNLOADPATH/#-/ -}" \
	--field="     Vortex Version!The Version of the Vortex Installer to be used/downloaded" "${VORTEXVERSION/#-/ -}" \
	--field="     Vortex Url!The Webpage where Vortex can be downloaded" "${VORTEXURL/#-/ -}" \
	--field="     Vortex Stages! List of directories one per SteamLibrary partition where Vortex stores its 'stage directories' - autodetected when 'Disable Autostages' is not checked" "${VORTEXSTAGES/#-/ -}" \
	--field="     Disable Autostages!When checked, $PROGNAME won't autocreate Vortex 'stage' directories and they have to be set manually in VORTEXSTAGES":CHK "${DISABLE_AUTOSTAGES/#-/ -}" \
	--field="":LBL "" \
	--field="     <span font_weight='bold'>Proton for Script Extender:</span>":LBL "" \
	--field="":LBL "" \
	--field="     Skip Check for Patched Proton!Skips the Check for patched Proton when a SE exe was found - you're on your own if it doesn't work":CHK "${SKIPCHECKPATCHEDPROTON/#-/ -}" \
	--field="     Patched Proton URL!The Webpage where the patched proton can be downloaded" "${PROTOLAURL/#-/ -}" \
	--field="     Patched Proton Version!The Version of the patched proton to be used/downloaded" "${PROTOLAVER/#-/ -}" \
	--field="     Patched Proton download directory!The directory where the the patched proton is downloaded":DIR "${PROTOLADLDIR/#-/ -}" \
	--field="     Patched Proton Requester wait!Duration of the 'incompatible proton version detected requester'":NUM "${PROTOLAREQ/#-/ -}" \
	--field="":LBL "" > "$cfg5" &
	YADPID5="$!"
#ENDYADVORTEX

	"$YAD" --notebook --key="$YADKEY" --borders=8 --window-icon=gtk-yes --fixed --center --undecorated \
	--tab="GAME SETTINGS" --tab="DEFAULT SETTINGS" --tab="GLOBAL SETTINGS" --tab="RESHADE SETTINGS" --tab="VORTEX SETTINGS" \
    --title="Interface settings" \
	--width="$STLSETWIDTH" \
	--height="$STLSETHEIGHT" \
    --text="${PROGNAME} (${PROGCMD}) - ${PROGVERS} Settings" \
	--button="EXIT":5 \
	--button="EDITOR MENU":1 \
	--button="RELOAD":2 \
	--button="SAVE/RELOAD":4 \
	--button="SAVE/EXIT":0
	case $? in
		5) echo "exiting GUI"
			writelog "INFO" "${FUNCNAME[0]} - exiting GUI"
		;;
		1) echo "exiting GUI and opening EditorDialog"
			writelog "INFO" "${FUNCNAME[0]} - exiting GUI and opening EditorDialog"
			EditorDialog
		;;
		2) echo "Reload Configs and restart Settings GUI"
			writelog "INFO" "${FUNCNAME[0]} - Reload Configs and restart Settings GUI"
			cleanYadFiles
			"${FUNCNAME[0]}"
		;;
		4) echo "Saving and Reloading Config"
			writelog "INFO" "${FUNCNAME[0]} - start saveAllYadConfigs"
			saveAllYadConfigs
			writelog "INFO" "${FUNCNAME[0]} - stop saveAllYadConfigs"
			cleanYadFiles
			"${FUNCNAME[0]}"
		;;
		0) echo "Saving Config"
			writelog "INFO" "${FUNCNAME[0]} - start saveAllYadConfigs"
			saveAllYadConfigs
			writelog "INFO" "${FUNCNAME[0]} - stop saveAllYadConfigs"
		;;
	esac

# when setting above '5' to '4' and the '4' to '3' (so not leaving out '3') the SAVE/RELOAD function doesn't save!? wtf?

	writelog "INFO" "${FUNCNAME[0]} - cleaning YadFiles"
	cleanYadFiles
	writelog "INFO" "${FUNCNAME[0]} - cleaned YadFiles"

}

### YAD SETTINGS END ###

function USEDLGLOBAL {
	if	[ "$DLGLOBAL" -eq 0 ]; then
		writelog "INFO" "${FUNCNAME[0]} - DLGLOBAL is disabled in the config"
		echo "$DLGLOBAL"
	elif [ "$DLGLOBAL" -eq 1 ] && [ -d "$SYSTEMSTLCFGDIR" ]; then
		writelog "INFO" "${FUNCNAME[0]} - DLGLOBAL is disabled because '$SYSTEMSTLCFGDIR' exists"
		echo 0
	else
		writelog "INFO" "${FUNCNAME[0]} - DLGLOBAL is enabled - using '$GLDLSTLDIR' as global directory"
		echo "$DLGLOBAL"
	fi
}

function howto {
	echo "========================="
	echo "$PROGNAME $PROGVERS"
	echo "========================="
	echo "  general usage:"
	echo "-----------------------"
	echo "  Just add this program to your steam game command line like:"
	echo "  'stl %command%'"
	echo ""
	echo "  game specific use:"
	echo "-----------------------"
	echo "  When starting a game with $PROGCMD it will check if a config file exists in $STLGAMEDIR/$SteamAppId.conf for the game"
	echo "  if it is not available it is created from the default config file (which is automatically created if not found)."
	echo "  $PROGCMD also has a global configfile $STLDEFGLOBALCFG, all settings configured in here are initialized at first and therefore are default for all games,"
	echo "  and will only be overridden, if the game specific config $STLGAMEDIR/$SteamAppId.conf has an other value"
	echo ""
	echo "  When starting the game a small requester will popup (default 2 seconds)."
	echo "  When you want to change settings for that game press space to open the game configuration and adjust it to your needs."
	echo "  The game start will wait until you're done and your changes are used on the fly."
	echo "  for more functions please check the configs and or the README - if something is not clear please file a bugreport on the projectpage $PROJECTPAGE"
	echo ""
	echo "  you can also change settings via command line with"
	echo "  'stl set ENTRY ($SteamAppId or 'all') VALUE'"
	echo "  example:"
	echo "  'stl set PROTON_DEBUG_DIR_FILE 1232570 /random/path/'"
	echo "  will set PROTON_DEBUG_DIR for the game 1232570 to /random/path/ if the game has a config file in $STLGAMEDIR"
	echo "  'stl set RUN_REPLAY all 1'"
	echo "  will enable RUN_REPLAY in all game config files found in $STLGAMEDIR"
	echo "------------------------"
	echo "  custom commands:"
	echo "------------------------"
	echo " 'stl settings (optional steamid or 'last')'"
	echo "  will open the $PROGCMD settings gui optionally with game SteamAppID or 'last' for the last SteamAppID stored in '$LASTRUN'"
	echo "------------------------"
	echo " 'stl dl git'"
	echo "  will update $PROGCMD git repo in '$GLDLSTLDIR'"
	echo "------------------------"
	echo "  'stl vortex ENTRY VALUE'"
	echo "  example:"
	echo "  'stl vortex install'"
	echo "  will install vortex"
	echo "  'stl vortex start'"
	echo "  will start vortex"
	echo "  'stl vortex getset'"
	echo "  will list vortex configuration"
	echo "------------------------"
	echo "  'stl autotweaks PLAFTORM (optional steamid)'"
	echo "  will autogenerate all tweak files for every parsible game of platform PLATFORM or just for the optional SteamAppID"
	echo "  where valid platforms are"
	echo "  $AUTOTWEAKPLATFORMS"

}

function writelog {
# LOGLEVEL=0: disable log

# LOGLEVEL=1: log only:
LOGONE="404,ERROR,SKIP,WARN,CREATE"

# LOGLEVEL=2: log also - including:
#LOGTWO="HACK,INFO,NEW,OK,UPDATE,WAIT"

	if [ -z "$LOGLEVEL" ]; then
		LOGLEVEL=2
	fi
	
	if [ "$LOGLEVEL" -eq 1 ]; then
		if grep -q "$1" <<< "$LOGONE"; then
			if [ "$AID" == "$PROGCMD" ]; then
				echo "$(date) $1 - $2"	
			fi
			echo "$(date) $1 - $2" >> "$LOGDIR/$AID.log"
		fi
	fi

	if [ "$LOGLEVEL" -eq 2 ]; then
		if [ "$AID" == "$PROGCMD" ]; then
			echo "$(date) $1 - $2"	
		fi
		echo "$(date) $1 - $2" >> "$LOGDIR/$AID.log"
	fi
}

# generic git clone/pull function
function gitUpdate {
	GITDIR="$1"
	GITURL="$2"
	if [ -d "$GITDIR/.git" ]; then
		writelog "INFO" "${FUNCNAME[0]} - pulling '$GITURL' update in '$GITDIR'"
		extRun "$GIT" --work-tree="$GITDIR" --git-dir="$GITDIR/.git" pull origin master --rebase=false
	else
		mkdir "$GITDIR" >/dev/null 2>/dev/null
		writelog "INFO" "${FUNCNAME[0]} - cloning '$GITURL' in '$GITDIR'"
		extRun "$GIT" clone "$GITURL" "$GITDIR"
	fi
}

function loadCfg {
	CFGFILE="$1"

	if [ -f "$CFGFILE" ]; then
		# disable logging here when the program just started (cosmetics)
		if [ -z "$2" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CFGFILE' START"
		fi

		while read -r line; do
			export "${line//\"/}"
		done <<< "$(grep -v "^#\|^$" "$CFGFILE")"

		# disable logging here when the program just started (cosmetics)
		if [ -z "$2" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CFGFILE' STOP"
		fi
	fi
}


if grep -q "waitforexitandrun" <<< "$@"; then
	GPROT="$(awk -F ' waitforexitandrun' '{print $1}'  <<< "$@" )"							# path to currently used proton
	GWINE="$(dirname "$GPROT")/dist/bin/wine"												# wine exe of currently used proton
	PROTONVERSION="$(awk '{print $2}' < "$(dirname "$GPROT")/version")"						# proton version
else
	if [ -f "$LASTRUN" ]; then
		loadCfg "$LASTRUN" X
	else
		GPROT="$(which proton)"
		GWINE="$(which wine)"
		PROTONVERSION="0.0"
	fi
fi

# some steamvariables need to be disabled to get start external programs correcty:
function extRun {
	LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" "$@"
}

#function extWine32Run {
#	writelog "INFO" "${FUNCNAME[0]} - started '$*' with: WINE=\"$GWINE\" WINEARCH=win32 WINEDEBUG=\"-all\" WINEPREFIX=\"$GPFX\""
#	LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" WINE="$GWINE" WINEARCH=win32 WINEDEBUG="-all" WINEPREFIX="$GPFX" "$@"
#}

function extWine64Run {
	writelog "INFO" "${FUNCNAME[0]} - Command is: LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" WINE=\"$GWINE\" WINEARCH=win64 WINEDEBUG=\"-all\" WINEPREFIX=\"$GPFX\" \"$*\""
	LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" WINE="$GWINE" WINEARCH=win64 WINEDEBUG="-all" WINEPREFIX="$GPFX" "$@"
}

function usevkBasalt {
	SBSSHADERDIR="Depth3D/Shaders"
	SBSSHADER="$SBSSHADERDIR/SuperDepth3D_VR.fx"
	if [ -n "$ENABLE_VKBASALT" ] ; then
		if [ "$ENABLE_VKBASALT" -eq 1 ] ; then
			writelog "INFO" "${FUNCNAME[0]} - vkBasalt enabled"
			if [ ! -f "$VKBASALT_CONFIG_FILE" ]; then
				writelog "INFO" "${FUNCNAME[0]} - creating default VKBASALT_CONFIG_FILE '$VKBASALT_CONFIG_FILE'"
				{
				echo "effects = reshade"
				echo "reshadeIncludePath = $STLCFGDIR/$SBSSHADERDIR"
				echo "reshade = $STLCFGDIR/$SBSSHADER"
				} >> "$VKBASALT_CONFIG_FILE"
			else
				writelog "SKIP" "${FUNCNAME[0]} - default VKBASALT_CONFIG_FILE '$VKBASALT_CONFIG_FILE' already exists"
			fi
			
			if [ ! -f "$STLCFGDIR/$SBSSHADER" ]; then
				writelog "404" "${FUNCNAME[0]} - Depth3D shader '$STLCFGDIR/$SBSSHADER' not found"
				if [ "$CLONE_DEPTH3D" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - CLONE_DEPTH3D is enabled so checking it out"
					checkReShadeDepth3D
				else
					writelog "SKIP" "${FUNCNAME[0]} - CLONE_DEPTH3D skipping the installation"
					export ENABLE_VKBASALT=0
				fi
			else
				writelog "OK" "${FUNCNAME[0]} - looks like Depth3D shader is ready at '$STLCFGDIR/$SBSSHADER'"
			fi
		fi
	fi
}

function waitForGameWindow {
	FOUNDWIN=0

	if  [ ! -x "$(command -v "$XDO" 2>/dev/null)" ] || [ ! -x "$(command -v "$XPROP" 2>/dev/null)" ] || [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ] ; then
		writelog "SKIP" "${FUNCNAME[0]} - '$XDO' and/or '$XPROP' and/or '$XWININFO' not found"

		if [ ! -x "$(command -v "$XDO" 2>/dev/null)" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - '$XDO' not found, which is at least required for this function"
		fi

		if [ ! -x "$(command -v "$XPROP" 2>/dev/null)" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - '$XPROP' not found, which is at least required for this function"
		fi

		if [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - '$XWININFO' not found, which is at least required for this function"
		fi
	else
	
		while [ "$("$XDO" search --pid "$SBSVRKGPID" | wc -l)" -eq 0 ]; do 
			writelog "WAIT" "${FUNCNAME[0]} - waiting for any window id to appear for PID '$SBSVRKGPID' - currently '$("$XDO" search --pid "$SBSVRKGPID" | wc -l)'"
			sleep 1
		done
		writelog "INFO" "${FUNCNAME[0]} - found '$("$XDO" search --pid "$SBSVRKGPID" | wc -l)' window ids of PID '$SBSVRKGPID' to analyze"	

		while read -r WINS; do

		if [ "$("$XPROP" -id "$(printf 0x%x'\n' "$WINS")" | grep "_NET_WM_STATE(ATOM)" -c)" -ge 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - found a controllable windowid"
			WSIZ=$(($("$XWININFO" -id "$WINS" -stats | awk '$1=="-geometry" {print $2}' | awk -F '+'  '{print $1}' | sed "s:x:\*:")))
			if [ "$WSIZ" -lt "307200" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - '$(printf 0x%x'\n' "$WINS")' is smaller than 640x480 - this is very likely not the game window - skipping"
			else
					writelog "INFO" "${FUNCNAME[0]} - found a big enough window with windowid '$(printf 0x%x'\n' "$WINS")'"
					writelog "INFO" "${FUNCNAME[0]} - this is probably the game window, but making another check"
					WSIZ=$(($("$XWININFO" -id "$WINS" -stats | awk '$1=="-geometry" {print $2}' | awk -F '+'  '{print $1}' | sed "s:x:\*:")))
					FOUNDWIN=1
				break
			fi
		fi
		done <<< "$("$XDO" search --pid "$SBSVRKGPID")"

		if [ "$FOUNDWIN" -eq 0 ]; then
			writelog "INFO" "${FUNCNAME[0]} - no usable game window found - trying again"
			waitForGameWindow
		else
			writelog "INFO" "${FUNCNAME[0]} - found a usable gamewindow'"
		fi
	fi
}

# exports GAMEWINDOWID - the windowid of the biggest window of $GE
function getBiggestGameWindowWID {
	if [ ! -x "$(command -v "$XDO" 2>/dev/null)" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - '$XDO' not found, which is at least required for this function"
	elif [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - '$XWININFO' not found, which is at least required for this function"
	else
		writelog "INFO" "${FUNCNAME[0]} trying to autofind game windowid for the biggest window of game exe '$GE' running with PID '$SBSVRKGPID'"

		declare -i MAXSIZ=0
		MAXWIN="0x0"
		
		waitForGameWindow
			
		while read -r WINS; do
			writelog "DEBUG" "${FUNCNAME[0]} found window id '$WINS' for PID '$SBSVRKGPID' with geometry: $("$XWININFO" -id "$WINS" -stats | awk '$1=="-geometry" {print $2}')"
			if [ "$("$XPROP" -id "$(printf 0x%x'\n' "$WINS")" | grep "_NET_WM_STATE(ATOM)" -c)" -ge 1 ]; then
				WSIZ=$(($("$XWININFO" -id "$WINS" -stats | awk '$1=="-geometry" {print $2}' | awk -F '+'  '{print $1}' | sed "s:x:\*:")))
				if [ "$WSIZ" -lt "307200" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - '$(printf 0x%x'\n' "$WINS")' is smaller than 640x480 - this is very likely not the game window - skipping"
				else
					writelog "DEBUG" "${FUNCNAME[0]} found WINS '$WINS' window ID for PID '$SBSVRKGPID' with geometry: $("$XWININFO" -id "$WINS" -stats | awk '$1=="-geometry" {print $2}') so WSIZ is '$WSIZ' and MAXSIZ currently is '$MAXSIZ'"
					if [ "$WSIZ" -gt "$MAXSIZ" ]; then
						MAXSIZ=$WSIZ	
						MAXWIN="$(printf 0x%x'\n' "$WINS")"
						writelog "DEBUG" "${FUNCNAME[0]} MAXSIZ now is '$MAXSIZ' WINS is '$WINS' and MAXWIN is '$MAXWIN'"
					fi
				fi
			else
				writelog "DEBUG" "${FUNCNAME[0]} skipping '$WINS' - doesn't look usable"
			fi

		done <<< "$("$XDO" search --pid "$SBSVRKGPID")"
		
		writelog "INFO" "${FUNCNAME[0]} found windowid $(printf 0x%x'\n' "$MAXWIN") for '$GE' running with PID '$SBSVRKGPID'"
		export GAMEWINDOWID="$MAXWIN"
	fi
}

function SBSstartSVR {
	SVRJUSTSTARTED=0
	STEAMVRARGS=(-applaunch 250820)

	writelog "INFO" "${FUNCNAME[0]} - -------- starting SBS-VR --------"

	if [ "$(pgrep "" -a | grep -v grep | grep "/vrcompositor" -c)" -eq 0 ] ; then
		writelog "INFO" "${FUNCNAME[0]} - vrcompositor not running, so starting SteamVR now:"
		if ! "$STEAM" "${STEAMVRARGS[@]}" 2>/dev/null >/dev/null ; then
			writelog "SKIP" "${FUNCNAME[0]} - starting SteamVR FAILED - skipping SBS-VR"
			export RUNSBSVR=0
		else
			writelog "OK" "${FUNCNAME[0]} - started SteamVR"
			SVRJUSTSTARTED=1
		fi
	fi

	
	if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
		writelog "INFO" "${FUNCNAME[0]} - no vrstartup process running"
	else
		if [ "$SVRJUSTSTARTED" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - SteamVR initializing"
			while true; do
				writelog "INFO" "${FUNCNAME[0]} - waiting for end of vrstartup"
				if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
					break
				fi
			done
		else
			writelog "SKIP" "${FUNCNAME[0]} - vrstartup found, but we didn't start SteamVR before! - skipping SBS-VR - just in case"
			export RUNSBSVR=0
		fi
	fi

	if [ "$SVRJUSTSTARTED" -eq 1 ]; then
		while true; do
			if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
				writelog "WAIT" "${FUNCNAME[0]} - no vrstartup instance running"
				break
			fi
			writelog "WAIT" "${FUNCNAME[0]} - waiting for end of vrstartup TIMEOUT?"
		done
	fi

	if [ "$SVRJUSTSTARTED" -eq 1 ]; then
	MAXWAIT=10
	COUNTER=0
		while ! pgrep "" -a | grep -v grep | grep "/vrcompositor" -q; do
			if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
				writelog "SKIP" "${FUNCNAME[0]} - ERROR - timeout waiting for SteamVR - exit"
				pkill -f "$VRVIDEOPLAYER"
				RUNSBSVR=0
				exit 1
			fi
			writelog "WAIT" "${FUNCNAME[0]} - sec $COUNTER/$MAXWAIT waiting for vrcompositor"
			COUNTER=$((COUNTER+1))
			sleep 1
		done
	else
		writelog "INFO" "${FUNCNAME[0]} -  we didn't start SteamVR before so no need to wait for vrcompositor"
	fi

	if pgrep "" -a | grep -v grep | grep "/vrcompositor" -q ; then
		while true; do
			if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
				writelog "WAIT" "${FUNCNAME[0]} - no vrstartup instance running - looks good"
				break
			fi
			sleep 1
			writelog "WAIT" "${FUNCNAME[0]} - waiting for end of vrstartup"
		done

		writelog "OK" "${FUNCNAME[0]} - success - SteamVR running"
		sleep 1 # better safe than sorry
		
	else
		writelog "SKIP" "${FUNCNAME[0]} - SteamVR start failed - vrcompositor still not running - skipping SBS-VR!"
		export RUNSBSVR=0
	fi
}

function getGameWindowName {
	if [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - '$XWININFO' not found, which is at least required for this function"
	else
		if [ -n "$VRGAMEWINDOW" ] && [ "$VRGAMEWINDOW" != "empty" ] ; then
			writelog "SKIP" "${FUNCNAME[0]} - already have the gamewindow name: '$VRGAMEWINDOW' - skipping"
		else
			if [ -z "$GAMEWINDOWID" ]; then
				GAMEWINDOWID="$1"
			fi

			writelog "INFO" "${FUNCNAME[0]} - the windowid used for 'AUTOVRGAMEWINDOW' is '$GAMEWINDOWID'"

			AUTOVRGAMEWINDOW="$("$XWININFO" -id "$GAMEWINDOWID" -stats | grep "$GAMEWINDOWID" | cut -d '"' -f2)"
			if [ -n "$AUTOVRGAMEWINDOW" ]; then
				if grep -q "has no name" <<< "$AUTOVRGAMEWINDOW"; then
					writelog "INFO" "${FUNCNAME[0]} - no valid window name found - contains 'has no name'"
				else
					writelog "INFO" "${FUNCNAME[0]} - autodetected gamewindow name '$AUTOVRGAMEWINDOW' from windowid '$GAMEWINDOWID' - adding it into '$SBSTWEAKCFG' for future use"
					updateConfigEntry "VRGAMEWINDOW" "\"$AUTOVRGAMEWINDOW\"" "$SBSTWEAKCFG"

					writelog "INFO" "${FUNCNAME[0]} - loading '$SBSTWEAKCFG' to load '$AUTOVRGAMEWINDOW' into VRGAMEWINDOW variable"
					loadCfg "$SBSTWEAKCFG"
				fi
			else
				writelog "INFO" "${FUNCNAME[0]} - no gamewindow name '$AUTOVRGAMEWINDOW' autodetected from windowid '$GAMEWINDOWID'"
			fi
		fi
	fi
}

function getGameWindowData {
	if [ ! -x "$(command -v "$XDO" 2>/dev/null)" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - '$XDO' not found, which is at least required for this function"
	else
		# GAMEPID is required for getBiggestGameWindow, so getting it:
		SBSgetGamePID

		getBiggestGameWindowWID

		if [ "$GAMEWINDOWID" == "0x0" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - autodetecting the windowid failed - has to be selected manually"
			GAMEWINDOWID="$(printf 0x%x'\n' "$("$XDO" selectwindow)")"
		fi

		if [ -n "$GAMEWINDOWID" ]; then
			# GAMEWINDOWID is already enough to continue, but also saving the VRGAMEWINDOW into the config to speed up future starts
			if [ "$GAMEWINDOWID" != "0x0" ]; then
				getGameWindowName "$GAMEWINDOWID"
			else
				writelog "SKIP" "${FUNCNAME[0]} - GAMEWINDOWID '$GAMEWINDOWID' is invalid - giving up!"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - could not determine the windowid of the game GAMEWINDOWID and therefore also not the VRGAMEWINDOW"
		fi
	fi
}

function getCfgHeader {
	echo "#########"
	echo "#GAMENAME=\"$GN\""
	echo "#GAMEEXE=\"$GE\""
	echo "#GAMEID=\"$AID\""
	echo "#PROTONVERSION=\"$PROTONVERSION\""
	echo "#########"	
}

function SBScheckSBScfg  {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -f "$SBSTWEAKCFG" ]; then
			writelog "INFO" "${FUNCNAME[0]} - loading SBS configfile '$SBSTWEAKCFG' to get current values"
			loadCfg "$SBSTWEAKCFG"
		else
			getCfgHeader >> "$SBSTWEAKCFG"
			writelog "INFO" "${FUNCNAME[0]} - created base config $SBSTWEAKCFG"
		fi

		if [ -n "$VRGAMEWINDOW" ] && [ "$VRGAMEWINDOW" != "empty" ] ; then
			writelog "SKIP" "${FUNCNAME[0]} - VRGAMEWINDOW '$VRGAMEWINDOW' found in config - ready"
		else
			getGameWindowData
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSgetGamePID {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -z "$SBSVRKGPID" ]; then
			writelog "INFO" "${FUNCNAME[0]} - getting the game PID"
			if [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - '$XWININFO' not found, which is at least required for this function"
			else
				while true; do
					if [ -n "$VRGAMEWINDOW" ] && [ "$VRGAMEWINDOW" != "empty" ] ; then
						GPID="$("$XWININFO" -name "${VRGAMEWINDOW//\"/}" -wm | grep "Process id:" | awk -F 'Process id: ' '{print $2}' | cut -d ' ' -f1)"
						if [ -n "$GPID" ]; then
							writelog "INFO" "${FUNCNAME[0]} - game pid '$GPID' found for VRGAMEWINDOW '$VRGAMEWINDOW'"
							export SBSVRKGPID="$GPID"
							break
						fi
					else
						waitForGamePid
						GPID="$(GAMEPID)"

						if [ -n "$GPID" ]; then
							writelog "INFO" "${FUNCNAME[0]} - game pid '$GPID' found"
							export SBSVRKGPID="$GPID"
							break
						fi
					fi
				done
			fi
			
			if [ -z "$SBSVRKGPID" ]; then
				writelog "ERROR" "${FUNCNAME[0]} - no game pid SBSVRKGPID found!"
			else
				writelog "OK" "${FUNCNAME[0]} - success - found PID '$SBSVRKGPID'"
			fi
		else
			writelog "OK" "${FUNCNAME[0]} - already have game PID '$SBSVRKGPID' - nothing to do here"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSrunVRVideoPlayer {
	
	SBSVRWINNAME="vr-video-player"

	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -z "$GAMEWINDOWID" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - GAMEWINDOWID is empty - "
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - forcefully killing game with pkill -9 '$SBSVRKGPID' - should exit this script as well"
			pkill -9 "$SBSVRKGPID"
		else
			if [ -z "$VRVIDEOPLAYERARGS" ];
			then
				writelog "SKIP" "${FUNCNAME[0]} - ERROR - no VRVIDEOPLAYERARGS '$VRVIDEOPLAYERARGS'"
			fi

			IFS=" " read -r -a RUNVRVIDEOPLAYERARGS <<< "$VRVIDEOPLAYERARGS"
			writelog "INFO" "${FUNCNAME[0]} - starting '$VRVIDEOPLAYER' with args '${RUNVRVIDEOPLAYERARGS[*]}' for windowid '$GAMEWINDOWID'"

			GWIDDEC="$(("$GAMEWINDOWID"))"
			echo "GWIDDEC=$GWIDDEC" > "$GWIDFILE"

			if [ -z "$SBSZOOM" ]; then
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" "$GAMEWINDOWID"  2>/dev/null &
			else
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" --zoom "$SBSZOOM" "$GAMEWINDOWID"  2>/dev/null &
			fi

			writelog "INFO" "${FUNCNAME[0]} - waiting for '$VRVIDEOPLAYER' window '$SBSVRWINNAME' for GAMEWINDOWID '$GAMEWINDOWID'"

			MAXWAIT=20
			COUNTER=0
			
			if [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - '$XWININFO' not found, which is at least required for this function"
			else

				while ! "$XWININFO" -name "$SBSVRWINNAME" -stats  >/dev/null 2>/dev/null; do
					if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
						writelog "SKIP" "${FUNCNAME[0]} - ERROR - timeout waiting for '$VRVIDEOPLAYER' - exit"
						pkill -f "$VRVIDEOPLAYER"
						RUNSBSVR=0
						exit 1
					fi

					if ! pgrep -f "$VRVIDEOPLAYER" ; then
						if [ "$COUNTER" -ge 3 ]; then
							writelog "SKIP" "${FUNCNAME[0]} - ERROR - '$VRVIDEOPLAYER' not running (crashed?) no need to wait for its window to appear - exit"
							RUNSBSVR=0
							exit 1
						else
							writelog "WARN" "${FUNCNAME[0]} - '$VRVIDEOPLAYER' not running yet - waiting a bit longer"
						fi
					fi

					writelog "WAIT" "${FUNCNAME[0]} - WAIT - '$COUNTER/$MAXWAIT' sec waiting for '$VRVIDEOPLAYER' window '$SBSVRWINNAME'"
					COUNTER=$((COUNTER+1))
					sleep 1
				done

				# player windowid:
				SBSVRWID=$("$XWININFO" -name "$SBSVRWINNAME" -stats | grep "^$XWININFO" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)
					
				if [ ! -x "$(command -v "$XDO" 2>/dev/null)" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - '$XDO' not found, which is at least required for this function"
				else
					if [ -n "$SBSVRWID" ]; then
					writelog "INFO" "${FUNCNAME[0]} - pressing w in '$VRVIDEOPLAYER' window '$SBSVRWINNAME' to adjust view: '$XDO windowactivate --sync $SBSVRWID key w'"
					"$XDO" windowactivate --sync "$SBSVRWID" key w

					writelog "INFO" "${FUNCNAME[0]} - activating game window with id '$GAMEWINDOWID' for input"
					"$XDO" windowactivate --sync "$GAMEWINDOWID" click 1
					else
						writelog "SKIP" "${FUNCNAME[0]} - WARN - SBSVRWID '$SBSVRWID' is empty!"
					fi
				fi
			fi
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSinitVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -x "$(command -v "$VRVIDEOPLAYER" 2>/dev/null)" ]; then

			if [ -n "$GAMEWINDOWID" ]; then
				if [ "$GAMEWINDOWID" == "0x0" ]; then
					writelog "SKIP" "${FUNCNAME[0]} GAMEWINDOWID '$GAMEWINDOWID' is invalid - skipping VR"
					RUNSBSVR=0
				else
					writelog "INFO" "${FUNCNAME[0]} already have the gamewindow id '$GAMEWINDOWID', so directly continuing!"
					SBSrunVRVideoPlayer	"$GAMEWINDOWID" 2>/dev/null &
					if [ -n "$VRGAMEWINDOW" ] && [ "$VRGAMEWINDOW" != "empty" ] ; then
						writelog "INFO" "${FUNCNAME[0]} '$VRVIDEOPLAYER' already starting, but trying to get the game window name for the config for later use"
						getGameWindowName "$GAMEWINDOWID"
					fi
				fi
			else
				if [ -n "$VRGAMEWINDOW" ] && [ "$VRGAMEWINDOW" != "empty" ] ; then
					if [ ! -x "$(command -v "$XWININFO" 2>/dev/null)" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - '$XWININFO' not found, which is at least required for this function"
					else
						GAMEWINDOWID="$("$XWININFO" -name "${VRGAMEWINDOW//\"/}" -stats | grep "^$XWININFO" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)"
						if [ -z "$GAMEWINDOWID" ]; then
							writelog "SKIP" "${FUNCNAME[0]} - ERROR - could not find windowid '$GAMEWINDOWID' for the windowname '$VRGAMEWINDOW'"
							RUNSBSVR=0
						else
							writelog "INFO" "${FUNCNAME[0]} - found windowid '$GAMEWINDOWID' for the windowname '$VRGAMEWINDOW'"
							SBSrunVRVideoPlayer	"$GAMEWINDOWID" 2>/dev/null &
						fi
					fi
				fi
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - command '$VRVIDEOPLAYER' not found - skipping"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSstopVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - waiting for game process '$SBSVRKGPID' to finish..."
		
		if [ "$(pgrep "" -a | grep -v grep | grep "/vrcompositor" -c)" -eq 0 ] ; then
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - vrcompositor not running but it should - bailing out DRYRUN"
		fi

		tail --pid="$SBSVRKGPID" -f /dev/null
		writelog "INFO" "${FUNCNAME[0]} - game process '$SBSVRKGPID' finished - closing '$VRVIDEOPLAYER'"

		if [ -f "$GWIDFILE" ]; then
			source "$GWIDFILE"
			GWIDTXT=/tmp/"$VRVIDEOPLAYER"_"$GWIDDEC"

			if [ -f "$GWIDTXT" ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$GWIDTXT' found"
				updateConfigEntry "SBSZOOM" "$(cat "$GWIDTXT")" "$SBSTWEAKCFG"
				rm "$GWIDTXT" >/dev/null 2>/dev/null
			fi
			rm "$GWIDFILE" >/dev/null 2>/dev/null
		fi

		pkill -f "$VRVIDEOPLAYER"

		writelog "OK" "${FUNCNAME[0]} - -------- finished SBS-VR --------"
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function startSBSVR {
	if [ "$RUNSBSVR" -ge 1 ]; then
		SBSstartSVR
		SBScheckSBScfg
		SBSgetGamePID
		SBSinitVRVideoPlayer
		SBSstopVRVideoPlayer
	fi
}

# start game in side-by-side VR:
function checkSBSVRLaunch {
	if [ -n "$RUNSBSVR" ]; then
		if [ "$RUNSBSVR" -ge 1 ]; then
		# override game configs with a sbs-tweak config if available:

		if [ "$(USEDLGLOBAL)" -ge 1 ]; then
			GLOBALSBSTWEAKCFG="$GLDLSBSTWEAKDIR/$AID.conf"
		else
			GLOBALSBSTWEAKCFG="$GLOBALSBSTWEAKDIR/$AID.conf"
		fi
		
		# first look for a global tweak:
			if [ -f "$GLOBALSBSTWEAKCFG" ]; then
				writelog "INFO" "${FUNCNAME[0]} - VR using overrides found in '$GLOBALSBSTWEAKCFG'"
				loadCfg "$GLOBALSBSTWEAKCFG"
			fi

		# then for a user tweak - (overriding the global one):
			if [ -f "$SBSTWEAKCFG" ]; then
				writelog "INFO" "${FUNCNAME[0]} - VR using overrides found in '$SBSTWEAKCFG'"
				loadCfg "$SBSTWEAKCFG"
			fi

		# start the whole side-by-side process:
			export VRGAMEWINDOW="$VRGAMEWINDOW"
			writelog "INFO" "${FUNCNAME[0]} - ${FUNCNAME[0]} - starting VRlaunch '$VRGAMEWINDOW' for '$AID'"
			if [ "$RUNSBSVR" -eq 1 ]; then
				startSBSVR &
			elif [ "$RUNSBSVR" -gt 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - RUNSBSVR is greater than 1 - starting SteamVR and SBS delayed for RUNSBSVR '$RUNSBSVR' seconds"
				( sleep "$RUNSBSVR"; startSBSVR) &
			else
				writelog "SKIP" "${FUNCNAME[0]} - ERROR - RUNSBSVR is '$RUNSBSVR' which is invalid - setting to 0"
				RUNSBSVR=0
			fi
		fi
	fi
}

# prepare reshade files if not found:
function prepareReshadeFiles {

	saveCfg "$STLRESHADECFG"

	loadCfg "$STLRESHADECFG"

	if [ "$DOWNLOAD_RESHADE" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - DOWNLOAD_RESHADE enabled"

		if [ -n "$RESHADESRCDIR" ]; then
			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
				writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR/$RS_D3D47_32' missing - downloading"

				if [ ! -d "$RESHADESRCDIR" ]; then
					writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR' does not exist - trying to create it" 
					mkdir -p "$RESHADESRCDIR" >/dev/null 2>/dev/null
				fi

				if [ -d "$RESHADESRCDIR" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '$RESHADESRCDIR' exist - installing ReShade in here" 
					DLDST="$RESHADESRCDIR/d3dcompiler_47.zip"
					"$WGET" "$DL_D3D47_32" -O "$DLDST"
					"$UNZIP" "$DLDST" -d "$RESHADESRCDIR"
					mv "$RESHADESRCDIR/d3dcompiler_47.dll" "$RESHADESRCDIR/$RS_D3D47_32"
				fi
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
				writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR/$RS_D3D47_64' missing - downloading" 
				"$WGET" "$DL_D3D47_64" -O "$RESHADESRCDIR/$RS_D3D47_64"
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_64" ] || [ ! -f "$RESHADESRCDIR/$RS_32" ] ; then
				writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR/$RS_64' and/or '$RS_32' missing - downloading"
				DLDST="$RESHADESRCDIR/ReShade_Setup.exe"
				"$WGET" "$RSSETUP" -O "$DLDST"
				"$UNZIP" "$DLDST" -d "$RESHADESRCDIR"
			fi
		fi
	fi
	
	# make sure Depth3D is even wanted
	if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - RESHADE_DEPTH3D enabled"

		# and then only pull/clone it when CLONE_DEPTH3D is allowed 
		checkReShadeDepth3D
	fi	
}

function checkReShadeDepth3D {
	if [ "$CLONE_DEPTH3D" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - CLONE_DEPTH3D enabled"
		mkProjDir "$DEPTH3DSRCDIR" 1
		if [ -n "$DEPTH3DSRCDIR" ]; then
				gitUpdate "$DEPTH3DSRCDIR" "$DEPTH3DURL"
		else
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - variable DEPTH3DSRCDIR is empty - skipping Depth3D update"
		fi
	fi
}

# install reshade:
function installReshade {
	if [ -n "$INSTALL_RESHADE" ]; then
		if [ "$INSTALL_RESHADE" -eq 1 ]; then

			prepareReshadeFiles

			writelog "INFO" "${FUNCNAME[0]} - INSTALL_RESHADE enabled"

			# checking for previous dll conficts between $RS_D3D47_DEST and $RS_D9_DEST
			if [ -f "$EFD/${RS_DX_DEST//.dll/.log}" ]; then
				if grep -q "Another ReShade instance was already loaded" "$EFD/${RS_DX_DEST//.dll/.log}"; then
					writelog "INFO" "${FUNCNAME[0]} - found $RS_DX_DEST conflict with $RS_D9_DEST"
					if [ -f "$EFD/$RS_D9_DEST" ]; then
						writelog "INFO" "${FUNCNAME[0]} - removing $RS_D9_DEST"
						rm "$EFD/$RS_D9_DEST"
					else
						writelog "SKIP" "${FUNCNAME[0]} - $RS_D9_DEST not found"
					fi
					
					if [ -z "$NOD3D9" ]; then
						writelog "INFO" "${FUNCNAME[0]} - blocking re-installation of '$RS_D9_DEST' by setting NOD3D9=1 in '$STLGAMECFG'"
						updateConfigEntry "NOD3D9" "1" "$STLGAMECFG"
						export NOD3D9=1
					fi
				else
					writelog "INFO" "${FUNCNAME[0]} - no conflict found in old logfile ${RS_DX_DEST//.dll/.log}"
				fi				
			else
				writelog "INFO" "${FUNCNAME[0]} - no old logfile ${RS_DX_DEST//.dll/.log} found"
			fi

			#32bit:
			if [ "$(extRun file "$GP" | grep -c "PE32 ")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing 32bit Reshade as '$GE' is 32bit" 

				if [ ! -f "$EFD/$RS_D3D47_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_D3D47_32' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_D3D47_32" "$EFD/$RS_D3D47_DEST" >/dev/null 2>/dev/null
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_D3D47_32' to '$EFD/$RS_D3D47_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$EFD/$RS_D3D47_DEST' already exists - skipping this file" 
				fi

				#dxgi:
				if [ ! -f "$EFD/$RS_DX_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_32' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_32" "$EFD/$RS_DX_DEST" >/dev/null 2>/dev/null
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_32' to '$EFD/$RS_DX_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$EFD/$RS_DX_DEST' already exists - skipping this file" 
				fi

				#d3d9:
				if [ ! -f "$EFD/$RS_D9_DEST" ]; then
					if [ -n "$NOD3D9" ] && [ "$NOD3D9" -eq 1 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - skipping installation of $RS_D9_DEST because 'NOD3D9' is enabled"
					else
						if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
							writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_32' missing - skipping this file" 
						else
							cp "$RESHADESRCDIR/$RS_32" "$EFD/$RS_D9_DEST" >/dev/null 2>/dev/null
							writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_32' to '$EFD/$RS_D9_DEST'" 
						fi
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$EFD/$RS_D9_DEST' already exists - skipping this file" 
				fi

			# 64bit:
			elif  [ "$(extRun file "$GP" | grep -c "PE32+ ")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing 64bit Reshade as '$GE' is 64bit" 

				if [ ! -f "$EFD/$RS_D3D47_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_D3D47_64' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_D3D47_64" "$EFD/$RS_D3D47_DEST" >/dev/null 2>/dev/null
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_D3D47_64' to '$EFD/$RS_D3D47_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$EFD/$RS_D3D47_DEST' already exists - skipping this file" 
				fi

				#dxgi:
				if [ ! -f "$EFD/$RS_DX_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_64' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_64" "$EFD/$RS_DX_DEST" >/dev/null 2>/dev/null
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_64' to '$EFD/$RS_DX_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$EFD/$RS_DX_DEST' already exists - skipping this file" 
				fi

				#d3d9:
				if [ ! -f "$EFD/$RS_D9_DEST" ]; then
					if [ -n "$NOD3D9" ] && [ "$NOD3D9" -eq 1 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - skipping installation of $RS_D9_DEST because 'NOD3D9' is enabled"
					else
						if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
							writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_64' missing - skipping this file" 
						else
							cp "$RESHADESRCDIR/$RS_64" "$EFD/$RS_D9_DEST" >/dev/null 2>/dev/null
							writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_64' to '$EFD/$RS_D9_DEST'" 
						fi
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$EFD/$RS_D9_DEST' already exists - skipping this file" 
				fi
			else
					writelog "SKIP" "${FUNCNAME[0]} - ERROR in ReShade installation - no file information detected from '$GP' - setting USERESHADE=0 for this session"
					export USERESHADE=0
			fi
		fi
	fi
}

function installReshadeDepth3D {
	if [ -n "$RESHADE_DEPTH3D" ]; then
		if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
			checkReShadeDepth3D

			writelog "INFO" "${FUNCNAME[0]} - copying shaders into gamedir"
			while read -r file; do
				writelog "INFO" "${FUNCNAME[0]} - CHECKING '$EFD/$(basename "$file")'"

				if [ -f "$EFD"/"$(basename "$file")" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '$EFD/$(basename "$file")' already exists - updating"
					cp "$file" "$EFD"
				else
					writelog "INFO" "${FUNCNAME[0]} - copying new file '$file' to '$EFD'"
					cp "$file" "$EFD"
				fi
			done <<< "$(find "$DEPTH3DSRCDIR/Shaders/" -maxdepth 1 -name "*.fx*")"
		fi
	fi
}

function useReshade {
	if [ -n "$USERESHADE" ]; then
		if [ "$USERESHADE" -eq 1 ]; then
			if [ ! -f "$EFD/$RS_D3D47_DEST" ]; then
				writelog "INFO" "${FUNCNAME[0]} - looks like Reshade is not yet installed in '$EFD' - installing because USERESHADE is enabled"
				INSTALL_RESHADE=1 installReshade
			fi
			writelog "INFO" "${FUNCNAME[0]} - setting WINEDLLOVERRIDES for ReShade: dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
			export WINEDLLOVERRIDES="dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
		fi
	fi	
}

function getUsedVars {
	while read -r line; do 
		if  grep -q -v "^#" <<< "$line"; then
			awk -F '=' '{print $1}' <<< "$line" 
		fi
	done <"$1"
}

function customUserScriptStart {
	if [ -n "$USERSTART" ] && [ "$USERSTART" != "$(which echo)" ]; then
		if [ -x "$USERSTART" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting custom user startscript '$USERSTART'"
			extRun "$USERSTART" "$AID" "$GP" "$GPFX" &
		else
			writelog "SKIP" "${FUNCNAME[0]} - custom user stopscript '$USERSTART' not found or not executable"
		fi
	fi
}

function customUserScriptStop {
	if [ -n "$USERSTOP" ] && [ "$USERSTART" != "$(which echo)" ]; then
		if [ -x "$USERSTOP" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting custom user stopscript '$USERSTOP'"
			extRun  "$USERSTOP" "$AID" "$GP" "$GPFX" &
		else
			writelog "SKIP" "${FUNCNAME[0]} - custom user stopscript '$USERSTOP' not found or not executable"
		fi
	fi
}

function editorSkipped {
	if [ -z "$MAXASK" ]; then
		writelog "INFO" "${FUNCNAME[0]} - maximal editor requester count MAXASK not defined - skipping"
	else
		if ! grep -q "^ASKCNT" "$STLGAMECFG"; then
			SETASKCNT=1
			updateConfigEntry "ASKCNT" "$SETASKCNT" "$STLGAMECFG"
		else

			SETASKCNT=$(($(grep "ASKCNT" "$STLGAMECFG" | cut -d '=' -f2 | sed 's/\"//g') +1))
			updateConfigEntry "ASKCNT" "$SETASKCNT" "$STLGAMECFG"
		fi

		ASKCNT="$SETASKCNT"

		if [ "$USENOTIFIER" -eq 1 ]; then
			if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
				if [ "$ASKCNT" -ge "$MAXASK" ]; then
					"$NOTY" "Canceled the Requester $MAXASK times for game '$AID'. It will be skipped from now on"
				elif [ "$ASKCNT" -lt "$MAXASK" ]; then
					"$NOTY" "Canceled the Requester $ASKCNT times for game '$AID'. It will be skipped after $((MAXASK - ASKCNT)) more times"
				fi
			fi
		fi

		if [ "$ASKCNT" -ge "$MAXASK" ]; then
			writelog "INFO" "${FUNCNAME[0]} - 'ASKCNT $ASKCNT' reached  'MAXASK $MAXASK' - disabling requester and resetting counter"
			updateConfigEntry "WAITEDITOR" "0" "$STLGAMECFG"
			updateConfigEntry "ASKCNT" "0" "$STLGAMECFG"
		fi
	fi
}

function askSettings {
	if ! grep -q "^WAITEDITOR=\"0\"" "$STLGAMECFG"; then
		# open editor requester 
		if [ "$WAITEDITOR" -gt 0 ]; then
			FOUNDTWEAKCFG=""
			if [ "$(USEDLGLOBAL)" -ge 1 ]; then
				GLOBALTWEAKCFG="$GLDLUSERTWEAKDIR/$AID.conf"
			else
				GLOBALTWEAKCFG="$GLOBALUSERTWEAKDIR/$AID.conf"
			fi
			
			if [ -f "$GLOBALTWEAKCFG" ]; then
				FOUNDTWEAKCFG="$GLOBALTWEAKCFG"
			fi

			if [ -f "$TWEAKCFG" ]; then
				FOUNDTWEAKCFG="$TWEAKCFG"
			fi

			unset CfgFiles
			while read -r cfgfile; do
				if [ -f "${!cfgfile}" ]; then
				CfgFiles+=("${!cfgfile}")
				fi
			done <<< "$(sed -n "/^#STARTEDITORCFGLIST/,/^#ENDEDITORCFGLIST/p;/^#ENDEDITORCFGLIST/q" "$0" | grep -v "^#" | cut -d '=' -f1)"

			if [ -n "$FOUNDTWEAKCFG" ]; then
				"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed --undecorated \
				--width=800 \
				--title="Open Settings?" \
				--text="<span font_weight='bold'>$GN ($AID) - Open Settings?</span>" \
				--field="<span font=\"italic\">(found ${#CfgFiles[@]} editable Config Files)</span>":LBL \
				--field="":LBL "" \
				--field="Tweakfile $FOUNDTWEAKCFG found":LBL \
				--field="<span font=\"italic\">(the game should *just work* using it)</span>":LBL \
				--button="SETTINGS":0  \
				--button="CANCEL":1  \
				--timeout="$WAITEDITOR" \
				--timeout-indicator=top
			else
				"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed -undecorated \
				--width=800 \
				--title="Open Settings?" \
				--text="<span font_weight='bold'>$GN ($AID) - Open Settings?</span>" \
				--field="<span font=\"italic\">(found ${#CfgFiles[@]} editable Config Files)</span>":LBL \
				--field="":LBL "" \
				--button="SETTINGS":0  \
				--button="CANCEL":1  \
				--timeout="$WAITEDITOR" \
				--timeout-indicator=top
			fi
			case $? in
				0)  writelog "INFO" "${FUNCNAME[0]} - Selected SETTINGS - Opening settings"
					openSettings
				;;
				1)  writelog "INFO" "${FUNCNAME[0]} - Selected CANCEL - Starting game without settings"
					editorSkipped
				;;
				70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - Starting game without settings"
				;;
			esac
		fi
	fi
}

# create project dir $1 if $2 is 1 or empty
function mkProjDir {
	if [ -n "$2" ]; then
		if [ "$2" -eq 1 ]; then
			if [ ! -d "$1" ]; then
				mkdir -p "$1" 2>/dev/null >/dev/null
			fi
		fi
	fi
}

# create project dirs
function createProjectDirs {
	mkProjDir "$STLCFGDIR" 1
	mkProjDir "$LOGDIR" 1
	mkProjDir "$STLGAMEDIR" 1
	mkProjDir "$STLCATEGORYDIR" 1
	mkProjDir "$TWEAKDIR" 1
	mkProjDir "$USERTWEAKDIR" 1
	mkProjDir "$AUTOTWEAKDIR" 1
	mkProjDir "$ATDLDIR" 1
	mkProjDir "$TWEAKCMDDIR" 1
	mkProjDir "$SBSTWEAKDIR" 1
	mkProjDir "$TWEAKTEMPLATEDIR" 1
	mkProjDir "$STLDLDIR" 1
	mkProjDir "$STLVORTEXDIR" 1
	mkProjDir "${STLVORTEXDIR}/downloads" 1
	mkProjDir "${STLVORTEXDIR}/wineprefix" 1
	mkProjDir "$RESHADESRCDIR" 1
}

# add missing config entries to configfile $1 using seperator $2:
function updateConfigFile {

	if [ -z "$1" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - expected configfile as argument 1"
	else
		CFGFILE="$1"
		SEP="$2"

		# disable logging temporarily when the program just started (cosmetics)
		if [ -n "$3" ]; then
			ORGLOGLEVEL="$LOGLEVEL"
			LOGLEVEL=0
		fi
		
		if grep -q "config Version: $PROGVERS" "$1"; then
			writelog "SKIP" "${FUNCNAME[0]} - config file '$CFGFILE' already at version '$PROGVERS'"
		else
			OLDVERS="$(grep "config Version" "$CFGFILE" | awk -F ': ' '{print $2}')"
			
			if [ -n "$OLDVERS" ]; then
				writelog "OK" "${FUNCNAME[0]} - updating '$CFGFILE' from '$OLDVERS' to '$PROGVERS'"
				sed "s/config Version: $OLDVERS/config Version: $PROGVERS/" -i "$CFGFILE"
			else
				writelog "OK" "${FUNCNAME[0]} - updating '$CFGFILE' to '$PROGVERS'"
				sed "1s/^/##########################\n/" -i "$CFGFILE"
				sed "1s/^/## config Version: $PROGVERS\n/" -i "$CFGFILE"
			fi

			while read -r RAWLINE; do

				LCAT="$(cut -d '=' -f1 <<< "$RAWLINE")"
				LVAL="$(cut -d '=' -f2 <<< "$RAWLINE")"
				if ! grep "^${LCAT}=" "$CFGFILE" >/dev/null ; then
					writelog "UPDATE" "${FUNCNAME[0]} - entry '$LCAT' is missing in '$CFGFILE' - adding it now!"
					if grep -q "\\$" <<< "$LVAL"; then
						VARNAM=${LVAL//\$/}
						OUTVAL=${!VARNAM}
					else
						OUTVAL="$LVAL"
					fi

					ADDLINE="$LCAT=\"$OUTVAL\""
					writelog "UPDATE" "${FUNCNAME[0]} - adding line '$ADDLINE'"
					echo "$ADDLINE" >> "$CFGFILE"
				fi
			done <<< "$(sed -n "/#START$SEP/,/#END$SEP/p;/#END$SEP/q" "$0" | awk -F 'echo ' '{print $2}' | grep -v "\"##" | sed '/^[[:space:]]*$/d'| sed 's/\"//g' | sed 's/=\\/=/g' | sed 's/\\$//g')"
		fi

		# re-enable logging
		if [ -n "$3" ];then
			LOGLEVEL="$ORGLOGLEVEL"
		fi
	fi
}

# create game configs:
function createGameCfg {

	if [ -f "$STLGAMECFG" ]; then
		# add missing config entries in the default global config:
		updateConfigFile "$STLGAMECFG" "saveCfgdefault_template"
	else
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "#########"
		echo "#$PROGNAME $PROGVERS"
		echo "#########"
		getCfgHeader
		echo "## set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR"
		echo "#STLDXVKCFG=\"$STLDXVKDIR/$AID.conf\""
		echo "## vkbasalt config file:"
		echo "VKBASALT_CONFIG_FILE=\"$STLCFGDIR/vkBasalt.conf\""
		grep -v "config Version" "$STLDEFGAMECFG"
		} >> "$STLGAMECFG"
	fi

	# TWEAK CONFIG TEMPLATE:
	if [ -n "$CREATETWEAKS" ]; then
		if [ "$CREATETWEAKS" -eq 1 ]; then

			# write tweak header if tweak config not found:			
			createProjectDirs
			TEMPLCFG="$TWEAKTEMPLATEDIR/$AID.conf"
			if [ ! -f "$TEMPLCFG" ] ; then
				getCfgHeader >> "$TEMPLCFG"
			fi
		fi
	fi
}

function GAMEPID {
	if	[ "$RUN_CUSTOMCMD" -ge 1 ] && [ "$ONLY_CUSTOMCMD" -eq 1 ];then
		if [ "$CUSTOMCMD" == "$LU" ]; then
			pgrep "" -a | grep -v grep | grep "$LU-wrapper" | cut -d ' ' -f1 | tail -n1
		else
			pgrep "" -a | grep -v grep | grep "$CUSTOMCMD" | cut -d ' ' -f1 | tail -n1
		fi
	else
		GAMPI="$(pgrep "" -a | grep -v grep | grep "Z:" | grep "$GE" | grep "\.exe" | grep -v "CrashHandler"  | cut -d ' ' -f1 | tail -n1)"
		echo "$GAMPI"
	fi
}

function waitForGamePid {
	while [ -z "$(GAMEPID)" ]; do 
		writelog "WAIT" "${FUNCNAME[0]} - waiting for game process $(GAMEPID)"
		sleep 1
	done
	writelog "INFO" "${FUNCNAME[0]} - game process $GE found at $(GAMEPID)"
}

# override game configs with a tweak config if available:
function checkTweakLaunch {
	if [ -z "$TWEAKCMD" ]; then
		TWEAKCMD=""
	fi

	# first try global config
	if [ "$(USEDLGLOBAL)" -ge 1 ]; then
		GLOBALTWEAKCFG="$GLDLUSERTWEAKDIR/$AID.conf"
	else
		GLOBALTWEAKCFG="$GLOBALUSERTWEAKDIR/$AID.conf"
	fi
	
	if [ -f "$GLOBALTWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - using overrides found in '$GLOBALTWEAKCFG'"
		loadCfg "$GLOBALTWEAKCFG"
	fi

	# then user config - (overriding the global one)
	if [ -f "$TWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - using overrides found in '$TWEAKCFG'"
		loadCfg "$TWEAKCFG"
	fi

	if [ -n "$TWEAKCMD" ]; then
		# tweak command defined
		if [ -f "$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD'"
			RUNTWEAK="$TWEAKCMD"
		elif [ -f "$TWEAKCMDDIR/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$TWEAKCMDDIR'"
			RUNTWEAK="$TWEAKCMDDIR/$TWEAKCMD"
		elif [ -f "$GLOBALTWEAKCMDDIR/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$GLOBALTWEAKCMDDIR'"
			RUNTWEAK="$GLOBALTWEAKCMDDIR/$TWEAKCMD"
		elif [ "$(USEDLGLOBAL)" -ge 1 ] && [ -f "$GLDLTWEAKCMDDIR/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$GLDLTWEAKCMDDIR'"
			RUNTWEAK="$GLDLTWEAKCMDDIR/$TWEAKCMD"
		elif [ -f "$GFD/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$GFD'"
			RUNTWEAK="$GFD/$TWEAKCMD"
		fi
		# tweak command found

		if [ -n "$RUNTWEAK" ]; then

			if grep -q "^TWEAKFILE" "$RUNTWEAK"; then
				# dependency for tweak command defined
				writelog "INFO" "${FUNCNAME[0]} - TWEAKFILE configured in $RUNTWEAK as dependency - checking if the file exists in gamedir - relative to the gameexe"
				TWEAKFILE="$(grep "^TWEAKFILE" "$RUNTWEAK" | awk -F 'TWEAKFILE=' '{print $2}')"
				if [ -f "$EFD/$TWEAKFILE" ]; then
					# dependency for tweak command found
					writelog "INFO" "${FUNCNAME[0]} - found tweakcmd dependency in $EFD/$TWEAKFILE - starting the tweakcmd now"
					# start tweak command
					extRun "$RUNTWEAK"
					writelog "INFO" "${FUNCNAME[0]} - $RUNTWEAK finished"
				else
					# dependency for tweak command not found
					writelog "SKIP" "${FUNCNAME[0]} - configured TWEAKFILE $TWEAKFILE not found - skipping launch of the tweakcmd $TWEAKCMD"
				fi
			else
				# start tweak command
				writelog "INFO" "${FUNCNAME[0]} - no TWEAKFILE configured in $RUNTWEAK as dependency - starting the tweakcmd regularly now"
				extRun "$RUNTWEAK"
				writelog "INFO" "${FUNCNAME[0]} - $RUNTWEAK finished"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - configured TWEAKCMD $TWEAKCMD not found - can't start it"
		fi
	fi
}

function checkSTLCSS {
	if [ "$USESTLCSS" -eq 1 ]; then

		# maybe this doesn't make any sense, but I try to leave the project as plain as possible without any bundled assets. That's why the two icons are base64 encoded:
		unchecked64="iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr+mig+qDlYQcchQnSz4xlGrUIQKoVZo1cHk0hc0aUhSXBwF14KDj8Wqg4uzrg6ugiD4AHFydFJ0kRL/lxRaxHpw3I/v7vu4+w4QKgWmWS2jgKbbZjwaEZOpVbHtFR3oQzemMCYzy5iTpBiajq97+Ph6F+ZZzc/9ObrUtMUAn0g8ywzTJt4gnt60Dc77xEGWk1Xic+IRky5I/Mh1xeM3zlmXBZ4ZNBPxeeIgsZhtYKWBWc7UiCeJQ6qmU76Q9FjlvMVZK5RY7Z78hYG0vrLMdZqDiGIRS5AgQkEJeRRgI0yrToqFOO1HmvgHXL9ELoVceTByLKAIDbLrB/+D391amYlxLykQAVpfHOdjCGjbBaplx/k+dpzqCeB/Bq70ur9YAWY+SS/XtdAR0LMNXFzXNWUPuNwB+p8M2ZRdyU9TyGSA9zP6phTQewt0rnm91fZx+gAkqKvYDXBwCAxnKXu9ybvbG3v790ytvx/W0XLPAuUPuQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QJFQ43ClGaUsgAAABASURBVEjH7dexDQAgCERRzrgrM920UjGBiRT+X9G9QIcy88RAK4baPdjWC7AvPLYxMDAwMDAwMDAwMPB9+u53Kvy2CKXoQHekAAAAAElFTkSuQmCC"
		checked64="iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr+mig+qDlYQcchQnSz4xlGrUIQKoVZo1cHk0hc0aUhSXBwF14KDj8Wqg4uzrg6ugiD4AHFydFJ0kRL/lxRaxHpw3I/v7vu4+w4QKgWmWS2jgKbbZjwaEZOpVbHtFR3oQzemMCYzy5iTpBiajq97+Ph6F+ZZzc/9ObrUtMUAn0g8ywzTJt4gnt60Dc77xEGWk1Xic+IRky5I/Mh1xeM3zlmXBZ4ZNBPxeeIgsZhtYKWBWc7UiCeJQ6qmU76Q9FjlvMVZK5RY7Z78hYG0vrLMdZqDiGIRS5AgQkEJeRRgI0yrToqFOO1HmvgHXL9ELoVceTByLKAIDbLrB/+D391amYlxLykQAVpfHOdjCGjbBaplx/k+dpzqCeB/Bq70ur9YAWY+SS/XtdAR0LMNXFzXNWUPuNwB+p8M2ZRdyU9TyGSA9zP6phTQewt0rnm91fZx+gAkqKvYDXBwCAxnKXu9ybvbG3v790ytvx/W0XLPAuUPuQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QJFQ43OwBEUvIAAAGHSURBVEjHYwwNDf3PMACAiWGAAAuMsXr1akZ6WAgL4QHz8ajFVAX/////T3eL8VlKM4sJWUoTi2/duv2fojh2dvNaQY6lqqoqlCUuZyeH8KTUjP+0sBSvxczMzAxzZ01n8PYPImj5jp27SLIUr8VcXFwMDAwMDFs2rGXw9A38j89SdzdXrHLTps8k3WI+Xl44e9umdQyOrp65pFi6ecs2huysDEaSLWbnYEfh79u1bRIyf868+Tgt3bRlK4Ofrzcj1bITLH/OmTf/f3JiAlY1x46fYPD39SFY07Hgkvj79x/JhcORo8cYbG2sGSlKXCtWrSEplR47foJoS/FavHn9asaY+GSiDLlx4yaDtZUlI1WyEwMDA8PSRfMYM7LzCFqqqalBcuuFYOKaOW0yY3llDVUtJTpVd3W0MrZ3dqOIvX37jmxLScpOVRVljKvXrGNgYGBgeP3mDUNIRHQgVVqZxICw0GDGKdNm/F+1dr3Yob07X9PNYgYGBoYcPMXgaGMPH2AccX0nAG78jzcJ3eJlAAAAAElFTkSuQmCC"

		checkedpng="/dev/shm/stl-steam-checked.png"
		uncheckedpng="/dev/shm/stl-steam-unchecked.png"

		if [ ! -f "$checkedpng" ]; then
			base64 -d <<< "$checked64" > "$checkedpng"
		fi

		if [ ! -f "$uncheckedpng" ]; then
			base64 -d <<< "$unchecked64" > "$uncheckedpng"
		fi

		STLTHEME="${PROGCMD}-steam"
		CSSDIR="$HOME/.local/share/themes/$STLTHEME/gtk-3.0"

		if [ ! -d "$CSSDIR" ]; then
			mkdir -p "$CSSDIR" 2>/dev/null
		fi
		
		if [ ! -f "$CSSDIR/gtk.css" ] || [ "$CSSUPDATE" -eq 1 ] ; then
			if [ -z "$1" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing '$PROGNAME' Steam Theme to '$CSSDIR/gtk.css'"
			fi

			if [ "$(USEDLGLOBAL)" -ge 1 ]; then
				SRCCSS="$GLDLMISCDIR/gtk.css"
			else
				SRCCSS="$GLOBALMISCDIR/gtk.css"
			fi

			if [ -f "$SRCCSS" ] ; then
				cp "$SRCCSS" "$CSSDIR/gtk.css"
				updateConfigEntry "CSSUPDATE" "0" "$STLDEFGLOBALCFG"
			fi
		fi

		if [ -f "$CSSDIR/gtk.css" ] ; then
			if [ -z "$1" ]; then
				writelog "INFO" "${FUNCNAME[0]} - setting 'GTK_THEME=$STLTHEME'"
			fi
			export GTK_THEME="$STLTHEME"
		fi
	fi
}

function createDefaultCfgs {
	# if given a parameter to this function globalconfig will be skipped - required to start the main log file where it should (just cosmetics)
	if [ -z "$1" ]; then
		createProjectDirs
		saveCfg "$STLDEFGLOBALCFG" X
		loadCfg "$STLDEFGLOBALCFG" X
	fi

	checkSTLCSS X
	createProjectDirs
	saveCfg "$STLDEFGAMECFG" X
	saveCfg "$STLRESHADECFG" X
	saveCfg "$STLVORTEXCFG"  X

	saveCfg "$STLRESHADECFG" X
	loadCfg "$STLRESHADECFG" X
	createProjectDirs
}

function checkSTLDLGlobal {
	if [ "$(USEDLGLOBAL)" -ge 1 ]; then
		MAXAGE=1440
		if [ ! -f "$GLDLSTLTXT" ] || [ ! -d "$SYSTEMSTLCFGDIR" ] || test "$(find "$GLDLSTLTXT" -mmin +"$MAXAGE")"; then
			gitUpdate "$GLDLSTLDIR" "$PROJECTPAGE"
			date > "$GLDLSTLTXT"
		fi
	fi
}

# updates or creates option $1 with value $2 in configfile $3:
function updateConfigEntry {
	CFGCAT="$1"
	CFGVALUE="$2"
	CFGFILE="$3"

	if [ -z "$3" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - expected 3 arguments - only got $*"
	else
		if [ ! -f "$CFGFILE" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - configfile $CFGFILE does not exist - skipping config update"
		else
			if [ -n "$CFGVALUE" ]; then
				if [ "$CFGVALUE" == "TRUE" ]; then
					CFGVALUE="1"
				elif [ "$CFGVALUE" == "FALSE" ]; then
					CFGVALUE="0"
				fi	
		
				if [ "$CFGVALUE" == "DUMMY" ]; then
					CFGVALUE=""
				fi

				# only save value if it changed
				if [ "${!CFGCAT}" != "$CFGVALUE" ]; then
					if [ "$(grep -c "#${CFGCAT}=" "$CFGFILE")" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} - option $CFGCAT commented out in config - activating it with the new value $CFGVALUE"
						sed -i "/^#${CFGCAT}=/c$CFGCAT=\"$CFGVALUE\"" "$CFGFILE"
					elif [ "$(grep -c "${CFGCAT}=" "$CFGFILE")" -eq 0 ]; then
						writelog "INFO" "${FUNCNAME[0]} - $CFGCAT option missing in config - adding a new line"
						echo "$CFGCAT=\"$CFGVALUE\"" >> "$CFGFILE"
					else
						writelog "INFO" "${FUNCNAME[0]} - option $CFGCAT is updated with the new value $CFGVALUE"
						sed -i "/^${CFGCAT}=/c$CFGCAT=\"$CFGVALUE\"" "$CFGFILE"
					fi
				fi
			fi
		fi
	fi

	CFGCAT=""
	CFGVALUE=""
	CFGFILE=""
}

# autoapply configuration settings based on the steam categories the game is in:
function autoCategorySettings {
	STEAMUSERID="$(find "$HOME/.steam/steam/userdata/" -maxdepth 1 -type d -name "[1-9]*")"
	SC="$STEAMUSERID/7/remote/sharedconfig.vdf"

	if [ ! -f "$SC" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - file '$(basename "$SC")' not found in steam userid dir - skipping"
	else
		writelog "INFO" "${FUNCNAME[0]} - file '$(basename "$SC")' found in steam userid dir - searching categories for game '$AID'"

		while read -r SCAT; do
			if [ "$(USEDLGLOBAL)" -ge 1 ]; then
				GLOBALSCATCONF="$GLDLCATEGORYDIR/$SCAT.conf"
			else
				GLOBALSCATCONF="$GLOBALCATEGORYDIR/$SCAT.conf"
			fi

			if [ -f "$GLOBALSCATCONF" ]; then
				writelog "OK" "${FUNCNAME[0]} - config '$GLOBALSCATCONF' found - loading its settings"
				loadCfg "$GLOBALSCATCONF"
			else
				writelog "SKIP" "${FUNCNAME[0]} - config '$GLOBALSCATCONF' not found - skipping"
			fi

			SCATCONF="$STLCATEGORYDIR/$SCAT.conf"
			if [ -f "$SCATCONF" ]; then
				writelog "OK" "${FUNCNAME[0]} - config '$SCATCONF' found - loading its settings"
				loadCfg "$SCATCONF"
			else
				writelog "SKIP" "${FUNCNAME[0]} - config '$SCATCONF' not found - skipping"
			fi

		done <<< "$(sed -n "/\"$AID\"/,/}/p;" "$SC" | sed -n "/\"tags\"/,/}/p" | sed -n "/{/,/}/p" | grep -v '{\|}' | awk '{print $2}' | sed "s:\"::g")"
	fi
}
	
function stracerun {
	writelog "INFO" "${FUNCNAME[0]} - starting stracerun"
	waitForGamePid
	writelog "INFO" "${FUNCNAME[0]} - $STRACE -p $(GAMEPID) $STRACEOPTS -o $STRACEDIR/$AID.log"
	IFS=" " read -r -a RUNSTRACEOPTS <<< "$STRACEOPTS"

	"$STRACE" -p "$(GAMEPID)" "${RUNSTRACEOPTS[@]}" -o "$STRACEDIR/$AID.log"
}

function checkStraceLaunch {
	if [ -n "$STRACERUN" ]; then
		if [ "$STRACERUN" -eq 1 ]; then
			stracerun &
		fi
	fi
}

function netrun {
	writelog "INFO" "${FUNCNAME[0]} - starting network traffic monitor"

	waitForGamePid

	if [ -n "$NETMONDIR" ]; then
		if [ ! -d "$NETMONDIR" ]; then
			writelog "INFO" "${FUNCNAME[0]} - $NETMON dest directory $NETMONDIR does not exist - trying to create it"
			mkdir "$NETMONDIR" 2>/dev/null
		fi

		if [ -d "$NETMONDIR" ]; then
			writelog "INFO" "${FUNCNAME[0]} - writing network traffic for $AID int dest directory $NETMONDIR"
			if [ -f "$NETMONDIR/$AID-$NETMON.log" ]; then
				writelog "INFO" "${FUNCNAME[0]} - removing old $NETMONDIR/$AID-$NETMON.log"
				rm "$NETMONDIR/$AID-$NETMON.log"
			fi
			IFS=" " read -r -a RUNNETOPTS <<< "$NETOPTS"
			"$NETMON" "${RUNNETOPTS[@]}" | grep "wineserver" | grep -v "localhost\|0.0.0.0" >> "$NETMONDIR/$AID-$NETMON.log"
		else
			writelog "SKIP" "${FUNCNAME[0]} - $NETMON dest directory $NETMONDIR still does not exist - skipping"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - $NETMON dest directory variable NETMONDIR is empty"
	fi
}

function checkNetMonLaunch {
	if [ "$USENETMON" -eq 1 ]; then
		if [ -n "$NETMON" ]; then
			netrun &
		fi
	fi
}

# remove directory $1 recursively if it exists
function rmrecDir {
	if [ -d "$1" ]; then
		writelog "INFO" "${FUNCNAME[0]} - removing directory $1 recursively"
		rm -rf "$1"
	fi
}

function checkXliveless {
	if [ -n "$NOGFWL" ]; then
		if [ "$NOGFWL" -eq 1 ]; then
			rmrecDir "$GPFX/drive_c/Program Files (x86)/Microsoft Games for Windows - LIVE"
			rmrecDir "$GPFX/drive_c/Program Files/Common Files/Microsoft Shared/Windows Live"
			WLID="WLIDSvcM.exe"
			if pgrep "$WLID"; then
				writelog "INFO" "${FUNCNAME[0]} - GFWL starts $WLID directly after installation and it never exists - killing it now"
				pkill -9 "$WLID"
			fi

			XLIVEDLL="xlive.dll"
			XLDL="$STLDLDIR/xlive/"
			mkdir -p "$XLDL" 2>/dev/null

			writelog "INFO" "${FUNCNAME[0]} - game '$GN ($AID)' needs '$XLIVEDLL' - checking"
			if [ -f "$EFD/$XLIVEDLL" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - found '$XLIVEDLL' in dir $EFD - nothing to do"
			else
				writelog "INFO" "${FUNCNAME[0]} - '$XLIVEDLL' not found in gamedir '$EFD'"
				XLIVEURL="https://github.com/ThirteenAG/Ultimate-ASI-Loader/releases/download/v4.52/Ultimate-ASI-Loader.zip"			
				if [ ! -f "$XLDL/$XLIVEDLL" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '$XLDL/$XLIVEDLL' not found - downloading automatically from '$XLIVEURL'"
					"$WGET" "$XLIVEURL" -P "$XLDL"
					"$UNZIP" "$XLDL/$(basename "$DLURL")" -d "$XLDL"
					if [ -f "$XLDL/dinput8.dll" ]; then
						mv "$XLDL/dinput8.dll" "$XLDL/$XLIVEDLL"
					fi
				fi
				if [ -f "$XLDL/$XLIVEDLL" ]; then
					writelog "OK" "${FUNCNAME[0]} - found '$XLIVEDLL' in '$XLDL' - copying into gamedir '$EFD'"
					extRun cp "$XLDL/$XLIVEDLL" "$EFD"
				fi
			fi
		fi
	fi
}

#### protonfixes 
PFTWEAKDIR="$AUTOTWEAKDIR/$PF"
PFATDLDIR="$ATDLDIR/$PF"
GFDIR="$PFATDLDIR/$PF/gamefixes"
PFDURL="https://github.com/simons-public/$PF.git"

function dlPF {
	if [ -n "$PFATDLDIR" ]; then
		gitUpdate "$PFATDLDIR" "$PFDURL"
	else
		writelog "SKIP" "${FUNCNAME[0]} - ERROR - variable PFATDLDIR is empty - skipping $PF update"
	fi
}

function createAutoTweakPF {
	writelog "INFO" "${FUNCNAME[0]} - analyzing file $GFPY"
	PFID="$1"
	PFTWEAKCFG="$PFTWEAKDIR/$PFID.conf"	

	if [ -f "$PFTWEAKCFG" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - $PF tweakfile $PFTWEAKCFG already exists"
	else
		writelog "INFO" "${FUNCNAME[0]} - auto creating tweakfile $PFTWEAKCFG from $PF gamefix"

		WINETRICKSPAKS="$(grep "util.protontricks" "$GFPY" | grep -o -P "(?<=').*(?=')" | tr '\n' ' ' | awk '{$1=$1};1')"
		if [ -n "$WINETRICKSPAKS" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding WINETRICKSPAKS=\"$WINETRICKSPAKS\" to the tweakfile $PFTWEAKCFG"
			echo "WINETRICKSPAKS=\"$WINETRICKSPAKS\"" >> "$PFTWEAKCFG"
		fi

		CUSTOMCMD="$(grep "util.replace_command" "$GFPY" | cut -d ',' -f2 | grep -o -P "(?<=').*(?=')")"
		if [ -n "$CUSTOMCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding CUSTOMCMD=$CUSTOMCMD to the tweakfile $PFTWEAKCFG"
			{
			echo "CUSTOMCMD=\"$CUSTOMCMD\""
			echo "RUN_CUSTOMCMD=\"1\""
			echo "ONLY_CUSTOMCMD=\"1\""
			} >> "$PFTWEAKCFG"
		fi

		PFENV="$(grep "util.set_environment" "$GFPY" | grep -o -P "(?<=').*(?=')" | sed "s:', ':=:g")"
		if [ -n "$PFENV" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding $PFENV to the tweakfile $PFTWEAKCFG"
			echo "$PFENV" >> "$PFTWEAKCFG"
		fi
		
		WINEDLLOVERRIDES="$(grep "util.winedll_override" "$GFPY" | grep -o -P "(?<=').*(?=')" | tr '\n' ' ' | sed "s:', ':=:g"  | awk '{$1=$1};1' | tr ' ' ';')"
		if [ -n "$WINEDLLOVERRIDES" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding WINEDLLOVERRIDES=$WINEDLLOVERRIDES to the tweakfile $PFTWEAKCFG"
			echo "WINEDLLOVERRIDES=\"$WINEDLLOVERRIDES\"" >> "$PFTWEAKCFG"
		fi

		if grep -q "util.disable_[e,f]sync" "$GFPY"; then
			writelog "INFO" "${FUNCNAME[0]} - disabling ESYNC and FSYNC in $PFTWEAKCFG"
			echo "PROTON_NO_ESYNC=\"1\"" >> "$PFTWEAKCFG"
			echo "PROTON_NO_FSYNC=\"1\"" >> "$PFTWEAKCFG"
		fi
		
		GAMEARGS="$(grep "util.append_argument\|sys.argv.append" "$GFPY" | grep -o -P "(?<=').*(?=')" | tr '\n' ' ' | awk '{$1=$1};1')"
		if [ -n "$GAMEARGS" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding GAMEARGS=$GAMEARGS to the tweakfile $PFTWEAKCFG"
			echo "GAMEARGS=\"$GAMEARGS\"" >> "$PFTWEAKCFG"
		fi

		if grep -q "util.disable_dxvk" "$GFPY"; then
			writelog "INFO" "${FUNCNAME[0]} - disabling dxvk in $PFTWEAKCFG"
			echo "PROTON_USE_WINED3D11=\"1\"" >> "$PFTWEAKCFG"
			echo "PROTON_USE_WINED3D=\"1\"" >> "$PFTWEAKCFG"
		fi


		if [ -f "$PFTWEAKCFG" ]; then

			# remove duplicate lines:
			awk -i inplace '!visited[$0]++' "$PFTWEAKCFG"

			writelog "CREATE" "${FUNCNAME[0]} - '$PFGN ($PFID)' $PF-autotweak created: '$PFTWEAKCFG'"

			sed  "1s/^/#########\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#autogenerated from $PF data\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#GAMEID=\"$PFID\"\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#GAMENAME=\"$PFGN\"\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#########\n/" -i "$PFTWEAKCFG"
		fi
	fi
}

function getAutoTweakInfoPF {
	PFID="$1"
	PFTWEAKCFG="$PFTWEAKDIR/$PFID.conf"	

	if [ ! -d "$PFTWEAKDIR" ]; then
		mkdir -p "$PFTWEAKDIR"
	fi

	if [ ! -f "$PFTWEAKCFG" ]; then

		if [ -f "$GFDIR/$1.py" ]; then
			GFPY="$GFDIR/$1.py"
		fi
		
		if [ ! -f "$GFPY" ]; then
			writelog "INFO" "${FUNCNAME[0]} - no $PF sourcefiles found - updating sourcefiles, maybe it was added upstream"
			dlPF
			GFPY="$GFDIR/$1.py"
		fi
		
		if [ -n "$GFPY" ]; then
			if [ -f "$GFPY" ]; then

				# sorting out deprecated and fixes with only custom file configurations (for now)
				if grep -q "DeprecatedSince" "$GFPY"; then
					writelog "SKIP" "${FUNCNAME[0]} - found $PF file $GFPY is marked as deprecated - skipping"
				elif grep -q "Mania\|Potatoman\|Slug\|Crashday" "$GFPY"; then
					writelog "SKIP" "${FUNCNAME[0]} - found $PF file $GFPY is currently not supported by stl - skipping"
				else
					PFGN="$(head -n1 "$GFPY" | awk -F 'Game fix ' '{print $2}' | sed "s:^for ::g" | sed "s:/::g")"
					createAutoTweakPF "$PFID"
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - file $GFPY not found - skipping"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - invalid parameter $1 - skipping"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - tweak file '$PFTWEAKCFG' already exists - no need to create it"
	fi
}

function createTweakprotonfixes {
	createDefaultCfgs
	if [ -n "$1" ]; then
		getAutoTweakInfoPF "$1"
	else
		if [ "$AID" == "$PROGCMD" ]; then
			if [ ! -f "$GFDIR/default.py" ]; then
				writelog "INFO" "${FUNCNAME[0]} - no $PF sourcefiles found - downloading now"
				dlPF
			fi

			while read -r fix; do
				writelog "INFO" "${FUNCNAME[0]} - analyzing $fix"
				PFID="$(basename "$fix" | cut -d '.' -f1)"
				getAutoTweakInfoPF "$PFID"
			done < <(find "$GFDIR" -name "[0-9]*.py")
		else
			getAutoTweakInfoPF "$AID"
		fi
	fi
}


#### lutris
ATDLDIR="$STLDLDIR/autotweak"
LUATDLDIR="$ATDLDIR/$LU"
DLUDIR="$LUATDLDIR/dl"
WLUDIR="$LUATDLDIR/wip"
WPDIR="$WLUDIR/pages"
WGDIR="$WLUDIR/games"

LUDURL="https://$LU.net/api/installers"
LULIST="$LUATDLDIR/$LU-full.txt"

LUBACK="$LUATDLDIR/$LU-full-back.txt"
LUSTEAMLIST="$LUATDLDIR/$LU-steam.txt"
LUSTEAMFLIST="$LUATDLDIR/$LU-steam-full.txt"
LUTWEAKDIR="$AUTOTWEAKDIR/$LU"


# dl one $LU page:
function dlLUpage {
	mkdir "$DLUDIR" 2>/dev/null

	PAGE="$1"
	if [ ! -f "$DLUDIR/$PAGE.txt" ]; then
		writelog "INFO" "${FUNCNAME[0]} downloading $LU page $PAGE to $DLUDIR/$PAGE.txt)"
		"$WGET" -q "$LUDURL?page=$PAGE" -O - | sed "s:},{\"id:},\n{\"id:g" > "$DLUDIR/$PAGE.txt"
	fi
}

# download all $LU pages and join them to one big list "$LULIST":
function dlLU {
	mkdir "$DLUDIR" 2>/dev/null
	mkdir -p "$WPDIR" 2>/dev/null

	# first redownload page one, as it contains the game count GAMECOUNT required for calculating the pages to download
	PONE="$DLUDIR/1.txt"
	if [ -f "$PONE" ]; then
		rm "$PONE"
	fi
	dlLUpage 1

	GAMECOUNT="$(head -n1 "$PONE" | grep -oE 'count":[^\,]+' | cut -d ':' -f2)"
	PCNTOUT=$((GAMECOUNT / 250))
	# there might be some more pages than PCNTOUT - trying next PCNTOUTPLUS as well
	PCNTOUTPLUS=3
	PCNTOUTBONUS=$((PCNTOUT + PCNTOUTPLUS))

	# backup the full list before recreating it
	if [ -f "$LULIST" ]; then
		mv "$LULIST" "$LUBACK"
	fi

	writelog "INFO" "${FUNCNAME[0]} calculated $PCNTOUT pages to download, and trying $PCNTOUTPLUS more"

	for ((PCUR=1; PCUR<PCNTOUTBONUS; PCUR++)); do
		dlLUpage "$PCUR"
		DLPAGE="$DLUDIR/$PAGE.txt"

		# remove empty downloads
		if [ ! -s "$DLPAGE" ]; then
			writelog "INFO" "${FUNCNAME[0]} remove empty file $DLPAGE"
			rm "$DLPAGE"
		else
			WORKPAGE="$WPDIR/$PAGE.txt"
			cp "$DLPAGE" "$WORKPAGE"
			# prepare the page to be merged into the big one
			
			# add a line break so the first line can be removed completely in the following step:
			sed "s:results\"\:\[:\n:g" -i "$WORKPAGE"
			# remove first line completely:
			sed "1d" -i "$WORKPAGE"
			# replace closing ']}' with a ',' in every file:
			sed '1h;1!H;$!d;g;s/\(.*\)]}/\1,/' -i "$WORKPAGE"
			# add a new line if missing at the end of each file:
			sed '${/^$/!s/$/\n/;}' -i "$WORKPAGE"
			# merge all pages into one list
			cat "$WORKPAGE" >> "$LULIST"
		fi
	done
}

# create a list as steam relevant as possible. filter might be improvable.
function createLUSteamList {
	if [ ! -f "$LULIST" ]; then
		writelog "INFO" "${FUNCNAME[0]} source list $LULIST not found - downloading data and creating it now"
		dlLU
	fi
		
	awk -F '"script"' '{print $NF}' < "$LULIST" | grep "\"appid\"" | awk 'length($0)>100' | sort -u  > "$LUSTEAMFLIST"
	awk -F '"content"' '{print $1}' < "$LUSTEAMFLIST" | grep -v "run_without_steam\| select \|GOG\|bms\|Itch.io" | sort -u  > "$LUSTEAMLIST"
	writelog "INFO" "${FUNCNAME[0]} full $LU steam list ready at $LUSTEAMLIST"
}

function createAutoTweakLU {
	ATF="$1"
	LUTF="$(basename "${ATF//.txt/.conf}")"
	LUTWEAKCFG="$LUTWEAKDIR/$LUTF"	
	mkdir -p "$LUTWEAKDIR" 2>/dev/null

	ARGARR=()
	WTARR=()
	LUGN=""
	GAMEID="$(cut -d '_' -f1 <<< "${LUTF//.conf/}")"
	
	if [ -f "$LUTWEAKCFG" ]; then
		writelog "SKIP" "${FUNCNAME[0]} tweakfile '$LUTWEAKCFG' already exists!"
	else
		writelog "INFO" "${FUNCNAME[0]} - auto creating tweakfile '$LUTWEAKCFG'"

		if [ -n "$LUATDEBUG" ]; then
			if [ "$LUATDEBUG" -eq 1 ]; then
				LUTWEAK1DEBUG="/tmp/LUTWEAKDEBUG-raw.txt"
				LUTWEAKDEBUG="/tmp/LUTWEAKDEBUG.txt"
			fi
		fi

		# read raw $LU file line by line and search for importable data
		while read -r line; do

			# if LINECONV is still 0 at the end it can be logged into a temp. unused file later
			LINECONV=0

			# winetricks
			if grep -q "\"name\":\"winetricks\"" <<< "$line"; then
				IFS=" " read -r -a ALINE <<< "$(grep -oE 'app[^\,]+' <<< "$line" | cut -d ':' -f2 | sed "s:\"::g")"
				for i in "${ALINE[@]}"; do
				if grep -q "gfw" <<< "$i"; then
					writelog "INFO" "${FUNCNAME[0]} - not adding gfw to WINETRICKSPAKS, setting NOGFWL instead"
					echo "NOGFWL=\"1\"" >> "$LUTWEAKCFG"
				else
					WTARR+=("$i")
				fi
				done
				LINECONV=1
			fi

			# command line args
			if grep -oE 'game\"[^\}]+' <<< "$line" | grep -q "\"args\":"; then
			IFS=" " read -r -a ARGS <<< "$(grep -oE 'game\"[^\}]+' <<< "$line" | grep "\"args\":" | awk -F '"args":"' '{print $2}' | cut -d'"' -f1)"
				for i in "${ARGS[@]}"; do
					if grep -q "^PROTON\|^RADV" <<< "$i"; then
						writelog "INFO" "${FUNCNAME[0]} - '$i' is a variable - adding to '$LUTWEAKCFG'"
						echo "$i" >> "$LUTWEAKCFG"
					elif ! grep -q "%command%\|nojoy\|applaunch" <<< "$i"; then
						ARGARR+=("$i")
					fi
				done
				LINECONV=1
			fi

			# system - currently only env variables
			if grep -q -oE 'system\"[^\}]+' <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found system config"
				if  grep -q "\"env\":" <<< "$line"; then
					writelog "INFO" "${FUNCNAME[0]} - found variables"
					while read -r luvar; do
						if ! grep -q "CACHE_PATH\|DXVK_CONFIG_FILE\|WINEPREFIX\|INPUT_HUD\|\"WINE\"\|__GL\|DXVK_HUD\|VK_ICD_FILENAMES\|RESOLUTIONx32\|PBA_ENABLE" <<< "$luvar"; then
							writelog "INFO" "${FUNCNAME[0]} - found variable $luvar"
							echo "$luvar" >> "$LUTWEAKCFG"
						fi
					done <<< "$(grep -oE 'env\"[^\}]+' <<< "$line" | awk -F':{' '{print $2}' | sed "s:,:\n:g" | sed "s:\"::g" | sed "s:\::=:g")"
				fi
				LINECONV=1
			fi

			# dll overrides
			if grep -q -oE 'overrides\"[^\}]+' <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found overrides"
				ORLINE="$(grep -oE 'overrides\"[^\}]+' <<< "$line" | awk -F':{' '{print $2}' | sed "s:\",:;:g" | sed "s:\"::g" | sed "s:\::=:g" | sed "s:disabled:d:g" | sed "s:native:n:g" | sed "s:builtin:b:g")"
				echo "WINEDLLOVERRIDES=\"$ORLINE\"" >> "$LUTWEAKCFG"
				LINECONV=1
			fi

			# pulseaudio 
			if grep -q "pulse_latency" <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found pulse_latency - setting PULSE_LATENCY_MSEC=60"

				echo "CHANGE_PULSE_LATENCY=\"1\"" >> "$LUTWEAKCFG"
				echo "STL_PULSE_LATENCY_MSEC=\"60\"" >> "$LUTWEAKCFG"
				LINECONV=1
			fi


			# xlive 
			if grep -q "xlive\|gfw" <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found xlive - setting NOGFWL"
				echo "NOGFWL=\"1\"" >> "$LUTWEAKCFG"
				LINECONV=1
			fi

			# write_config 
			if grep -q "write_config" <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found write_config setting TWEAKCMD"
					echo "TWEAKCMD=\"$GAMEID.sh\"" >> "$LUTWEAKCFG"
					TWEAKLUCMD="$TWEAKCMDDIR/$GAMEID.sh"
					if [ -f "$TWEAKLUCMD" ];then
						writelog "SKIP" "${FUNCNAME[0]} - TWEAKCMD $TWEAKLUCMD does already exists - not autogenerating"
					else
						writelog "INFO" "${FUNCNAME[0]} - creating TWEAKCMD $TWEAKLUCMD"
						WCFILE="$(grep -oE '"file":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::" | sed "s:\$GAMEDIR/prefix:\$GPFX:"| sed "s:\$GAMEDIR:\"\$GPFX\":" | sed  "s:\$USER:steamuser:")"
						WCKEY="$(grep -oE '"key":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::")"
						WCSECTION="$(grep -oE '"section":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::")"
						WCVALUE="$(grep -oE '"value":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::")"
						{
							echo "# $line"
							echo ""
							echo "GPFX=\"\$STEAM_COMPAT_DATA_PATH/pfx\""
							echo ""
							echo "FILE=\"$WCFILE\""
							echo "FILEDIR=\"\$(dirname \"\$FILE\")\""
							echo "mkdir -p \"\$FILEDIR\" 2>/dev/null"
							echo "KEY=\"$WCKEY\""
							echo "SECTION=\"$WCSECTION\""
							echo "VALUE=\"$WCVALUE\""
							echo "if [ ! -f \"\$FILE\" ]; then"
							echo " echo \"[\$SECTION]\" >> \"\$FILE\""
							echo " echo \"\$KEY:\$VALUE\" >> \"\$FILE\""
							echo "fi"
						} >> "$TWEAKLUCMD"

					fi
				LINECONV=1
			fi

			# download urls and extraction lines are just added as commented out raw lines to the tweakfile:
			if grep -q "\"http\|\"extract\"" <<< "$line"; then
				echo "## RAW # '$line'" >> "$LUTWEAKCFG"
				LINECONV=1
			fi

			
			if [ -n "$LUATDEBUG" ]; then
				if [ "$LUATDEBUG" -eq 1 ]; then
					if [ "$LINECONV" -eq 0 ]; then
						echo "## TODO # $GAMEID ### '$line'" >> "$LUTWEAK1DEBUG"
					fi
				fi
			fi
		done < "$ATF"

		if [ -n "$LUATDEBUG" ]; then
			if [ "$LUATDEBUG" -eq 1 ]; then
				awk -i inplace '!visited[$0]++' "$LUTWEAK1DEBUG"
				grep -v "write_config\|KB976932\|appid\|insert-disc\|\"winesteam\"\|''\|create_prefix\|winekill\|\"description\"\|N\/A\|\"files\"" "$LUTWEAK1DEBUG" >> "$LUTWEAKDEBUG"
				awk -i inplace '!visited[$0]++' "$LUTWEAKDEBUG"
			fi
		fi

		# add collected winetricks packages to $LUTWEAKCFG as WINETRICKSPAKS
		if [ -n "${WTARR[0]}" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found following winetricks packages: '${WTARR[*]}'"

			# 12170 glitches with result "WINETRICKSPAKS=mfc42}}]}"
			if [ "$GAMEID" == "12170" ]; then
				echo "WINETRICKSPAKS=\"mfc42\"" >> "$LUTWEAKCFG"
			else
				WTO="$(echo "${WTARR[*]}" | tr ' ' '\n' | sort -u | tr '\n' ' ' | awk '{$1=$1};1')"	
				echo "WINETRICKSPAKS=\"$WTO\"" >> "$LUTWEAKCFG"
			fi
		fi

		# add GAMEARGS to $LUTWEAKCFG
		if [ -n "${ARGARR[0]}" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found following game arguments: '${ARGARR[*]}'"
			echo "GAMEARGS=\"${ARGARR[*]}\"" >> "$LUTWEAKCFG"
		fi

		if [ -f "$LUTWEAKCFG" ]; then
			# remove duplicate lines:
			awk -i inplace '!visited[$0]++' "$LUTWEAKCFG"

			LUGN="$(grep -m1 "\"appid\":$GAMEID," "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			if [ -z "$LUGN" ]; then
				LUGN="$(grep -m1 "\"appid\":$GAMEID}" "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			fi
			
			writelog "CREATE" "${FUNCNAME[0]} - '$LUGN ($GAMEID)' $LU-autotweak created: '$LUTWEAKCFG'"

			sed  "1s/^/#########\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#autogenerated from $LU data\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#GAMEID=\"$GAMEID\"\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#GAMENAME=\"$LUGN\"\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#########\n/" -i "$LUTWEAKCFG"
		fi
		
		if [ -f "$TWEAKLUCMD" ];then
			awk -i inplace '!visited[$0]++' "$TWEAKLUCMD"
			LUGN="$(grep -m1 "\"appid\":$GAMEID," "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			if [ -z "$LUGN" ]; then
				LUGN="$(grep -m1 "\"appid\":$GAMEID}" "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			fi

			writelog "CREATE" "${FUNCNAME[0]} - '$LUGN ($GAMEID)' TWEAKCMD created: '$TWEAKLUCMD'"
			
			if ! grep -q "^#" <<< "$(head -n1 "$TWEAKLUCMD")"; then
				sed  "1s/^/#########\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#autogenerated from $LU data\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#GAMEID=\"$GAMEID\"\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#GAMENAME=\"$LUGN\"\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#########\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#\!\/bin\/bash\n/" -i "$TWEAKLUCMD"
			fi
			chmod +x "$TWEAKLUCMD"
		fi
	fi
}

function getLUgameData {
	LUAID="$1"
	RAWLINE="$2"

	if [ -n "$3" ];then
		writelog "INFO" "${FUNCNAME[0]} creating raw datafile '$WGDIR/${LUAID}_$3.txt'"
		echo "$RAWLINE" | sed 's/},/},\n/g' | sed 's/],/],\n/g' > "$WGDIR/${LUAID}_$3.txt"
		createAutoTweakLU "$WGDIR/${LUAID}_$3.txt"
	else
		writelog "INFO" "${FUNCNAME[0]} creating raw datafile '$WGDIR/$LUAID.txt'"
		echo "$RAWLINE" | sed 's/},/},\n/g' | sed 's/],/],\n/g' > "$WGDIR/$LUAID.txt"
		createAutoTweakLU "$WGDIR/$LUAID.txt"
	fi
}

function getAutoTweakInfoLU {

	if [ ! -f "$LUSTEAMLIST" ]; then
		writelog "INFO" "${FUNCNAME[0]} list '$LUSTEAMLIST' not found - creating it now"
		createLUSteamList
	fi

	if [ -z "$1" ];then
		writelog "SKIP" "${FUNCNAME[0]} need steamID as arg1!"
	else
		LUAID="$1"

		LUTWEAKCFG="$LUTWEAKDIR/$LUAID.conf"	
	
		if [ -f "$LUTWEAKCFG" ]; then
			writelog "SKIP" "${FUNCNAME[0]} tweakfile '$LUTWEAKCFG' already exists - no need to create it"
		else
			mkdir "$WGDIR" 2>/dev/null
			if [ -f "$WGDIR/$LUAID.txt" ]; then
				writelog "INFO" "${FUNCNAME[0]} already found raw data for game under '$WGDIR/$LUAID.txt' - working on it"
					createAutoTweakLU "$WGDIR/$LUAID.txt"
			else
				LUGC="$(grep -c "\"appid\":$LUAID\|\"appid\":\"$LUAID" "$LUSTEAMLIST")"

				if [ "$LUGC" -gt 0 ]; then
					writelog "INFO" "${FUNCNAME[0]} found data for game '$LUAID' - working on it"

					getLUgameData "$LUAID" "$(grep "\"appid\":$LUAID\|\"appid\":\"$LUAID" "$LUSTEAMLIST")"

					if [ "$LUGC" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} there's one explicit match"
					else
						writelog "INFO" "${FUNCNAME[0]} the game has '$LUGC' entries in the '$LU' db"
						for ((GCUR=2; GCUR<=LUGC; GCUR++)); do
							writelog "INFO" "${FUNCNAME[0]} working on entry '$GCUR/$LUGC'"
							RAWLINE="$(grep -m "$GCUR" "\"appid\":$LUAID" "$LUSTEAMLIST" | tail -n1)"
							getLUgameData "$LUAID" "$RAWLINE" "$GCUR"
						done
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} no data found for game '$LUAID'!"
				fi
			fi
		fi
	fi
}

function createTweaklutris {
	createDefaultCfgs
	if [ -n "$1" ]; then
		getAutoTweakInfoLU "$1"
	else
		if [ ! -f "$LUSTEAMLIST" ]; then
			createLUSteamList
		fi

		if [ "$AID" == "$PROGCMD" ]; then
			while read -r line; do
				getAutoTweakInfoLU "$line"
			done <<< "$(awk -F '"appid":' '{print $2}' < "$LUSTEAMLIST" | cut -d ',' -f1 | grep -Eo '[0-9]{1,10}' | sort -u)"
		else
			getAutoTweakInfoLU "$AID"
		fi
	fi
}

function guiLoadCfg {
	GUICFG="$1"

	writelog "INFO" "${FUNCNAME[0]} - requester asking if '$GUICFG' should be loaded"

	"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed --undecorated \
	--field="Load AutoTweak Config '$VALCFG'?":LBL \
	--field="<span font=\"italic\">(Skip/Load/Ignore AutoTweaks for '$GN ($AID)')</span>":LBL \
	--button="SKIP":0  \
	--button="LOAD":1  \
	--button="IGNORE":2  \
	--timeout="$WAITEDITOR" \
	--timeout-indicator=top
	case $? in
		0)  writelog "SKIP" "${FUNCNAME[0]} - selected to skip '$GUICFG'"
		;; 
		1)	LOADAUTOCFG="$GUICFG"
			writelog "INFO" "${FUNCNAME[0]} - marked '$LOADAUTOCFG' for loading"
		;;
		2)	writelog "INFO" "${FUNCNAME[0]} - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$TWEAKCFG'"
			updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$STLGAMECFG"
		;;
	esac
}

function validateATCfg {
	VALCFG="$1"
	
	if [ -z "$ATVALIDATE" ]; then
		ATVALIDATE="$WAITEDITOR"
	fi

	if [ "$ATVALIDATE" -ge 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - gui asking if '$VALCFG' should be edited as ATVALIDATE is '$ATVALIDATE', autoloaded, skipped or ignored"

		"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed --undecorated \
		--field="Found AutoTweak Config '$VALCFG'?":LBL \
		--field="<span font=\"italic\">(Edit/Skip/Load/Ignore AutoTweaks for '$GN ($AID)')</span>":LBL \
		--button="EDIT":0  \
		--button="SKIP":1  \
		--button="LOAD":2  \
		--button="IGNORE":3  \
		--timeout="$ATVALIDATE" \
		--timeout-indicator=top
		case $? in
			0)	writelog "INFO" "${FUNCNAME[0]} - selected EDIT - opening '$VALCFG' with the editor now"
				"$STLEDITOR" "$VALCFG"
				guiLoadCfg "$VALCFG"
			;;
			1)  writelog "SKIP" "${FUNCNAME[0]} - selected SKIP"
			;; 
			2)	LOADAUTOCFG="$GUICFG"
				writelog "INFO" "${FUNCNAME[0]} - selected LOAD - marked '$LOADAUTOCFG' for loading"
			;;
			3)	writelog "INFO" "${FUNCNAME[0]} - selected IGNORE - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$STLGAMECFG'"
				updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$STLGAMECFG"
			;;
			70) writelog "SKIP" "${FUNCNAME[0]} - TIMEOUT - skipping"
			;;
		esac
	else
		LOADAUTOCFG="$VALCFG"
		writelog "INFO" "${FUNCNAME[0]} - ATVALIDATE is '$ATVALIDATE' - marked '$VALCFG' for loading automatically"
	fi
}

function AdoptAutoTweak {
	if [ -f "$TWEAKCFG" ]; then
		mv "$TWEAKCFG" "${TWEAKCFG}_old"
		writelog "INFO" "${FUNCNAME[0]} - moved exiting tweakfile '$TWEAKCFG' to'${TWEAKCFG}_old'"
	fi
	
	cp "$LOADAUTOCFG" "$TWEAKCFG"
	echo "IGNOREAUTOTWEAKS=\"1\"" >> "$TWEAKCFG"
	sed "/^#GAMENAME.*/a #GAMEEXE=\"$GE\"" -i "$TWEAKCFG"
	sed "/^#GAMEID.*/a #PROTONVERSION=\"$PROTONVERSION\"" -i "$TWEAKCFG"

	writelog "INFO" "${FUNCNAME[0]} - changed the autotweakfile '$LOADAUTOCFG' to '$TWEAKCFG'"
}

function AskAdoptAutoTweak {
	"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed --undecorated \
	--width=800 \
	--title="Convert used AutoTweak?" \
	--text="<span font_weight='bold'>$GN ($AID) - Convert used AutoTweak?</span>" \
    --field="":LBL "" \
	--field="Adopt the just used AutoTweak '$LOADAUTOCFG'\n and skip autotweaks for '$GN ($AID)' from now on?":LBL \
	--field="<span font=\"italic\">(Existing user tweakfile will be backuped)</span>":LBL \
	--field="":LBL "" \
	--button="ADOPT":0  \
	--button="CANCEL":1  \
	--timeout="$WAITEDITOR" \
	--timeout-indicator=top
	case $? in
		0) writelog "INFO" "${FUNCNAME[0]} - selected ADOPT - converting '$LOADAUTOCFG' to a regular tweakfile"
		   AdoptAutoTweak
		;;
		1) writelog "SKIP" "${FUNCNAME[0]} - selected CANCEL - not using '$LOADAUTOCFG' as regular tweakfile for '$GN ($AID)'"
		;;
		70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - doing nothing"
		;;
	esac
}


# load autogenerated tweak config
function getprotonfixesCfg {
	PFTWEAKCFG="$PFTWEAKDIR/$AID.conf"	
	if [ -f "$PFTWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - '$PF' imported autotweak config found at '$PFTWEAKCFG'"
		validateATCfg "$PFTWEAKCFG"
	fi
}

function getlutrisCfg {
	LUTWEAKCFG="$LUTWEAKDIR/$AID.conf"	
	if [ -f "$LUTWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - '$LU' imported autotweak config found at '$LUTWEAKCFG'"
		validateATCfg "$LUTWEAKCFG"
	fi

	while read -r addfile; do
		writelog "INFO" "${FUNCNAME[0]} - additional '$LU' imported autotweak config found at '$addfile'"
		if [ -f "$addfile" ]; then
			validateATCfg "$addfile"
		fi
	done <<< "$(find "$LUTWEAKDIR" -mindepth 1 -maxdepth 1 -type f -name "${AID}_*.conf")"
}

#### generic autoTweak :
function autoGenTweak {
	
	if grep -q "^IGNOREAUTOTWEAKS=\"1\"" "$STLGAMECFG"; then
		writelog "SKIP" "${FUNCNAME[0]} - IGNOREAUTOTWEAKS set in '$STLGAMECFG'"
	elif  grep -q "^IGNOREAUTOTWEAKS=\"1\"" "$TWEAKCFG"; then
		writelog "SKIP" "${FUNCNAME[0]} - IGNOREAUTOTWEAKS set in '$TWEAKCFG'"
	elif  grep -q "^IGNOREAUTOTWEAKS=\"1\"" "$STLDEFGLOBALCFG"; then
		writelog "SKIP" "${FUNCNAME[0]} - IGNOREAUTOTWEAKS set in '$STLDEFGLOBALCFG'"
	else
		if [ -n "$AUTOTWEAKS" ]; then

			writelog "INFO" "${FUNCNAME[0]} - AUTOTWEAKS defined as '$AUTOTWEAKS' trying to import from supported platforms"
			while read -r ATCAND; do
				if grep -q "$ATCAND" <<< "$AUTOTWEAKPLATFORMS" ; then
					writelog "INFO" "${FUNCNAME[0]} - '$ATCAND' is a supported platform"
					createTweak"$ATCAND"
					get"$ATCAND"Cfg
				else
					writelog "SKIP" "${FUNCNAME[0]} - '$ATCAND' is no supported platform"
				fi
			done <<< "$(tr ' ' '\n' <<< "$AUTOTWEAKS")"
		fi
	fi
}

function launchCustomProg {
	if [ -z "$CUSTOMCMD" ] || [ "$CUSTOMCMD" == "$(which echo)" ]; then
		writelog "INFO" "${FUNCNAME[0]} - CUSTOMCMD variable is empty - opening file requester"
		ZCUST="$("$YAD" --window-icon=gtk-yes --borders=30 --form --center --on-top --fixed --undecorated \
		--width=800 \
		--title="Select Custom executable" \
		--text="<span font_weight='bold'>$GN ($AID) - Select Custom executable</span>" \
		--field="":LBL "" \
		--field="Select executable file":FL)"
		if [ -n "$ZCUST" ]; then
			if [ "$RUN_CUSTOMCMD" -eq 2 ]; then
				writelog "INFO" "${FUNCNAME[0]} - '${ZCUST//|/}' selected for CUSTOMCMD - not updating configfile '$STLGAMECFG' as RUN_CUSTOMCMD is '$RUN_CUSTOMCMD'"
			else
				writelog "INFO" "${FUNCNAME[0]} - '${ZCUST//|/}' selected for CUSTOMCMD - updating configfile '$STLGAMECFG'"
				updateConfigEntry "CUSTOMCMD" "${ZCUST//|/}" "$STLGAMECFG"
			fi
			CUSTOMCMD="${ZCUST//|/}"
		else
			writelog "SKIP" "${FUNCNAME[0]} - nothing selected for CUSTOMCMD - skipping"
			if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
				writelog "SKIP" "${FUNCNAME[0]} - ONLY_CUSTOMCMD is enabled - bailing out here"
				closeSTL
				writelog "INFO" " ######### STOP EARLY '$PROGNAME $PROGVERS' #########"
				exit
			else
				writelog "SKIP" "${FUNCNAME[0]} - continuing with the main game"
				return
			fi
		fi
	fi
	
	if [ -z "$CUSTOMCMD" ]; then
		writelog "ERROR" "${FUNCNAME[0]} - CUSTOMCMD variable is empty - but it shouldn't be empty here!"
	fi	
		
	if  [ -x "$(command -v "$CUSTOMCMD" 2>/dev/null)" ]; then
		writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' found in PATH"
		LACO="$CUSTOMCMD"
		CUSTCOM="$(which "$CUSTOMCMD")"
	else
		writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' not in path - searching in gamedir"

		if [ -f "$EFD/$CUSTOMCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' was found in gamedir '$EFD'"
			LACO="$EFD/$CUSTOMCMD"
			CUSTCOM="$EFD/$CUSTOMCMD"
		else
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' also not in '$EFD/$CUSTOMCMD' - checking if absolute path was provided"

			if [ -f "$CUSTOMCMD" ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' is absolute path"
				LACO="$CUSTOMCMD"
				CUSTCOM="$CUSTOMCMD"
			else
				writelog "INFO" "${FUNCNAME[0]} - CUSTOMCMD file '$CUSTOMCMD' not found - opening file requester"
				ZCUST="$("$YAD" --window-icon=gtk-yes --borders=30 --form --center --on-top --fixed --undecorated \
				--width=800 \
				--title="Select Custom executable" \
				--text="<span font_weight='bold'>$GN ($AID) - Select Custom executable</span>" \
				--field="":LBL "" \
				--field="Select executable file":FL)"
				if [ -n "$ZCUST" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '${ZCUST//|/}' selected for CUSTOMCMD - updating configfile '$STLGAMECFG'"
					updateConfigEntry "CUSTOMCMD" "${ZCUST//|/}" "$STLGAMECFG"
					LACO="${ZCUST//|/}"
					CUSTCOM="${ZCUST//|/}"
					CUSTOMCMD="${ZCUST//|/}"
				else
					writelog "SKIP" "${FUNCNAME[0]} - nothing selected for CUSTOMCMD - skipping"
					if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - ONLY_CUSTOMCMD is enabled - bailing out here"
						closeSTL
						writelog "INFO" " ######### STOP EARLY $PROGNAME $PROGVERS #########"
						exit
					else
						writelog "SKIP" "${FUNCNAME[0]} - continuing with the main game"
						return
					fi
				fi
			fi
		fi
	fi

	if [ -z "$LACO" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - ERROR - launch command empty- skipping launch"
	else
		if [ -z "$CUSTOMCMD_ARGS" ] || [ "$CUSTOMCMD_ARGS" == "none" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting the custom program '$CUSTOMCMD' without args"
			RUNCUSTOMCMD_ARGS=""
		else
			writelog "INFO" "${FUNCNAME[0]} - starting the custom program '$CUSTOMCMD' with args: '$CUSTOMCMD_ARGS'"
			IFS=" " read -r -a RUNCUSTOMCMD_ARGS <<< "$CUSTOMCMD_ARGS"
		fi

		writelog "INFO" "${FUNCNAME[0]} - launching custom command with '$LACO' '$CUSTOMCMD_ARGS'"

		if [ "$(extRun file "$CUSTCOM" | grep -c "PE32")" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' seems to be a MS Windows exe - starting through proton"
			if [ "$(extRun file "$CUSTCOM" | grep -c "(console)")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' seems to be a MS console program - starting using wineconsole"
				extWine64Run "$GWINE" wineconsole "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
			else
				writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' seems to be a MS gui program - starting regularly"
				extWine64Run "$GWINE" "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
			fi
		else
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' doesn't seem to be a MS Windows exe - regular start (without further analysing)"
			extRun "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
		fi
	fi
}

function wmp10hack {
	if [ -f "$GPFX/drive_c/windows/syswow64/wmpasf.dll" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - looks like wmp10 was already copied into '$GPFX' - nothing to do"
	else
		GPFX32="${GPFX}/32bit"
		if [ -d "$GPFX32" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - looks like dummy 32bit WINEPREFIX '$GPFX32' already exists - nothing to do"
		else
			writelog "INFO" "${FUNCNAME[0]} - creating dummy 32bit WINEPREFIX '$GPFX32' and installing wmp10 into it"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" WINE="$GWINE" WINEARCH=win32 WINEDEBUG="-all" WINEPREFIX="$GPFX32" "$WINETRICKS" --unattended wmp10 dxvk
			if [ -f "$GPFX32/drive_c/windows/system32/wmpasf.dll" ]; then
				writelog "INFO" "${FUNCNAME[0]} - looks like wmp10 installation into dummy 32bit WINEPREFIX '$GPFX32' worked! - copying required dlls (and some more) now into regular WINEPREFIX '$GPFX'"
				WMP10LIST="wmp10-list.txt"
				if [ -f "$GLOBALTWEAKCMDDIR"/"$WMP10LIST" ]; then
					WMP10SRCLIST="$GLOBALTWEAKCMDDIR"/"$WMP10LIST"
				elif [ "$(USEDLGLOBAL)" -ge 1 ] && [ -f "$GLDLTWEAKCMDDIR/$WMP10LIST" ]; then
					WMP10SRCLIST="$GLDLTWEAKCMDDIR"/"$WMP10LIST"
				elif  [ -f "$TWEAKCMDDIR"/"$WMP10LIST" ]; then
					WMP10SRCLIST="$TWEAKCMDDIR"/"$WMP10LIST"
				fi
				
				if [ -z "$WMP10SRCLIST" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - could not find '$WMP10LIST' in '$GLOBALTWEAKCMDDIR' (or '$GLDLTWEAKCMDDIR') or '$TWEAKDIR' - exiting"
					exit
				else
					while read -r file; do
						SRCFILE="$GPFX32/drive_c/windows/system32/$file"
						if [ -f "$SRCFILE" ]; then
							writelog "INFO" "${FUNCNAME[0]} - copying '$SRCFILE' to '$GPFX/drive_c/windows/syswow64/'"
							cp "$SRCFILE" "$GPFX/drive_c/windows/syswow64/"
						fi
					done < "$WMP10SRCLIST"
				fi
			fi
		fi
	fi
}

function checkCustomLaunch {

	if [ -n "$HACKWMP10" ] ; then
		if [ "$HACKWMP10" -eq 1 ] ; then
			wmp10hack
			cd "$EFD" || return
		fi
	else
		# start a custom program:
		if [ -n "$RUN_CUSTOMCMD" ] ; then
			if [ "$RUN_CUSTOMCMD" -ge 1 ] ; then
				writelog "INFO" "${FUNCNAME[0]} - RUN_CUSTOMCMD is set to '$RUN_CUSTOMCMD' - trying to start custom program CUSTOMCMD"
			# fork in background and continue
				if [ "$FORK_CUSTOMCMD" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 1 -  forking the custom program in background and continue"
					launchCustomProg "$@" &
			# or wait
				else
					writelog "INFO" "${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 0 - starting the custom program regularly"
					launchCustomProg "$@"
				fi


				if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - ONLY_CUSTOMCMD is set to 1 means only custom program '$CUSTOMCMD' is supposed to start - exiting here"
					closeSTL
					writelog "INFO" " ######### STOP EARLY $PROGNAME $PROGVERS #########"
					exit
				fi
			else
				if [ -n "$CUSTOMCMD" ] && [ "$CUSTOMCMD" != "$(which echo)" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - RUN_CUSTOMCMD is set to 0 therefore skipping the custom program '$CUSTOMCMD'"
				fi
			fi
		fi
	fi
}

function toggleWindows {

	if [ -z "$MINIMIZEDWINDOWS" ]; then
		MINIMIZEDWINDOWS=""
	fi

	if [ -n "$TOGGLEWINDOWS" ]; then
		if [ "$TOGGLEWINDOWS" -eq 1 ]; then
			if  [ -x "$(command -v "$WMCTRL" 2>/dev/null)" ] && [ -x "$(command -v "$XPROP" 2>/dev/null)" ] ; then
				writelog "INFO" "${FUNCNAME[0]} - setting windows to $1"
				WSTATE="$1"

				while read -r WINNAME; do
					if "$XPROP" -id "$WINNAME" | grep "_NET_WM_ACTION_MINIMIZE" -q ;then
						if [ "$WSTATE" == "windowminimize" ]; then
							if "$XPROP" -id "$WINNAME" | grep "_NET_WM_STATE_HIDDEN" -q ;then
								MINIMIZEDWINDOWS="${MINIMIZEDWINDOWS} $WINNAME"
							else
								writelog "INFO" "${FUNCNAME[0]} - minimizing '$WINNAME'"
								"$XDO" "$WSTATE" "$WINNAME"
							fi
						elif [ "$WSTATE" == "windowraise" ]; then
							if grep -q "$WINNAME" <<< "$MINIMIZEDWINDOWS" ; then
								writelog "INFO" "${FUNCNAME[0]} - '$WINNAME' was already minimized - not raising it"
							else
								writelog "INFO" "${FUNCNAME[0]} - raising '$WINNAME'"
								"$XDO" "$WSTATE" "$WINNAME"
								# apparently sometimes windows don't raise although the command was executed ($XDO bug or executed too fast?)
								# so simply raising twice here
								"$XDO" "$WSTATE" "$WINNAME"
							fi
						fi
					fi
				done<<< "$("$WMCTRL" -l | cut -d ' ' -f1)"		
			else
				writelog "SKIP" "${FUNCNAME[0]} - '$WMCTRL' or '$XPROP' not found"
			fi
			
			if [ "$1" == "windowminimize" ]; then
				writelog "INFO" "${FUNCNAME[0]} - following windows won't be raised on exit, as they are minimized: '$MINIMIZEDWINDOWS'"
			elif [ "$2" == "windowraise" ]; then
				writelog "INFO" "${FUNCNAME[0]} - following windows were not raised, as they were minimized: '$MINIMIZEDWINDOWS'"
			fi
		fi
	fi
}

function checkWinetricksInstPak {
	if [ -n "$WINETRICKSPAKS" ] && [ "$WINETRICKSPAKS" != "none" ]; then
		if  [ -x "$(command -v "$WINETRICKS" 2>/dev/null)" ]; then
			IFS=" " read -r -a INSTWINETRICKSPAKS <<< "$WINETRICKSPAKS"
			WTLOG="$GPFX/winetricks.log"
			if [ ! -f "$WTLOG" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing '$WINETRICKSPAKS' silently with '$WINETRICKS'"
				# if everything goes well all packages are installed at once:
				extWine64Run "$WINETRICKS" --unattended "${INSTWINETRICKSPAKS[@]}"
			else
				NOTINSTALLEDLIST="$(comm -23 <(echo "${INSTWINETRICKSPAKS[*]}" | tr ' ' '\n' | sort) <(sort < "$WTLOG"))"
				NOTINSTALLED=()
				while IFS= read -r wp; do
					NOTINSTALLED+=("$wp")
				done <<< "$NOTINSTALLEDLIST"

				if [ -n "${NOTINSTALLED[0]}" ]; then
					writelog "INFO" "${FUNCNAME[0]} - installing following packages now: '${NOTINSTALLED[*]}'"
					extWine64Run "$WINETRICKS" --unattended "${NOTINSTALLED[@]}"
					# re-check here?
					# checkWinetricksInstPak
				else
					writelog "INFO" "${FUNCNAME[0]} - all packages of '$WINETRICKSPAKS' are already installed - nothing to do"
				fi
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - '$WINETRICKS' not found - skipping"
		fi
	fi
}

# start winetricks before game launch:
function checkWinetricksLaunch {
	# gui:
	if [ -n "$RUN_WINETRICKS" ]; then
		if [ "$RUN_WINETRICKS" -eq 1 ]; then
			if  [ -x "$(command -v "$WINETRICKS" 2>/dev/null)" ]; then
				writelog "INFO" "${FUNCNAME[0]} - launching '$WINETRICKS' before game start with following command line:"
				# several variables coming from steam have to be cleaned in order to get wine to work here
				writelog "INFO" "${FUNCNAME[0]} - '$WINETRICKS --gui'"
				extWine64Run "$WINETRICKS" --gui
			else
				writelog "SKIP" "${FUNCNAME[0]} - '$WINETRICKS' not found - skipping"
			fi
		fi
	fi
	# silent
	checkWinetricksInstPak
}

# start $WINECFG before game launch:
function checkWineCfgLaunch {
	if [ -n "$RUN_WINECFG" ]; then
		if [ "$RUN_WINECFG" -eq 1 ]; then
			if  [ -x "$(command -v "$WINECFG" 2>/dev/null)" ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting '$WINECFG' before game start:"
				# several variables coming from steam have to be cleaned in order to get wine to work here
				writelog "INFO" "${FUNCNAME[0]} - winecfg"
				extWine64Run "$WINECFG"
			else
				writelog "SKIP" "${FUNCNAME[0]} - command '$WINECFG' not found - skipping"
			fi
		fi
	fi
}

function regEdit {
	REGEDITCMD="regedit"
	if  [ -x "$(command -v "$REGEDITCMD" 2>/dev/null)" ]; then
		if [ -z "$1" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting $REGEDITCMD without arguments"
			extWine64Run "$REGEDITCMD"
		else
			writelog "INFO" "${FUNCNAME[0]} - starting $REGEDITCMD with argument $1"
			extWine64Run "$REGEDITCMD" "$1"
			writelog "INFO" "${FUNCNAME[0]} - disabling $REGEDITCMD in '$STLGAMECFG' - need a config to skip this?"
			updateConfigEntry "REGEDITCMD" "0" "$STLGAMECFG"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - command '$REGEDITCMD' not found - skipping"
	fi
}

function customRegs {
	if [ -n  "$VIRTUALDESKTOP" ]; then
		if [ "$VIRTUALDESKTOP" -eq 1 ]; then
			TEMPREG="/tmp/temp.reg"
			if [ -f "$TEMPREG" ]; then
				rm "$TEMPREG"
			fi

			if touch "$TEMPREG"; then
				writelog "INFO" "${FUNCNAME[0]} - VIRTUALDESKTOP is set to 1 - enabling virtual desktop"
				{
				echo "Windows Registry Editor Version 5.00"
				echo "[HKEY_CURRENT_USER\Software\Wine\Explorer]"
				echo "\"Desktop\"=\"Default\""
				echo "[HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]"
				echo "\"Default\"=\"$(xrandr | grep "\*" | awk '{print $1}')\""
				} >> "$TEMPREG"

				regEdit "$TEMPREG"

				if [ -f "$TEMPREG" ]; then
					rm "$TEMPREG"
				fi

			else
				writelog "SKIP" "${FUNCNAME[0]} - could not create '$TEMPREG' - skipping!"
			fi
		fi
	fi

	if [ "$REGEDIT" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - REGEDIT set, looking for '$AID' registry files"

		if [ "$(USEDLGLOBAL)" -ge 1 ];then
			AIDREG="$GLDLREGDIR/$AID.reg"
		else
			AIDREG="$GLOBALREGDIR/$AID.reg"
		fi

		if [ -f "$AIDREG" ]; then
			regEdit "$AIDREG"
		fi
		
		if [ -f "$STLREGDIR/$AID.reg" ]; then
			regEdit "$STLREGDIR/$AID.reg"
		fi
	else
		if [ "$REGEDIT" -ne 0 ]; then
		
			if [ "$(USEDLGLOBAL)" -ge 1 ];then
				AIDREG="$GLDLREGDIR/$REGEDIT"
			else
				AIDREG="$GLOBALREGDIR/$REGEDIT"
			fi

			if [ -f "$AIDREG" ]; then
				regEdit "$AIDREG"
			fi

			if [ -f "$STLREGDIR/$REGEDIT" ]; then
				regEdit "$STLREGDIR/$REGEDIT"		
			fi

			if [ ! -f "$AIDREG" ] && [ ! -f "$STLREGDIR/$REGEDIT" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - '$REGEDIT' neither found global nor local - skipping"
			fi
		fi
	fi
}

function useNyrna {
	if [ -n "$RUN_NYRNA" ]; then
		if [ "$RUN_NYRNA" -eq 1 ]; then
			if  [ -x "$(command -v "$NYRNA" 2>/dev/null)" ]; then
				if pgrep -f "$NYRNA" ; then
					writelog "SKIP" "${FUNCNAME[0]} - '$NYRNA' already running - skipping"
					RUN_NYRNA=0
				else
				writelog "INFO" "${FUNCNAME[0]} - starting '$NYRNA'"
				"$NYRNA" &
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - '$NYRNA' not found"
			fi
		fi
	fi
}

function useReplay {
	if [ -n "$RUN_REPLAY" ]; then
		if [ "$RUN_REPLAY" -eq 1 ]; then
			if  [ -x "$(command -v "$REPLAY" 2>/dev/null)" ]; then
				if pgrep -f "$REPLAY" ; then
					writelog "SKIP" "${FUNCNAME[0]} - '$REPLAY' already running - skipping"
					RUN_REPLAY=0
				else
				writelog "INFO" "${FUNCNAME[0]} - starting '$REPLAY'"
				"$REPLAY" &
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - '$REPLAY' not found"
			fi
		fi
	fi
}

# gameconqueror
function runGamCon {
	if [ -n "$RUN_GAMCON" ]; then
		if [ "$RUN_GAMCON" -eq 1 ]; then
			writelog "OK" "${FUNCNAME[0]} - starting '$GAMCON' process"

			if [ -n "$GAMCONWAITEXE" ] && [ "$GAMCONWAITEXE" != "$(which echo)" ]; then
				if [ -f "$GAMCONWAITEXE" ]; then
					writelog "OK" "${FUNCNAME[0]} - waiting for alternative '$GAMCONWAITEXE' process"
					while [ -z "$(pidof "$GAMCONWAITEXE" | cut -d ' ' -f1)" ]; do 
						writelog "WAIT" "${FUNCNAME[0]} - waiting for '$GAMCONWAITEXE' PID"
						sleep 1
					done
					GCGPID="$(pidof "$GAMCONWAITEXE" | cut -d ' ' -f1)"
				else
					writelog "SKIP" "${FUNCNAME[0]} - alternative '$GAMCONWAITEXE' defined but file doesn't exist - continuing with regular game exe"
					waitForGamePid
					GCGPID="$(GAMEPID)"
				fi
			else
				waitForGamePid
				GCGPID="$(GAMEPID)"
			fi
			
			writelog "INFO" "${FUNCNAME[0]} - game process found at '$GCGPID'"
			writelog "INFO" "${FUNCNAME[0]} - starting  '$GAMCON $GCGPID'"
			"$GAMCON" "$GCGPID"
		fi
	fi
}

# start gameconqueror
function checkGamConLaunch {
	if [ -n "$RUN_GAMCON" ]; then
		if [ "$RUN_GAMCON" -ge 1 ]; then
			if  [ -x "$(command -v "$GAMCON" 2>/dev/null)" ]; then
				# start the whole GamCon start/wait/stop/process
				writelog "OK" "${FUNCNAME[0]} - starting '$GAMCON' process for '$AID'"
				if [ "$RUN_GAMCON" -eq 1 ]; then
					runGamCon &
				elif [ "$RUN_GAMCON" -gt 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - RUN_GAMCON is greater than 1 - starting '$GAMCON' delayed for RUN_GAMCON '$RUN_GAMCON' seconds"
					( sleep "$RUN_GAMCON"; runGamCon) &
				else
					writelog "SKIP" "${FUNCNAME[0]} - ERROR - RUN_GAMCON is '$RUN_GAMCON' which is invalid - setting to 0"
					RUN_GAMCON=0
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - '$GAMCON' not found"
				RUN_GAMCON=0
			fi
		fi
	fi
}

function checkPulse {
	if [ "$CHANGE_PULSE_LATENCY" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - setting PULSE_LATENCY_MSEC to '$STL_PULSE_LATENCY_MSEC'"
		export PULSE_LATENCY_MSEC="$STL_PULSE_LATENCY_MSEC"
	fi
}

# Vortex:
function wineVortexRun {
	# leave LC_ALL=C else your "My Documents" will not be found!
	LC_ALL="C" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" DXVK_LOG_PATH="$VORTEX_DXVK_LOG_PATH" DXVK_LOG_LEVEL="$VORTEX_DXVK_LOG_LEVEL" WINE="$VORTEXWINE"  WINEARCH="win64" WINEDEBUG="$VORTEXWINEDEBUG" WINEPREFIX="${VORTEXPREFIX//\"/}" "$@"
}

function installVortexDeps {
	if  [ -x "$(command -v "$WINETRICKS" 2>/dev/null)" ]; then
		writelog "INFO" "${FUNCNAME[0]} - installing Vortex dependencies"

		VORTEXDEPS="win10 corefonts dotnet48 dxvk"
		IFS=" " read -r -a INSTVORTEXPAKS <<< "$VORTEXDEPS"
		WTLOG="${VORTEXPREFIX//\"/}/winetricks.log"

		if [ ! -f "$WTLOG" ]; then
			writelog "INFO" "${FUNCNAME[0]} - installing '$VORTEXDEPS' silently with $WINETRICKS"
			wineVortexRun "$WINETRICKS" --unattended "${INSTVORTEXPAKS[@]}"
			writelog "INFO" "${FUNCNAME[0]} - $VORTEXDEPS installed"
		else
			NOTINSTALLEDLIST="$(comm -23 <(echo "${INSTVORTEXPAKS[*]}" | tr ' ' '\n' | sort) <(sort < "$WTLOG"))"
			NOTINSTALLED=()
			while IFS= read -r wp; do
				NOTINSTALLED+=("$wp")
			done <<< "$NOTINSTALLEDLIST"

			if [ -n "${NOTINSTALLED[0]}" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing following packages now: '${NOTINSTALLED[*]}'"
					wineVortexRun "$WINETRICKS" --unattended "${NOTINSTALLED[@]}"
			else
				writelog "INFO" "${FUNCNAME[0]} - all packages of '$VORTEXDEPS' are already installed - nothing to do"
			fi
		fi
	else
			writelog "SKIP" "${FUNCNAME[0]} - $WINETRICKS not found - skipping Vortex dependency installation"
	fi
}

function cleanVortex {
	MSCOR="mscorsvw.exe"
	if pgrep "$MSCOR"; then
		writelog "INFO" "${FUNCNAME[0]} - killing leftovers of $MSCOR"
		pkill -9 "$MSCOR"
	fi
}

function setVortexDLMime {
	writelog "INFO" "${FUNCNAME[0]} - INFO: Linking Nexus Mods downloads to Vortex"

	VD="vortex-$PROGCMD-dl.desktop"
	FVD="$HOME/.local/share/applications/$VD"

	if [ ! -f "$FVD" ]; then
		writelog "INFO" "${FUNCNAME[0]} - creating new desktop file $FVD"
		{
		echo "[Desktop Entry]"
		echo "Type=Application"
		echo "Categories=Game;"
		echo "Name=Vortex ($PROGNAME - $PROGCMD)"
		echo "MimeType=x-scheme-handler/nxm;x-scheme-handler/nxm-protocol"
		echo "Terminal=false"
		echo "X-KeepTerminal=false"
		echo "Path=$(dirname "$VORTEXEXE")"
		echo "Exec=env LC_ALL=C WINEDEBUG=\"-all\" WINEPREFIX=\"${VORTEXPREFIX//\"/}\" \"$VORTEXWINE\" Vortex.exe -d %u"
		echo "NoDisplay=true"
		} >> "$FVD"
	else
		if grep -q "$VORTEXPREFIX" "$FVD"; then
			writelog "INFO" "${FUNCNAME[0]} - desktopfile $FVD seems to be up2date"
			return
		else
			writelog "INFO" "${FUNCNAME[0]} - renaming desktopfile $FVD and creating a new one for $PROGCMD"
			mv "$FVD" "$FVD-old"
			setVortexDLMime
		fi	
	fi

	# setting mime types for nxm
	XDGMIME="xdg-mime"

	if  [ -x "$(command -v "$XDGMIME" 2>/dev/null)" ]; then
		writelog "INFO" "${FUNCNAME[0]} - setting download defaults for nexusmod protocol via $XDGMIME pointing at $VD"
		"$XDGMIME" default "$VD" x-scheme-handler/nxm
		"$XDGMIME" default "$VD" x-scheme-handler/nxm-protocol
	else
		writelog "SKIP" "${FUNCNAME[0]} - $XDGMIME not found - couldn't set download defaults for nexusmod protocol - skipping"
	fi
}

function installVortex {
	writelog "OK" "${FUNCNAME[0]} - VORTEXINSTALL is set to 1 - trying to install Vortex into VORTEXPREFIX $VORTEXPREFIX"
	
	if [ -n "$VORTEXVERSION" ]; then
		writelog "OK" "${FUNCNAME[0]} - installing VORTEXVERSION $VORTEXVERSION"
		VORTEXSETUP="vortex-setup-$VORTEXVERSION.exe"
		VORTEXDLDIR="$STLDLDIR/Vortex"

		# download:
		if [ ! -d "$VORTEXDLDIR" ]; then
			mkdir -p "$VORTEXDLDIR" 2>/dev/null
		fi
		
		if [ ! -f "$VORTEXDLDIR/$VORTEXSETUP" ];then
			writelog "OK" "${FUNCNAME[0]} - downloading $VORTEXSETUP to $VORTEXDLDIR from $VORTEXURL$VORTEXVERSION/$VORTEXSETUP"
			if [ -n "$VORTEXURL" ]; then
				"$WGET" "$VORTEXURL$VORTEXVERSION/$VORTEXSETUP" -O "$VORTEXDLDIR/$VORTEXSETUP"
			fi

			if [ -f "$VORTEXDLDIR/$VORTEXSETUP" ];then
				writelog "OK" "${FUNCNAME[0]} - download succeeded - continuing installation"
			else
				return
			fi
		fi

		# install:
		writelog "OK" "${FUNCNAME[0]} - installing Vortex installation with into WINEPREFIX ${VORTEXPREFIX//\"/} with command $VORTEXWINE $VORTEXDLDIR/$VORTEXSETUP"

		wineVortexRun "$VORTEXWINE" "$VORTEXDLDIR/$VORTEXSETUP" /S
		writelog "OK" "${FUNCNAME[0]} - Vortex installation succeeded"
	else
		writelog "SKIP" "${FUNCNAME[0]} - no VORTEXVERSION defined - nothing to download - skipping"
	fi
}

function linkVortex {
	LNSRC="$1"
	LNDST="$2"
	
	if readlink "$LNDST" >/dev/null ; then
		writelog "OK" "${FUNCNAME[0]} - symlink $LNDST already exists"
		if [ "$(readlink "$LNDST")" == "$LNSRC" ]; then
			writelog "OK" "${FUNCNAME[0]} - symlink $LNDST already points to the correct directory $LNSRC"
		else
			writelog "OK" "${FUNCNAME[0]} - symlink $LNDST points to $(readlink "$LNDST") which is not the correct directory $LNSRC - renewing!"
			rm "$LNDST"
			ln -s "$LNSRC" "$LNDST"
		fi
	else
		if [ -d "$LNDST" ]; then
			writelog "OK" "${FUNCNAME[0]} - $LNDST is a real directory - renaming it to $LNDST-$(date +%y-%m-%d)"
			mv "$LNDST" "$LNDST-$(date +%y-%m-%d)"
		fi
		writelog "OK" "${FUNCNAME[0]} - symlink from '$LNSRC' to '$LNDST' does not exist yet - creating it now"
		ln -s "$LNSRC" "$LNDST"
	fi
}

function getVortexStage {
	if [ -z "$VORTEXSTAGING" ]; then
		WANTSTAGE="$1"
		mkdir "$WANTSTAGE" 2>/dev/null
		if [ -d "$WANTSTAGE" ]; then
			writelog "INFO" "${FUNCNAME[0]} - created dir '$WANTSTAGE' $PARTLOG"
			VORTEXSTAGING="$WANTSTAGE"
		fi
	fi 	
}

function setupGameVortex {

	if [ -d "$VORTEXINSTDIR" ]; then
		VBP="$VORTEXINSTDIR/resources/app.asar.unpacked/bundledPlugins"
		writelog "INFO" "${FUNCNAME[0]} - trying to find the Nexus GameID for the game '$GN ($AID)' in Vortex Install dir $VORTEXINSTDIR"

		SEARCH="$AID"
		if [ "$AID" == "22370" ]; then # Fallout 3 German is not detected by vortex
			SEARCH="22300"
		fi

		NEXUSGAMEFILE="$(grep -r -i "$SEARCH" "$VBP"/game-*/index.js | grep -i "steamAppId\|STEAM_ID" | grep -oE '^[^\:]+' | sort -u | head -n1)"

		if [ -n "$NEXUSGAMEFILE" ]; then
			if [ -f "$NEXUSGAMEFILE" ]; then
				writelog "INFO" "${FUNCNAME[0]} - found NEXUSGAMEFILE $NEXUSGAMEFILE for the game '$GN ($AID)'"

				if [ -n "$NEXUSGAMEID" ] ;then
					writelog "INFO" "${FUNCNAME[0]} - found Nexus GameID '$NEXUSGAMEID' for the game '$GN ($AID)' in game config"
				else
					NEXUSGAMEID="$(awk -F 'game-' '{print $2}' <<< "$(basename "$(awk -F '/index.js' '{print $1}' <<< "$NEXUSGAMEFILE")")")"
					if [ -n "$NEXUSGAMEID" ]; then
						writelog "OK" "${FUNCNAME[0]} - autodetected Nexus GameID '$NEXUSGAMEID' - adding it to the game config '$STLGAMECFG'"
						updateConfigEntry "NEXUSGAMEID" "$NEXUSGAMEID" "$STLGAMECFG"
						writelog "INFO" "${FUNCNAME[0]} - cut the Nexus GameID '$NEXUSGAMEID' for the game '$GN ($AID)' out of the filename '$NEXUSGAMEFILE'"
					fi
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - NEXUSGAMEFILE '$NEXUSGAMEFILE' is not a valid file"
				return
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - looks like the game '$GN ($AID)' is not supported in Vortex/Nexus, or autodetecting failed"
		fi
	else
		writelog "ERROR" "${FUNCNAME[0]} - Vortex Install dir '$VORTEXINSTDIR' not found - this shouldn't happen"
	fi


	# configure Game Specific Vortex Settings:
	if [ -n "$NEXUSGAMEID" ]; then

		# configure Vortex Download Dir:
		if [ -z "$VORTEXDOWNLOADPATH" ]; then
			VORTEXDOWNLOADPATH="$STLDLDIR"
			writelog "INFO" "${FUNCNAME[0]} - VORTEXDOWNLOADPATH was not set - set default to '$VORTEXDOWNLOADPATH'"
		fi

		if [ -n "$VORTEXDOWNLOADPATH" ]; then
			writelog "INFO" "${FUNCNAME[0]} - configuring $VORTEXDOWNLOADPATH as Vortex Download Path"

			if [ ! -d "$VORTEXDOWNLOADPATH" ]; then
				writelog "INFO" "${FUNCNAME[0]} - creating Vortex Download Dir '$VORTEXDOWNLOADPATH'"
				mkdir -p "$VORTEXDOWNLOADPATH"
			fi

			VDPF="$VORTEXDOWNLOADPATH/__vortex_downloads_folder"
			if [ ! -f "$VDPF" ]; then
				echo "{\"instance\":\"empty\"}" > "$VDPF"
			fi

			VORTEXDOWNLOADWINPATH="$(wineVortexRun "$VORTEXWINE" winepath -w "$VORTEXDOWNLOADPATH" | sed "s/\\\/\\\\\\\/g")"
			writelog "INFO" "${FUNCNAME[0]} - setting Vortex Download WinDir '$VORTEXDOWNLOADWINPATH' in Vortex"
			cd "$VORTEXINSTDIR" || return
			wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.downloads.path=true
			wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.downloads.path=\""$VORTEXDOWNLOADWINPATH"\"
			cd - || return
		fi

		# Game Settings:

		# autodiscover our "manual added" game
		GDNP="C:\\\Program Files (x86)\\\Steam\\\steamapps\\\common\\\\$GN"
		
		cd "$VORTEXINSTDIR" || return
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.gameMode.discovered."$NEXUSGAMEID".hidden=false
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.gameMode.discovered."$NEXUSGAMEID".path=true
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.gameMode.discovered."$NEXUSGAMEID".path=\""$GDNP"\"
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.activator."$NEXUSGAMEID"=true
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.activator."$NEXUSGAMEID"=\"hardlink_activator\"
		cd - || return

		if [ -f "$NEXUSGAMEFILE" ]; then
			if grep -q -E 'getPath.*documents' "$NEXUSGAMEFILE"; then
				writelog "INFO" "${FUNCNAME[0]} - found Modpath in $NEXUSGAMEFILE - creating it in '$GPFX'"
				# LOAD_ORDER_FILENAME exclude for witcher3
				GMODPATH="$(grep -E 'getPath.*documents' "$NEXUSGAMEFILE" | grep -v "LOAD_ORDER_FILENAME\|()" | awk -F ')\, ' '{print $NF}' |  awk -F ')' '{print $1}'  | sed "s:, :\/:g" | sed "s:'::g")"
				if [ -n "$SteamUserMyDocs" ] && [ -n "$GMODPATH" ]; then
					writelog "INFO" "${FUNCNAME[0]} - creating directory $SteamUserMyDocs/$GMODPATH"
					mkdir -p "$SteamUserMyDocs/$GMODPATH" 2>/dev/null
				fi
			fi

			# find matching Staging Directory:
			GAMEMP="$(df -P "$GP" | awk 'END{print $NF}')"
			writelog "INFO" "${FUNCNAME[0]} - mount point of partition where the game is installed: '$GAMEMP'"
			CONFSTAGE=""

			if [ -n "$VORTEXSTAGES" ]; then
			# TODO sanity checks in VORTEXSTAGES
				CONFSTAGE="$(grep -oE "$GAMEMP/[^\,]+" <<< "$VORTEXSTAGES")"
			fi

			if [ -n "$CONFSTAGE" ]; then
				if [ -d "$CONFSTAGE" ]; then
					writelog "INFO" "${FUNCNAME[0]} - configured VORTEXSTAGING dir found: '$CONFSTAGE'"
					VORTEXSTAGING="$CONFSTAGE"
				else
					writelog "ERROR" "${FUNCNAME[0]} - configured entry '$CONFSTAGE' found in VORTEXSTAGES, but this isn't a useable directory"
				fi
			fi

			if [ -z "$VORTEXSTAGING" ]; then
				if [ "$DISABLE_AUTOSTAGES" -eq 1 ]; then
					writelog "SKIP" "${FUNCNAME[0]} - VORTEXSTAGING is empty and you disabled autostages - skipping vortex"
					VORTEXMODE="disabled"
				else
					PARTLOG=" - using that as VORTEXSTAGING dir for all games on partition' $GAMEMP'"
					HOMEMP="$(df -P "$STLVORTEXDIR" | awk 'END{print $NF}')"
					writelog "INFO" "${FUNCNAME[0]} - HOMEMP is $HOMEMP and GAMEMP is $GAMEMP"

					# don't pollute base steam installation with a ~/.steam/steam/Vortex dir, so default to $STLVORTEXDIR/stageing
					if [ "$GAMEMP" == "$HOMEMP" ]; then	
						getVortexStage "$STLVORTEXDIR/staging"
					fi

					# try in base directory of the partition:
					getVortexStage "$GAMEMP/Vortex"

					# then try in the current SteamLibrary dir besides steamapps, as it should be writeable by the user and is unused from steam(?):
					getVortexStage "$(awk -F 'steamapps' '{print $1}' <<< "$GP")Vortex"

					# updating Vortex config with the new found VORTEXSTAGING dir:
					if [ -n "$VORTEXSTAGING" ]; then
						if ! grep -q "$VORTEXSTAGING" <<< "$VORTEXSTAGES"; then
							writelog "INFO" "${FUNCNAME[0]} - adding '$VORTEXSTAGING' to VORTEXSTAGES '$VORTEXSTAGES' in config '$STLVORTEXCFG'"
							updateConfigEntry "VORTEXSTAGES" "$VORTEXSTAGES,$VORTEXSTAGING" "$STLVORTEXCFG"
							sed "s:VORTEXSTAGES=,:VORTEXSTAGES=:" -i "$STLVORTEXCFG"
						fi
					fi
				fi
			fi

			if [ -z "$VORTEXSTAGING" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - no useable staging directory autodetected - giving up"
				VORTEXMODE="disabled"
			fi

			if [ -n "$VORTEXSTAGING" ]; then
				writelog "INFO" "${FUNCNAME[0]} - VORTEXSTAGING set to '$VORTEXSTAGING' - configuring '$NEXUSGAMEID' installPath"
				VGSGM="$VORTEXSTAGING/$NEXUSGAMEID/mods"

				writelog "INFO" "${FUNCNAME[0]} - creating Vortex Staging folder '$VGSGM'"
				mkdir -p "$VGSGM"

				VGSGMSF="$VGSGM/__vortex_staging_folder"
				if [ ! -f "$VGSGMSF" ]; then
					echo "{\"instance\":\"empty\",\"game\":\"NEXUSGAMEID\"}" > "$VGSGMSF"
				fi

				GAMESTAGINGWINFOLDER="$(wineVortexRun "$VORTEXWINE" winepath -w "$VGSGM" | sed "s/\\\/\\\\\\\/g")"
				writelog "INFO" "${FUNCNAME[0]} - setting Staging folder '$GAMESTAGINGWINFOLDER' in Vortex"

				cd "$VORTEXINSTDIR" || return
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.installPath."$NEXUSGAMEID"=true
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.installPath."$NEXUSGAMEID"=\""$GAMESTAGINGWINFOLDER"\"
				cd - || return

			fi

			# search registry install path in NEXUSGAMEFILE
			if grep -E 'instPath.*winapi.RegGetValue' "$NEXUSGAMEFILE" -A1 | grep "HKEY_LOCAL_MACHINE" -q ; then
				writelog "INFO" "${FUNCNAME[0]} - found some instPath registry value in '$NEXUSGAMEFILE' - trying to extract it"
				REGKEY=""
				PATHKEY=""

				# would as well work in a loop for all index.js files, but better just take those which are actually need:
				RAWREG="$(grep -E 'instPath.*winapi.RegGetValue' "$NEXUSGAMEFILE" -A3 | tr -d "\n\r" | awk -F 'RegGetValue' '{print $2}' | cut -d';' -f1  | tr -s " " | sed "s:^(::g" | sed "s:)$::g" | sed  's/, /,/g' | awk '{$1=$1;print}')"
				
				if [ -n "$RAWREG" ]; then
					writelog "INFO" "${FUNCNAME[0]} - analyzing found registry snipplet '$RAWREG'"

					if grep -q "HKEY" <<< "$RAWREG"; then
						writelog "INFO" "${FUNCNAME[0]} - found a HKEY entry: '$RAWREG' - working on it"
						SNIP="','S" # :)
						REGWIP1="${RAWREG//HINE$SNIP/HINE\\S}"
						REGWIP="${REGWIP1//T_USER','S/T_USER\\\\S}"
						
						writelog "INFO" "${FUNCNAME[0]} - REGWIP is '$REGWIP'"

						REGWIPKEY="$(awk -F ',' '{print $1}' <<< "$REGWIP" | sed "s:'::g")"
						PATHKEY="$(awk -F ',' '{print $2}' <<< "$REGWIP" | sed "s:'::g")"

						if grep -q -i "WOW6432Node" <<< "$REGWIPKEY"; then
							writelog "INFO" "${FUNCNAME[0]} - squeezing in a 'WOW6432Node' into the '$REGWIPKEY' string, to make the generic function checkVortexRegs happy"
							REGKEY="${REGWIPKEY/[Ss][Oo][Ff][Tt][Ww][Aa][Rr][Ee]/Software\\\\\\WOW6432Node}"
						else
							REGKEY="$REGWIPKEY"
						fi

						writelog "INFO" "${FUNCNAME[0]} - final REGKEY is '$REGKEY'"

					else
						if grep -q "hive" <<< "$RAWREG"; then
							writelog "INFO" "${FUNCNAME[0]} - found a hive, key, name placeholder - required?"
						else
							writelog "SKIP" "${FUNCNAME[0]} - no valid registry found in cut entry '$RAWREG' - skipping"
						fi
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - haven't found any useable registry entries in '$NEXUSGAMEFILE' - skipping registry insert"
				fi

				# insert registry key when found:
				if [ -n "$REGKEY" ] && [ -n "$PATHKEY" ]; then
					writelog "INFO" "${FUNCNAME[0]} - inserting registry key '$REGKEY' '$PATHKEY'"
					checkVortexRegs "$REGKEY" "$PATHKEY"
				else
					writelog "SKIP" "${FUNCNAME[0]} - REGKEY '$REGKEY' or PATHKEY '$PATHKEY' is empty - skipping registry insert"
				fi
			fi

			# create custom paths in "$GPFX" so symlinks can already be created
			customVortexGameSettings

		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - NEXUSGAMEID is empty - skipping automatic adding game '$GN ($AID)' to Vortex"
	fi
}

function precustomVortexGameDirs {
	
	if [ "$AID" == "$1" ]; then

		CDIR="$SteamUserDir/$MyDocsMyGames/$2"
		if [ ! -d "$CDIR" ]; then
			mkdir -p "$CDIR" 2>/dev/null
			writelog "INFO" "${FUNCNAME[0]} - created dir '$CDIR'"
		fi

		CADGDIR="$SteamUserDir/Local Settings/Application Data/$2"
		if [ ! -d "$CADGDIR" ]; then
			mkdir -p "$CADGDIR" 2>/dev/null
			writelog "INFO" "${FUNCNAME[0]} - created dir '$CADGDIR'"
		fi
	fi
}

function customVortexGameSettings {
	precustomVortexGameDirs "377160" "${GN// /}"		# Fallout4
	precustomVortexGameDirs "611660" "${GN// /}"		# Fallout4 VR
	precustomVortexGameDirs "611670" "${GN//VR/ VR}"	# Skyrim VR
	precustomVortexGameDirs "489830" "$GN"				# Skyrim Special Edition
	precustomVortexGameDirs "72850" "$GN"				# Skyrim
	precustomVortexGameDirs "933480" "$GN"				# Enderal
	precustomVortexGameDirs "22300" "${GN// /}"			# Fallout 3
	precustomVortexGameDirs "22370" "${GN// /}"			# Fallout 3 GOTY
	precustomVortexGameDirs "22380" "FalloutNV"			# Fallout New Vegas 
	precustomVortexGameDirs "22330" "$GN"				# Oblivion

	# Fallout3 symlink:
	if [ "$AID" == "22370" ]; then
		FOGDIR="$SteamUserDir/Local Settings/Application Data/Fallout3goty"
		if [ ! -d "$FOGDIR" ]; then
			mkdir -p "$FOGDIR" 2>/dev/null
		fi

		if [ -d "$FOGDIR" ]; then
			ln -s "$FOGDIR" "${FOGDIR//goty/}"
			ln -s "$UserLocalSetAppData/Fallout3goty" "$UserLocalSetAppData/Fallout3"
		fi
	fi
}

function startVortex {
	if [ -z "$VORTEXWINE" ]; then
		initVortexStuff
	fi

	if [ -f "$VORTEXEXE" ]; then
		writelog "OK" "${FUNCNAME[0]} - starting Vortex now with command '$VORTEXWINE $VORTEXEXE --game $NEXUSGAMEID' in WINEPREFIX '${VORTEXPREFIX//\"/}'"
		if [ "$VORTEXMODE" == "normal" ]; then
			setVortexDLMime
		fi

		if [ -n "$NEXUSGAMEID" ]; then
			cd "$VORTEXINSTDIR" || return
			wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --game "$NEXUSGAMEID"
			cd - || return
		else
			if [ "$1" == "getset" ]; then
				writelog "OK" "${FUNCNAME[0]} - showing settings as requested"
				cd "$VORTEXINSTDIR" || return
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --get settings
				cd - || return
			else
				writelog "OK" "${FUNCNAME[0]} - starting Vortex without options"
				cd "$VORTEXINSTDIR" || return
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE"
				cd - || return
			fi
		fi

		cleanVortex
		if [ "$AID" != "$PROGCMD" ]; then
			checkVortexSELaunch 2
		fi

		if [ "$VORTEXMODE" == "quickstart" ]; then
			if [ "$AID" != "$PROGCMD" ]; then
				writelog "OK" "${FUNCNAME[0]} - vortex exited - Vortex is in editor only mode '$VORTEX' so leaving and going back to steam now"
			fi
			exit
		else
			writelog "OK" "${FUNCNAME[0]} - vortex exited - starting game now"
		fi
	else
		writelog "ERROR" "${FUNCNAME[0]} - $VORTEXEXE not found! - exit"
		exit
	fi
}

function checkVortexRegs {
	# this is a bit of a mess - not 100% sure if we always should use wine64 for adding non-"Wow6432Node" keys, so querying the Wow6432Node key and adding the non-"Wow6432Node" key
	# in very rare cases the non-"Wow6432Node" key is searched in the registry - f.e. witcher 3, so additionally adding every key using wine64  - probably shouldn't be a problem(?)

	REGKEY="$1"
	REG32KEY="${REGKEY//\\Wow6432Node\\/}"

	if [ -n "$2" ]; then
		PATHKEY="$2"
	else
		PATHKEY="Installed Path"
	fi

	if [ -n "$3" ]; then
		INSTP="$3"
	else
		INSTP="C:\\Program Files (x86)\\Steam\\steamapps\\common\\$GN"
	fi

	writelog "OK" "${FUNCNAME[0]} - checking RegKey '$REGKEY' and updating RegKey '$REG32KEY' in registry for game '$GN ($AID)' now"

	# check if registry path exists:
	
	if wineVortexRun "$VORTEXWINE" reg QUERY "$REGKEY" >/dev/null ; then
		writelog "INFO" "${FUNCNAME[0]} - registry path $REGKEY already set"
		# value of the currently set registry path:
		REGPATH="$(wineVortexRun "$VORTEXWINE" reg QUERY "$REGKEY" | grep -i "$PATHKEY" | awk -F 'REG_SZ' '{print $NF}' | awk '{$1=$1};1' | tr -d "\n\r")"
		WSACPATH="$(SteamAppsCommonRelativeW=${SteamAppsCommonRelative//drive_c/C:}; echo "${SteamAppsCommonRelativeW//\//\\}"\\"$GN")"

		if [ "$REGPATH" == "$WSACPATH" ]; then
			writelog "OK" "${FUNCNAME[0]} - the registry entry '$REGPATH' is identical to the gamepath '$WSACPATH'"
		else
			writelog "WARN" "${FUNCNAME[0]} - the registry entry '$REGPATH' is not equal to gamepath '$WSACPATH' - resetting registry to '$WSACPATH'"
			# remove old outdated registry path:
			wineVortexRun "$VORTEXWINE" reg DELETE "$REGKEY" /f >/dev/null
			# add new registry path:
			writelog "NEW" "${FUNCNAME[0]} - registry path '$REGKEY' removed - recreating '$PATHKEY' entry for '$INSTP'"
			wineVortexRun "$VORTEXWINE" reg ADD "$REG32KEY" /f /t "REG_SZ" /v "$PATHKEY" /d "$INSTP" /f
		fi						
	else
		writelog "NEW" "${FUNCNAME[0]} - registry path '$REGKEY' does not exist - creating '$PATHKEY' entry for '$INSTP'"
		# add new registry path:
		wineVortexRun "$VORTEXWINE" reg ADD "$REG32KEY" /f /t "REG_SZ" /v "$PATHKEY" /d "$INSTP"
		VORTEXWINE64="${VORTEXWINE//wine/wine64}"

		if  [ -x "$(command -v "$VORTEXWINE64" 2>/dev/null)" ]; then
			writelog "NEW" "${FUNCNAME[0]} - adding the same entry using wine64"
			wineVortexRun "$VORTEXWINE64" reg ADD "$REG32KEY" /f /t "REG_SZ" /v "$PATHKEY" /d "$INSTP"
		fi
	fi
}

function setVortexSELaunch {

	# Script Extender is currently broken in proton, so checking if a patched proton is used
	# https://github.com/ValveSoftware/Proton/issues/170

	if [ "$3" -ne 0 ]; then
		if [ "$1" == "$AID" ];then
			SEEXE="$EFD/$2"
			if [ -f "$SEEXE" ];then
				writelog "INFO" "${FUNCNAME[0]} - found special exe '$2' for '$GN ($AID)' in gamedir '$EFD'"

				if [ "$SKIPCHECKPATCHEDPROTON" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} - SKIPCHECKPATCHEDPROTON set - starting '$SEEXE' instead of the game exe directly after this Vortex instance without any proton checks"
						CUSTOMCMD="$SEEXE"
						RUN_CUSTOMCMD=1
						ONLY_CUSTOMCMD=1
				else
					PROTOLADLURL="$PROTOLAURL/download/$PROTOLAVER/$PROTOLAVER.tar.gz"
					PROTOLADL="$PROTOLADLDIR/$PROTOLAVER.tar.gz"	

					if ! grep -q "protola" <<< "$PROTONVERSION"; then

						writelog "BUG" "${FUNCNAME[0]} - the current proton version is not compatible with $2"
						writelog "BUG" "${FUNCNAME[0]} - you might want to use a custom proton version from $PROTOLAURL instead!"

						mkProjDir "$PROTOLADLDIR" 1
				
						if [ -d "$STEAMCOMPATOOLS/$PROTOLAVER" ]; then	

							"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed -undecorated \
							--title="Proton Version not Script Extender compatible" \
							--field="Using '$PROTONVERSION' which is not compatible with '$2'\nYou already have the compatible proton version lying under '$STEAMCOMPATOOLS/$PROTOLAVER'\nJust select it in Steam as compatibility tool for '$GN'":LBL \
							--field="<span font=\"italic\">Click Exit to exit now, click play to start game without Script Extender</span>":LBL \
							--field="":LBL "" \
							--button="PLAY":0  \
							--button="EXIT":1  \
							--timeout="$PROTOLAREQ" \
							--timeout-indicator=top
							case $? in
								0) writelog "INFO" "${FUNCNAME[0]} - selected PLAY - starting game without Script Extender compatible '$PROTONVERSION'"
								;;
								1)  writelog "INFO" "${FUNCNAME[0]} - selected EXIT - exiting"
									exit
								;;
								70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - starting game"
								;;
							esac
						else 
							if [ -f "$PROTOLADL" ]; then
								"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed --undecorated \
								--width=800 \
								--title="Proton Version not Script Extender compatible" \
								--field="Compatible proton '$PROTOLAVER' already downloaded to '$PROTOLADL'\nYou have to install it to '$STEAMCOMPATOOLS' with steam closed to use it":LBL \
								--field="<span font=\"italic\">Click Install to extract '$PROTOLADL' to '$STEAMCOMPATOOLS' (at your own risk!)\nClick play to start game without Script Extender</span>":LBL \
								--button="PLAY":0  \
								--button="INSTALL":1  \
								--timeout="$PROTOLAREQ" \
								--timeout-indicator=top
								case $? in
									0)  writelog "INFO" "${FUNCNAME[0]} - selected PLAY - starting game without Script Extender compatible '$PROTONVERSION'"
									;;
									1)  writelog "INFO" "${FUNCNAME[0]} - selected INSTALL - installing '$PROTOLADL'"
										tar xf "$PROTOLADL" -C "$STEAMCOMPATOOLS"
										setVortexSELaunch "$1" "$2" "$3"
									;;
									70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - starting game"
									;;
								esac
							else
								"$YAD" --borders=30 --window-icon=gtk-yes --form --center --on-top --fixed --undecorated \
								--title="Proton Version not Script Extender compatible" \
								--field="$PROTONVERSION' is not compatible with '$2'\nDownload compatible proton '$PROTOLAVER' to '$PROTOLADL?\nYou should stop steam then and install the package manually to '$STEAMCOMPATOOLS' to make it available.\nWill re-check again when download is finished.":LBL \
								--field="<span font=\"italic\">Click play to start game without download</span>":LBL \
								--button="PLAY":0  \
								--button="INSTALL":1  \
								--timeout="$PROTOLAREQ" \
								--timeout-indicator=top
								case $? in
									0)  writelog "INFO" "${FUNCNAME[0]} - selected PLAY - starting game without Script Extender compatible '$PROTONVERSION'"
									;;
									1)  writelog "INFO" "${FUNCNAME[0]} - selected INSTALL - Downloading '$PROTOLADL'"
										"$WGET" "$PROTOLADLURL" -O "$PROTOLADL"
										setVortexSELaunch "$1" "$2" "$3"
									;;
									70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - starting game"
									;;
								esac
							fi
						fi

					else
						if [ "$3" -eq 1 ]; then
							writelog "INFO" "${FUNCNAME[0]} - preparing start of special exe '$2'"

							if grep -q "protola" <<< "$PROTONVERSION"; then
								CUSTOMCMD="$SEEXE"
								RUN_CUSTOMCMD=1
								ONLY_CUSTOMCMD=1
							fi
						fi

						if [ "$3" -eq 2 ]; then
							if grep -q "protola" <<< "$PROTONVERSION"; then
								writelog "INFO" "${FUNCNAME[0]} - configuring default start of special exe '$2' by enabling SELAUNCH in '$STLGAMECFG'"
								updateConfigEntry "SELAUNCH" "1" "$STLGAMECFG"
								writelog "INFO" "${FUNCNAME[0]} - starting $SEEXE instead of the game exe directly after this Vortex instance"
								CUSTOMCMD="$SEEXE"
								RUN_CUSTOMCMD=1
								ONLY_CUSTOMCMD=1
							fi
						fi
					fi
				fi
			else
				if [ "$3" -eq 1 ]; then
					writelog "SKIP" "${FUNCNAME[0]} - special exe '$2' for '$GN ($AID)' not found in gamedir '$EFD' - starting normal exe"
				fi

				if [ "$3" -eq 2 ]; then
					writelog "SKIP" "${FUNCNAME[0]} - special exe '$2' for '$GN ($AID)' not found in gamedir '$EFD' - not enabling SELAUNCH in '$STLGAMECFG'"
				fi
			fi
		fi
	fi
}

function checkVortexSELaunch {
	# (mostly for Vortex) if $1 is 1 check if a preconfigured exe instead of the game is defined/found - f.e. script extender for skyrim, fallout etc
	# if $2 is 2 check if a preconfigured exe instead of the game is defined/found and enable using it in '$STLGAMECFG'
	if [ -z "$1" ]; then
		SECHECK="2"
	else
		SECHECK="$1"
	fi
	
	if [ "$SECHECK" -eq 2 ] && [ "$SELAUNCH" -eq 1 ]; then
		writelog "SKIP" "${FUNCNAME[0]} - skipping option $SECHECK because SELAUNCH is already enabled"
	else
		setVortexSELaunch "377160" "f4se_loader.exe" "$SECHECK" # Fallout4
		setVortexSELaunch "611660" "f4sevr_loader.exe" "$SECHECK"	# Fallout4 VR
		setVortexSELaunch "611670" "sksevr_loader.exe" "$SECHECK" # Skyrim VR
		setVortexSELaunch "489830" "skse64_loader.exe" "$SECHECK" # Skyrim Special Edition
		setVortexSELaunch "72850" "skse_loader.exe" "$SECHECK"	# Skyrim
		setVortexSELaunch "933480" "skse_loader.exe" "$SECHECK"	# Enderal
		setVortexSELaunch "22300" "fose_loader.exe" "$SECHECK"	# Fallout 3
		setVortexSELaunch "22370" "fose_loader.exe" "$SECHECK"	# Fallout 3 GOTY
		setVortexSELaunch "22380" "nvse_loader.exe" "$SECHECK"	# Fallout New Vegas 
		setVortexSELaunch "22330" "obse_loader.exe" "$SECHECK"	# Oblivion
	fi
}

function installVortexPack {
	installVortexDeps
	installVortex
	setVortexDLMime
}

function initVortexStuff {
	saveCfg "$STLVORTEXCFG" X
	
	if [ -f "$STLVORTEXCFG" ]; then
		loadCfg "$STLVORTEXCFG"
	fi

	if [ "$VORTEXMODE" == "normal" ] || [ "$VORTEXMODE" == "quickstart" ] || [ "$VORTEXMODE" == "editormode" ]; then

		if [ -z "$VORTEXWINE" ] || [ ! -f "$VORTEXWINE" ]; then
			writelog "OK" "${FUNCNAME[0]} - no wine binary configured in variable VORTEXWINE or file in variable VORTEXWINE '$VORTEXWINE' not found - autodetecting wine"
			if [ -n "$GWINE" ]; then
				writelog "OK" "${FUNCNAME[0]} - using GWINE '$GWINE' as VORTEXWINE"
				VORTEXWINE="${GWINE//\"/}"
			else
				if  [ -x "$(command -v "$(which wine)" 2>/dev/null)" ]; then
					writelog "OK" "${FUNCNAME[0]} - using '$(which wine)' as VORTEXWINE"
					VORTEXWINE="$(which wine)"
				else
					writelog "SKIP" "${FUNCNAME[0]} - can't find a usable wine binary for VORTEXWINE - skipping"
					VORTEXMODE="disabled"
				fi
			fi
		fi

		VORTEXINSTDIR="${VORTEXPREFIX//\"/}/drive_c/Program Files/Black Tree Gaming Ltd/Vortex"
		VORTEXEXE="$VORTEXINSTDIR/Vortex.exe"
	fi
}
	
function installVortexFull {
	AID="vortex-installation"
	LOGLEVEL=2
	mkProjDir "$LOGDIR" 1
	writelog "OK" "${FUNCNAME[0]} - starting full Vortex install"
	VORTEXMODE="normal"

	initVortexStuff

	installVortexPack
	writelog "OK" "${FUNCNAME[0]} - full Vortex installation finished"
	exit
}

function checkVortex {

	initVortexStuff

	if [ "$VORTEXMODE" == "disabled" ] ; then
		writelog "SKIP" "${FUNCNAME[0]} -  Vortex is disabled"
	elif [ "$VORTEXMODE" == "normal" ] ; then
		writelog "OK" "${FUNCNAME[0]} - default VORTEX mode '$VORTEX' is set"
		writelog "OK" "${FUNCNAME[0]} -VORTEXWINE is $VORTEXWINE"

		# checking WINEPREFIX for Vortex:
		if [ -n "$VORTEXPREFIX" ]; then
			mkdir -p "${VORTEXPREFIX//\"/}" 2>/dev/null
			if [ -d "${VORTEXPREFIX//\"/}" ]; then
				writelog "OK" "${FUNCNAME[0]} - VORTEXPREFIX is defined to '$VORTEXPREFIX' and the directory exists"

				# checking for Vortex.exe:
				if [ -f "$VORTEXEXE" ]; then
					writelog "OK" "${FUNCNAME[0]} - VORTEXEXE '$VORTEXEXE' exists"

					# creating some required directories in VORTEXPREFIX:
					SteamAppsCommonRelative="drive_c/Program Files (x86)/Steam/steamapps/common"
					VortexSteamAppsCommon="${VORTEXPREFIX//\"/}/$SteamAppsCommonRelative"

					writelog "OK" "${FUNCNAME[0]} - creating subdirectories in '$VORTEXPREFIX' if missing"

					if [ ! -d "$VortexSteamAppsCommon" ]; then
						writelog "OK" "${FUNCNAME[0]} - creating directory $VortexSteamAppsCommon"
						mkdir -p "$VortexSteamAppsCommon"
					fi
					MyDocs="My Documents"
					MyDocsMyGames="$MyDocs/My Games"
					LocalSetAppData="Local Settings/Application Data"
					
					if [ -d "${VORTEXPREFIX//\"/}/drive_c/users/steamuser" ];then
						writelog "OK" "${FUNCNAME[0]} - Vortex is running with Proton wine - configuring for user 'steamuser'"
						VUSER="steamuser"
					else
						writelog "OK" "${FUNCNAME[0]} - Vortex is running with regular wine - configuring for user '$USER'"
						VUSER="$USER"
					fi
					
					UserMyDocs="${VORTEXPREFIX//\"/}/drive_c/users/$VUSER/$MyDocs"
					UserMyDocsMyGames="${VORTEXPREFIX//\"/}/drive_c/users/$VUSER/$MyDocsMyGames"
					UserLocalSetAppData="${VORTEXPREFIX//\"/}/drive_c/users/$VUSER/$LocalSetAppData"
					
					if readlink "$UserMyDocsMyGames" >/dev/null ; then
						writelog "OK" "${FUNCNAME[0]} - removing symlink '$UserMyDocsMyGames' pointing to '$(readlink "$UserMyDocsMyGames")'"
						rm "$UserMyDocsMyGames"
					fi

					if readlink "$UserLocalSetAppData" >/dev/null ; then
						writelog "OK" "${FUNCNAME[0]} - removing symlink '$UserLocalSetAppData' pointing to '$(readlink "$UserLocalSetAppData")'"
						rm "$UserLocalSetAppData"
					fi
					
					mkdir -p "$UserMyDocsMyGames" 2>/dev/null
					mkdir -p "$UserLocalSetAppData" 2>/dev/null

					# game specific part:
					writelog "OK" "${FUNCNAME[0]} - preparing required registry and path settings for '$GFD' and '$GN ($AID)'"

					if [ -d "$GPFX" ] || [ -z "$(ls -A "$GPFX")" ]; then
						writelog "OK" "${FUNCNAME[0]} - original game WINEPREFIX $GPFX is not empty, so assuming it is useable"

						# checking symlinks:
						linkVortex "$GFD" "$VortexSteamAppsCommon/$GN"

						STUSER="steamuser"
						SteamUserDir="$GPFX/drive_c/users/$STUSER"
						
						SteamUserMyDocs="$SteamUserDir/$MyDocs"

						setupGameVortex

						# My Documents:
						while read -r dir; do
							writelog "OK" "${FUNCNAME[0]} - creating symlink from '$dir' to '$UserMyDocs'"
							linkVortex "$dir" "$UserMyDocs/$(basename "$dir")"
						done <<< "$(find "$SteamUserMyDocs" -mindepth 1 -maxdepth 1 -type d | grep -v 'Music$\|Templates$\|Downloads$\|Pictures$\|Games$\|Videos$')"

						# My Games:
						SteamUserMyDocsMyGames="$SteamUserDir/$MyDocsMyGames"
						while read -r dir; do
							writelog "OK" "${FUNCNAME[0]} - creating symlink 'from' $dir to '$UserMyDocsMyGames'"
							linkVortex "$dir" "$UserMyDocsMyGames/$(basename "$dir")"
						done <<< "$(find "$SteamUserMyDocsMyGames" -mindepth 1 -maxdepth 1 -type d)"

						# Application Data:
						SteamUserLocalSetAppData="$SteamUserDir/$LocalSetAppData"
						while read -r dir; do
							writelog "OK" "${FUNCNAME[0]} - creating symlink from '$dir' to '$UserLocalSetAppData'"
							linkVortex "$dir" "$UserLocalSetAppData/$(basename "$dir")"
						done <<< "$(find "$SteamUserLocalSetAppData" -mindepth 1 -maxdepth 1 -type d | grep -v 'Microsoft\|openvr')"			

						# registry:
						checkVortexRegs "HKEY_LOCAL_MACHINE\\Software\\\Wow6432Node\\\Valve\\\Steam\\\Apps\\$AID"

						# symlinks and registry entries should be ready at this point for vortex
						writelog "OK" "${FUNCNAME[0]} - symlinks and registry entries should be ready at this point for Vortex"

						# start Vortex:
						startVortex
					else
						writelog "SKIP" "${FUNCNAME[0]} -  original game $WINEPREFIX $GPFX does not exist or is empty - skipping Vortex and starting the game now once to create it!"
					fi

				# Vortex is not installed
				else
					writelog "WARN" "${FUNCNAME[0]} - VORTEXEXE $VORTEXEXE does not exist"
					if [ "$VORTEXINSTALL" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} - VORTEXINSTALL is set to 1 so installing it now"
						writelog "INFO" "${FUNCNAME[0]} - running through all setup steps, even if some might be not required at this point:"
						installVortexPack
						writelog "INFO" "${FUNCNAME[0]} - Vortex was hopefully installed correctly - retrying to start it"
						checkVortex
					else
						writelog "SKIP" "${FUNCNAME[0]} - VORTEXINSTALL is set to 0 - skipping Vortex"
					fi
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} -  VORTEXPREFIX is defined to '$VORTEXPREFIX' but the directory does not exist - skipping"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - but VORTEXPREFIX is not defined - skipping"
		fi
	elif [ "$VORTEXMODE" == "quickstart" ]; then
			writelog "OK" "${FUNCNAME[0]} - quick VORTEX mode '$VORTEX' is set"
			startVortex
	elif [ "$VORTEXMODE" == "editormode" ]; then
			writelog "OK" "${FUNCNAME[0]} - editor only VORTEX mode '$VORTEX' is set"
			startVortex
	fi
}

function checkDep {
	CATNAM="$1"
	CHECKPROG="$2"

	if [ "${!CATNAM}" -eq 1 ]; then
		if  [ ! -x "$(command -v "$(which "$CHECKPROG" 2>/dev/null)" 2>/dev/null)" ]; then
			writelog "WARN" "${FUNCNAME[0]} - disabling '$CATNAM' because '$CHECKPROG' is missing"
			unset "$CATNAM"
		fi
	fi
}

function checkDeps {

	checkDep "USEGAMEMODERUN" "$GAMEMODERUN"
	checkDep "USEGAMESCOPE" "$GAMESCOPE"
	checkDep "RUN_NYRNA" "$NYRNA"
	checkDep "STRACERUN" "$STRACE"
	checkDep "RUN_WINETRICKS" "$WINETRICKS"
	checkDep "RUN_REPLAY" "$REPLAY"
	checkDep "TOGGLEWINDOWS" "$WMCTRL"
	checkDep "TOGGLEWINDOWS" "$XPROP"

	if [ ! -x "$(command -v "$YAD" 2>/dev/null)" ]; then
		writelog "WARN" "${FUNCNAME[0]} - '$YAD' not found - it is almost a hard dependency, but not forcing an exit here"
	fi
}

#####################################################
### CORE LAUNCH START ###

function setLinGameVals {
	if [ -z "$STEAM_COMPAT_DATA_PATH" ]; then
		writelog "INFO" "${FUNCNAME[0]} - looks like this is a native linux game - disabling some values which are only useful for win games"
		VORTEXMODE="disabled"
		IGNOREAUTOTWEAKS=1
		WINETRICKSPAKS="none"
		RUN_WINETRICKS="0"
		RUN_WINECFG="0"
		REGEDIT="0"
		VIRTUALDESKTOP="0"
		ATADOPT="0"	
		USERESHADE="0"
		INSTALL_RESHADE="0"
	fi
}

function launchSteamGame {

	if [ -f "$LOGDIR/$AID.log" ]; then
		rm "$LOGDIR/$AID.log"
	fi

	createProjectDirs

	saveCfg "$STLDEFGLOBALCFG" X
	loadCfg "$STLDEFGLOBALCFG" X

	writelog "START" "######### Game Launch: $GN ($AID) #########"

	createDefaultCfgs X

	checkSTLDLGlobal
	writelog "INFO" "${FUNCNAME[0]} - game launch args '$*'"
	writelog "INFO" "${FUNCNAME[0]} - gamedir '$GFD'"
	writelog "INFO" "${FUNCNAME[0]} - wineprefix '$GPFX'"
	writelog "INFO" "${FUNCNAME[0]} -------------------"
	writelog "INFO" "${FUNCNAME[0]} - createGameCfg:"
	createGameCfg "$@"

	writelog "INFO" "${FUNCNAME[0]} - askSettings:"
	askSettings

	#  in case a path changed in between, call createProjectDirs again:
	writelog "INFO" "${FUNCNAME[0]} - createProjectDirs:"
	createProjectDirs

	# auto generate autotweak configs if supported external platform is listed in AUTOTWEAKS
	autoGenTweak

	# load chosen Auto Tweak Config

	if [ -n "$LOADAUTOCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - loading Auto Tweak config '$LOADAUTOCFG'"
		loadCfg "$LOADAUTOCFG"
	fi

	# export game specific variables, exports die with this script, so no worries:
	writelog "INFO" "${FUNCNAME[0]} - exporting game specific variables"
	writelog "INFO" "${FUNCNAME[0]} - loadCfg:"
	loadCfg "$STLGAMECFG"

	# export DXVK_CONFIG_FILE if STLDXVKCFG was found:
	if [ -f "$STLDXVKCFG" ]; then
		export DXVK_CONFIG_FILE="$STLDXVKCFG"
	fi

	# autoapply configuration settings based on the steam categories the game is in:

	writelog "INFO" "${FUNCNAME[0]} - autoCategorySettings:"
	autoCategorySettings

	# shortcut to enable all required flags for SBSVR with vkbasalt
	if [ -n "$SBSVRVK" ]; then
		if [ "$SBSVRVK" -eq 1 ]; then
			writelog "INFO" " $PROGNAME - SBSVRVK enabled - starting game in SBS-VR using vkbasalt"
			export RUNSBSVR=1
			export ENABLE_VKBASALT=1
			export SBSVRRS=0
			export USERESHADE=0
		fi
	fi
	
	# shortcut to enable all required flags for SBSVR with ReShade
	if [ -n "$SBSVRRS" ]; then
		if [ "$SBSVRRS" -eq 1 ]; then
			writelog "INFO" " $PROGNAME - SBSVRRS enabled - starting game in SBS-VR using ReShade"
			export RUNSBSVR=1
			export INSTALL_RESHADE=1
			export RESHADE_DEPTH3D=1
			export USERESHADE=1
			export SBSVRVK=0
			export ENABLE_VKBASALT=0
		fi
	fi

	# notifier:
	if [ "$USENOTIFIER" -eq 1 ]; then
		if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
			"$NOTY" "Steam Tinker Launch started"
		fi
	fi
####

	setLinGameVals

#################

	# override tweak settings
	writelog "INFO" "${FUNCNAME[0]} - checkTweakLaunch:"
	checkTweakLaunch

	# remove GFWL if NOGFWL is 1
	checkXliveless

	# check dependencies - disable functions if dependency programs are missing and/or warn
	checkDeps

	# start winetricks gui if RUN_WINETRICKS is 1 or silently if WINETRICKSPAKS is not empty
	writelog "INFO" "${FUNCNAME[0]} - checkWinetricksLaunch:"
	checkWinetricksLaunch

	# start winecfg if RUN_WINECFG is 1
	writelog "INFO" "${FUNCNAME[0]} - checkWineCfgLaunch:"
	checkWineCfgLaunch

	# apply some regs if requested
	writelog "INFO" "${FUNCNAME[0]} - customRegs:"
	customRegs

	# minimize all open windows if TOGGLEWINDOWS is 1
	writelog "INFO" "${FUNCNAME[0]} - toggleWindows:"
	toggleWindows windowminimize

	# install ReShade if INSTALL_RESHADE is 1
	writelog "INFO" "${FUNCNAME[0]} - installReshade:"
	installReshade "$@"

	# install Depth3D Shader if RESHADE_DEPTH3D is 1
	writelog "INFO" "${FUNCNAME[0]} - installReshadeDepth3D:"
	installReshadeDepth3D

	# start game wih Reshade if USERESHADE is 1
	writelog "INFO" "${FUNCNAME[0]} - useReshade:"
	useReshade

	# start game wih usevkBasalt ENABLE_VKBASALT is 1
	writelog "INFO" "${FUNCNAME[0]} - usevkBasalt:"
	usevkBasalt

	# start $NYRNA if RUN_NYRNA is 1
	writelog "INFO" "${FUNCNAME[0]} - useNyrnaz:"
	useNyrna

	# start $REPLAY if RUN_REPLAY is 1
	writelog "INFO" "${FUNCNAME[0]} - useReplay:"
	useReplay

	# start game with side-by-side VR if RUNSBSVR is not 0 
	writelog "INFO" "${FUNCNAME[0]} - checkSBSVRLaunch:"
	checkSBSVRLaunch

	# start Vortex if VORTEXMODE is not 'disabled'
	writelog "INFO" "${FUNCNAME[0]} - checkVortex:"
	checkVortex

	#  (mostly for Vortex) if SELAUNCH is 1 check start a preconfigured exe instead of the game if defined/found - f.e. script extender for skyrim, fallout etc
	writelog "INFO" "${FUNCNAME[0]} - checkVortexSELaunch:"
	checkVortexSELaunch "$SELAUNCH"

	# start a custom program if RUN_CUSTOMCMD is ge 1
	writelog "INFO" "${FUNCNAME[0]} - checkCustomLaunch:"
	checkCustomLaunch "$@"

	# start strace process in the background if STRACERUN is 1
	writelog "INFO" "${FUNCNAME[0]} - checkStraceLaunch:"
	checkStraceLaunch

	# start network monitor process in the background if USENETMON is enabled and NETMON found
	writelog "INFO" "${FUNCNAME[0]} - checkNetMonLaunch:"
	checkNetMonLaunch

	# start gameconqueror when game starts if is RUN_GAMCON 1
	checkGamConLaunch

	# start custom user script
	customUserScriptStart

	# set pulse latency if CHANGE_PULSE_LATENCY is 1
	checkPulse

########################

	# the actual game launch:
	if [ "$GAMEARGS" != "none" ]; then
		IFS=" " read -r -a RUNGAMEARGS <<< "$GAMEARGS"
	fi

	GAMESTARTCMD=("${@}" "${RUNGAMEARGS[@]}")

	writelog "INFO" "${FUNCNAME[0]} - default game start command: ${GAMESTARTCMD[*]}"

	# start with boxtron:
	if [ "$USEBOXTRON" -eq 1 ]; then
			DOSEXE="$GP"
			if  [ -x "$(command -v "$BOXTRONCMD" 2>/dev/null)" ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting game '$GN ($AID)' with boxtron: '$BOXTRONCMD $BOXTRONARGS $DOSEXE'"
				RUNBOXTRONCMD=("$BOXTRONCMD" "$BOXTRONARGS" "$DOSEXE")
				# disable CHANGE_PULSE_LATENCY else audio gets stuck
				CHANGE_PULSE_LATENCY="0"
				"${RUNBOXTRONCMD[@]}"
			else
				writelog "ERROR" "${FUNCNAME[0]} -  boxtron command '$BOXTRONCMD' not found - exit"
				exit
			fi

	# start with roberta:
	elif [ "$USEROBERTA" -eq 1 ]; then
			VMEXE="$GP"
			if  [ -x "$(command -v "$ROBERTACMD" 2>/dev/null)" ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting game '$AID' with roberta: '$ROBERTACMD $ROBERTAARGS $VMEXE'"
				RUNROBERTACMD=("$ROBERTACMD" "$ROBERTAARGS" "$VMEXE")
				extRun "${RUNROBERTACMD[@]}"
			else
				writelog "ERROR" "${FUNCNAME[0]} -  roberta command '$ROBERTACMD' not found - exit"
				exit
			fi

	# start with luxtorpeda:
	elif [ "$USELUXTORPEDA" -eq 1 ]; then
			LUXEXE="$GP"
			if  [ -x "$(command -v "$LUXTORPEDACMD" 2>/dev/null)" ]; then
				# skip download if engine_choice.txt exists already:
				if [ ! -f "$HOME"/.config/luxtorpeda/"$AID"/engine_choice.txt ]; then
					writelog "INFO" "${FUNCNAME[0]} - downloading native game data for '$AID' with luxtorpeda: '$LUXTORPEDACMD' manual-download $AID"
					"$LUXTORPEDACMD" manual-download "$AID"
				fi
				writelog "INFO" "${FUNCNAME[0]} - starting game '$AID' with luxtorpeda: '$LUXTORPEDACMD $LUXTORPEDAARGS $LUXEXE'"
				RUNLUXTORPEDACMD=("$LUXTORPEDACMD" "$LUXTORPEDAARGS" "$LUXEXE")
				extRun "${RUNLUXTORPEDACMD[@]}"
			else
				writelog "ERROR" "${FUNCNAME[0]} -  luxtorpeda command '$LUXTORPEDACMD' not found - exit"
				exit
			fi			

	# start with gamemoderun:
	elif [ "$USEGAMEMODERUN" -eq 1 ]; then
		if [ "$USEGAMESCOPE" -eq 1 ]; then
			writelog "SKIP" "${FUNCNAME[0]} - skipping $GAMESCOPE as $GAMEMODERUN is enabled as well"
		fi

		if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting '$GN ($AID)' with Proton: '$PROTONVERSION' with '$GAMEMODERUN'"
			"$GAMEMODERUN" "${GAMESTARTCMD[@]}"
		else
			writelog "INFO" "${FUNCNAME[0]} - starting native game '$GN ($AID)' with '$GAMEMODERUN' - ${GAMESTARTCMD[*]}"
			"$GAMEMODERUN" "${GAMESTARTCMD[@]}"
		fi
	# start with gamescope:
	elif [ "$USEGAMESCOPE" -eq 1 ]; then
		if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting '$GN ($AID)' with Proton: '$PROTONVERSION' with $GAMESCOPE arguments '$GAMESCOPE_ARGS'"
		else
			writelog "INFO" "${FUNCNAME[0]} - starting native game '$GN ($AID)' with $GAMESCOPE arguments '$GAMESCOPE_ARGS'"
		fi
		IFS=" " read -r -a RUNGAMESCOPE_ARGS <<< "$GAMESCOPE_ARGS"
		"$GAMESCOPE" "${RUNGAMESCOPE_ARGS[@]}" "${GAMESTARTCMD[@]}"

	# regular start:
	else
		if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting '$GN ($AID)' with Proton: '$PROTONVERSION'"
		else
			writelog "INFO" "${FUNCNAME[0]} - starting native game '$GN ($AID)'"
		fi

		"${GAMESTARTCMD[@]}"

	fi
	writelog "STOP" "######### $PROGNAME $PROGVERS #########"
}

### CORE LAUNCH END ###

### COMMAND LINE START ###

function commandline {
	if [ "$1" == "set" ]; then
		if [ -n "$2" ]; then
				ENTLIST="$(sed -n "/#STARTsaveCfgdefault_template/,/#ENDsaveCfgdefault_template/p;/#ENDsaveCfgdefault_template/q" "$0" | grep "echo"  | grep "=" | cut -d '"' -f2 | cut -d '=' -f1 | sed 's/^#//')"
				if ! grep "$2" <<< "$ENTLIST" >/dev/null; then
					echo "$2 is no valid entry - valid are:"
					echo "-----------------------"
					echo "$ENTLIST"
					echo "-----------------------"
					exit
				fi
			if [ -n "$3" ]; then
				if [ -z "$4" ]; then
					echo "argument 4 is missing - exit"
					exit
				else
					if [ "$3" == "all" ]; then
						echo "arg3 is all - updating all config files in $STLGAMEDIR:"
						while read -r file; do
							echo "updating entry $2 to value $4 in config $file"
							updateConfigEntry "$2" "$4" "$file"
						done <<< "$(find "$STLGAMEDIR" -name "*.conf")"
					else
						if [ -f "$STLGAMEDIR/$3.conf" ]; then
							echo "updating entry $2 to value $4 in config $STLGAMEDIR/$3.conf"
							updateConfigEntry "$2" "$4" "$STLGAMEDIR/$3.conf"
							else
							echo "config file $STLGAMEDIR/$3.conf does not exist - nothing to do - exit"
							exit
						fi
					fi
				fi
			else
				echo "arg3 is missing, you need to provide either the SteamAppId of the game or 'all' to batch update all game configs with the chosen entry!"
				exit	
			fi
		else
			echo "arg2 is missing, you need to provide a valid config entry which should be updated!"
			exit
		fi
	elif  [ "$1" == "vortex" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "install" ]; then
				installVortexFull				
			elif [ "$2" == "start" ]; then
				VORTEXMODE="quickstart"
				startVortex
			elif [ "$2" == "getset" ]; then
				VORTEXMODE="quickstart"
				startVortex "$2"
			else	
				echo "arg2 $1 is no valid command"
				createDefaultCfgs
				howto	
			fi
		fi
	elif  [ "$1" == "autotweaks" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "$PF" ]; then
				createTweak"$PF" "$3"
			elif [ "$2" == "$LU" ]; then
				createTweak"$LU" "$3"
			fi
		fi
	elif  [ "$1" == "dl" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "$GIT" ]; then
				gitUpdate "$GLDLSTLDIR" "$PROJECTPAGE"
				date > "$GLDLSTLTXT"
			else
				howto
			fi
		else
			howto
		fi
	elif  [ "$1" == "settings" ]; then
		createDefaultCfgs
		if [ -n "$2" ]; then
			openSettings "$2"
		else
			openSettings
		fi
	else
		echo "-----------------------"
		echo "arg1 $1 is no valid command"
		createDefaultCfgs
		howto
	fi
}

### COMMAND LINE END ###

### CLOSE STL START ###

function writeLastRun {
	{
	echo "GPROT=\"$GPROT\""
	echo "GWINE=\"$GWINE\""
	echo "PROTONVERSION=\"$PROTONVERSION\""
	echo "PREVAID=\"$AID\""
	echo "PREVGAME=\"$GN\""
	} >	"$LASTRUN"
}

function closeSTL {
	writelog "INFO" "${FUNCNAME[0]} - game $GN ($AID) exited - cleaning up custom processes if necessary"

	# kill $VRVIDEOPLAYER in case it wasn't closed before
	if [ -n "$RUNSBSVR" ]; then
		if [ "$RUNSBSVR" -ge 1 ]; then
			if pgrep -f "$VRVIDEOPLAYER" ; then
				pkill -f "$VRVIDEOPLAYER"
				writelog "INFO" "${FUNCNAME[0]} - $VRVIDEOPLAYER killed"
			fi
		fi
	fi
	
	# kill $NYRNA if running
	if [ -n "$RUN_NYRNA" ]; then
		if [ "$RUN_NYRNA" -eq 1 ]; then
			if pgrep -f "$NYRNA" ; then
				pkill -f "$NYRNA"
				# also remove systray created in /tmp/ ("systray_" with 6 random chars should be save enough)
				find /tmp -maxdepth 1 -type f -regextype posix-extended -regex '^.*systray_[A-Z,a-z,0-9]{6}' -exec rm {} \;
				writelog "INFO" "${FUNCNAME[0]} - $NYRNA killed"
			fi
		fi
	fi

	# kill $REPLAY if running
	if [ -n "$RUN_REPLAY" ]; then
		if [ "$RUN_REPLAY" -eq 1 ]; then
			if pgrep -f "$REPLAY" ; then
				pkill -f "$REPLAY"
				writelog "INFO" "${FUNCNAME[0]} - $REPLAY killed"
			fi
		fi
	fi

	# kill $GAMCON if running
	if [ "$RUN_GAMCON" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - game process finished - closing '$GAMCON'"
		pkill -f "$GAMCON"
		writelog "INFO" "${FUNCNAME[0]} - killed '$GAMCON' script"
	fi
	
	# stop network monitor if running

	if [ "$USENETMON" -eq 1 ]; then
		if pgrep "$NETMON" ; then
			pkill -f "$NETMON"
			writelog "INFO" "${FUNCNAME[0]} - $NETMON killed"
			# remove duplicate lines to make reading easier
			awk -i inplace '!visited[$0]++' "$NETMONDIR/$AID-$NETMON.log"
		fi
	fi

	toggleWindows windowraise

	customUserScriptStop

	# delete some possible "$YAD" leftovers
	find /tmp -maxdepth 1 -type f -regextype posix-extended -regex '^.*cfg[0-9].[A-Z,a-z,0-9]{8}' -exec rm {} \;

	# YADKEY="31337"
	# ipcrm -M "$YADKEY" # ?
	
	# notifier:
	if [ "$USENOTIFIER" -eq 1 ]; then
		if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
			"$NOTY" "Steam Tinker Launch stopped"
		fi
	fi
	writelog "STOP" "#########  ${FUNCNAME[0]} $PROGNAME $PROGVERS #########"

# only useful for win games:
	if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
		# ask if used autotweak should be adopted as regular user tweak
		if [ -n "$ATADOPT" ]; then
			if [ "$ATADOPT" -eq 1 ]; then
				if [ -n "$LOADAUTOCFG" ]; then
					writelog "INFO" "${FUNCNAME[0]} - ATADOPT is enabled, asking to adopt '$LOADAUTOCFG'"
					AskAdoptAutoTweak
				else
					writelog "SKIP" "${FUNCNAME[0]} - ATADOPT is enabled, but no AutoTweak was used"
				fi
			fi
		fi

		writelog "INFO" "${FUNCNAME[0]} - recreating $LASTRUN"
		writeLastRun
		# should not be necessary, but in case a game forks and partly hangs this could help to gracefully exit wine. if you have doubts feel free to open an issue:
		WINEPREFIX="$GPFX" wineserver -k
	fi
}

### CLOSE STL END ###

# main:#################

if [ -z "$1" ]; then
	echo "no arguments provided - you probably didn't launch this via steam command line arguments"
	createDefaultCfgs
	howto
else
	if grep -q "waitforexitandrun" <<< "$@"; then
		launchSteamGame "$@"
		closeSTL
		writelog "STOP" "######### $PROGNAME $PROGVERS #########"
	elif grep -q "steamapps/common" <<< "$@"; then
		if [ -f "$GE" ]; then
			echo please report if this is no linux native game: "$@"
			launchSteamGame "$@"
			closeSTL
			writelog "STOP" "######### $PROGNAME $PROGVERS #########"
		else
			echo unknown parameter "$@"
		fi
	else
		commandline "$@"
	fi
fi
